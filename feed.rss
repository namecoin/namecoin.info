<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/</link>
    <atom:link href="http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/feed.rss" rel="self" type="application/rss+xml" />
    <language>en</language>
    <pubDate>Mon, 05 Jul 2021 20:24:53 +0000</pubDate>
    <lastBuildDate>Mon, 05 Jul 2021 20:24:53 +0000</lastBuildDate>
    <generator>Jekyll</generator>
    <image>
      <url>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/images/logo.png</url>
      <title>Namecoin</title>
      <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/</link>
      <width>134</width>
      <height>25</height>
    </image>
    
      <item>
        <title>tstclnt: openssl s_client / gnutls-cli equivalent for NSS</title>
        <description>&lt;p&gt;When debugging TLS handshakes, it’s incredibly helpful to have a CLI tool that acts as a simple TLS client.  For OpenSSL (the TLS library used by Python, &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;, and various other GNU/Linux things), the relevant tool is &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl s_client&lt;/code&gt;.  For GnuTLS (the TLS library used by GNOME Web, &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;, and various other GNU/Linux things), it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;gnutls-cli&lt;/code&gt;.  But did you know that there’s an analogous tool for NSS (the TLS library used by Firefox and the GNU/Linux version of Chromium)?  If you didn’t know this, you can be easily forgiven – the Mozilla NSS documentation doesn’t mention that it exists, and there are almost no web search results for it!  Yet it’s there.&lt;/p&gt;

&lt;p&gt;The tool is called &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; (“testclient” with the vowels removed).  On Debian Buster, you can find it in the &lt;code class=&quot;highlighter-rouge&quot;&gt;libnss3-tools&lt;/code&gt; package.  On Fedora 34, it’s a tad more complicated: &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;nss-tools&lt;/code&gt; package, but it doesn’t install to a directory that’s on the default &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;.  Fedora instead installs &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib64/nss/unsupported-tools/&lt;/code&gt;   directory (path is accurate for &lt;code class=&quot;highlighter-rouge&quot;&gt;ppc64le&lt;/code&gt;; other architectures may have slightly different paths).&lt;/p&gt;

&lt;p&gt;Once you’ve installed &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt;, you can run it like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tstclnt -b -D -h www.namecoin.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-h&lt;/code&gt; argument indicates which TLS server to connect to.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;-b&lt;/code&gt; flag instructs &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; to use the default CKBI (built-in certificate database) PKCS#11 module.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt; flag disables the Softoken (SQLite-based certificate database) PKCS#11 module.&lt;/p&gt;

&lt;p&gt;If all goes well, &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; will do a successful TLS handshake with &lt;code class=&quot;highlighter-rouge&quot;&gt;www.namecoin.org&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more fun, you may also wish to try the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;-b&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;-R /usr/lib64/pkcs11/p11-kit-trust.so&lt;/code&gt; to use a non-default PKCS#11 module instead of CKBI.&lt;/li&gt;
  &lt;li&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;-d sql:/etc/pki/nssdb&lt;/code&gt; to use a SQLite certificate database with Softoken.  (You can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;dbm:&lt;/code&gt; prefix instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;sql:&lt;/code&gt; if you want to use Softoken’s legacy BerkeleyDB database format instead of the modern SQLite.)&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;-C&lt;/code&gt; to dump the certificate chain.  (You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;-C -C&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-C -C -C&lt;/code&gt; for more verbosity.)&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt; to override certificate validation errors.&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;-p 443&lt;/code&gt; to connect to a non-default TLS port.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course you can access a full list of options via &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt --help&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; is an excellent tool for TLS hackers; it’s too bad Mozilla doesn’t document its existence.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/07/05/tstclnt-openssl-s_client-gnutls-cli-equivalent-for-nss.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/07/05/tstclnt-openssl-s_client-gnutls-cli-equivalent-for-nss.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncdns v0.2 Released</title>
        <description>&lt;p&gt;We’ve released ncdns v0.2.  This release adds layer-2 TLS via Encaya, and overhauls the build system.&lt;/p&gt;

&lt;p&gt;Full changelog of what’s new since v0.1.2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ncdns
    &lt;ul&gt;
      &lt;li&gt;Code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;generate_nmc_cert
    &lt;ul&gt;
      &lt;li&gt;Rebase against Go 1.14.&lt;/li&gt;
      &lt;li&gt;Set ExtKeyUsage on CA.&lt;/li&gt;
      &lt;li&gt;Use compressed ECDSA public keys.  Thanks to Filippo Valsorda.&lt;/li&gt;
      &lt;li&gt;Support AIA.&lt;/li&gt;
      &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;chain.pem&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;caChain.pem&lt;/code&gt; output files.&lt;/li&gt;
      &lt;li&gt;Support certs with multiple hostnames.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows installer
    &lt;ul&gt;
      &lt;li&gt;Enable TLS by default in silent installs.&lt;/li&gt;
      &lt;li&gt;Add Encaya (layer-2 positive TLS overrides for CryptoAPI).&lt;/li&gt;
      &lt;li&gt;Fix NSIS logging in silent mode.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Linux
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setuid&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;setgid&lt;/code&gt; no longer require cgo.  Thanks to Hugo Landau.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build system:
    &lt;ul&gt;
      &lt;li&gt;Windows installer is now built in RBM.&lt;/li&gt;
      &lt;li&gt;GNU/Linux and macOS binaries are built again.&lt;/li&gt;
      &lt;li&gt;RBM builds now run on Cirrus CI.&lt;/li&gt;
      &lt;li&gt;Add projects:
        &lt;ul&gt;
          &lt;li&gt;certinject.&lt;/li&gt;
          &lt;li&gt;encaya.&lt;/li&gt;
          &lt;li&gt;generate_nmc_cert.&lt;/li&gt;
          &lt;li&gt;qlib.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Bump dependencies:
        &lt;ul&gt;
          &lt;li&gt;tor-browser-build.&lt;/li&gt;
          &lt;li&gt;BIND.&lt;/li&gt;
          &lt;li&gt;goansicolor.&lt;/li&gt;
          &lt;li&gt;gobtcd.&lt;/li&gt;
          &lt;li&gt;gobtcutil.&lt;/li&gt;
          &lt;li&gt;goconfigurable.&lt;/li&gt;
          &lt;li&gt;godexlogconfig.&lt;/li&gt;
          &lt;li&gt;godns.&lt;/li&gt;
          &lt;li&gt;gogroupcache.&lt;/li&gt;
          &lt;li&gt;goisatty.&lt;/li&gt;
          &lt;li&gt;gomadns.&lt;/li&gt;
          &lt;li&gt;gopflag.&lt;/li&gt;
          &lt;li&gt;gopretty.&lt;/li&gt;
          &lt;li&gt;goservice.&lt;/li&gt;
          &lt;li&gt;gosvcutils&lt;/li&gt;
          &lt;li&gt;gosystemd.&lt;/li&gt;
          &lt;li&gt;gotext.&lt;/li&gt;
          &lt;li&gt;gotlsrestrictnss.&lt;/li&gt;
          &lt;li&gt;gounits.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Switch to &lt;code class=&quot;highlighter-rouge&quot;&gt;tar.xz&lt;/code&gt; output to match upstream Tor.&lt;/li&gt;
      &lt;li&gt;Generate rbm.conf from upstream Tor at build time.&lt;/li&gt;
      &lt;li&gt;Auto-create GitHub PR for dependency bumps.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/download/betas/#ncdns&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/06/28/ncdns-v0.2-released.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/06/28/ncdns-v0.2-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>rbm on Cirrus CI</title>
        <description>&lt;p&gt;rbm (Reproducible Build Manager) is a quite nice system for reproducible builds.  rbm was originally created by Nicolas Vigier from the Tor Browser Team as a replacement for Gitian (which was previously used by Tor Browser and is still used by Bitcoin Core).  rbm has since been adopted by other projects like Ricochet and Namecoin (in particular, we use rbm for building ncdns).  Recently, I’ve been doing some mad science experiments with running rbm on Cirrus CI infrastructure.&lt;/p&gt;

&lt;h2 id=&quot;why-use-cirrus-ci-for-reproducible-builds&quot;&gt;Why use Cirrus CI for reproducible builds?&lt;/h2&gt;

&lt;p&gt;Being able to run rbm as part of a CI workflow brings several benefits:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We can test PR’s to make sure they build properly, without needing a developer machine to do the build.&lt;/li&gt;
  &lt;li&gt;We can upload nightly build binaries, and binaries built from PR’s, again without needing a developer machine.&lt;/li&gt;
  &lt;li&gt;We can use the CI service as a co-signer for reproducible release builds.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The third may merit some further explanation, since you may be wondering why anyone should trust Cirrus CI to sign our builds.  The underlying principle of reproducible builds is &lt;strong&gt;not&lt;/strong&gt; that any particular co-signer is supposed to be trustworthy.  Rather, the co-signers should be &lt;strong&gt;diverse&lt;/strong&gt;, such that an event that compromises a subset of the co-signers is not likely to compromise the remainder.  For example, it is desirable for different co-signers to run different OS distributions, not because any of those distributions are trustworthy, but simply because a compromise of Debian signing keys is unlikely to also result in a compromise of Fedora signing keys (or vice versa).  This explains why it’s desirable to use Cirrus CI as a co-signer: the circumstances that would cause Cirrus CI infrastructure to be compromised are quite different from the circumstances that would cause the Namecoin developers’ build machines to be compromised; thus using Cirrus CI as a co-signer improves diversity, which by extension improves security.&lt;/p&gt;

&lt;p&gt;Why did I pick Cirrus CI instead of other CI services like GitLab, GitHub Actions, or Microsoft Azure Pipelines?  Cirrus made sense because Bitcoin Core already uses it, meaning that Namecoin already uses it too.  However, it should be noted that there’s no good reason to stick to only one CI service here; more CI services means more diversity, and thus more security.  I intend to try porting this work to other CI service in the future.&lt;/p&gt;

&lt;h2 id=&quot;running-rbm-at-all&quot;&gt;Running rbm at all&lt;/h2&gt;

&lt;p&gt;Cirrus typically runs all GNU/Linux builds inside a Docker container.  Meanwhile, rbm uses &lt;code class=&quot;highlighter-rouge&quot;&gt;runc&lt;/code&gt; to start containers of its own.  &lt;a href=&quot;https://www.youtube.com/watch?v=PivpCKEiQOQ&quot;&gt;As Hitler wants us to know&lt;/a&gt;, running a container inside a container is an easy way to lose World War II.  However, Cirrus does have a minimally documented build mode called &lt;code class=&quot;highlighter-rouge&quot;&gt;docker_builder&lt;/code&gt;.  This is described in the documentation as a mechanism to build custom Docker containers so that you can then use those containers to run your actual build in the normal way inside Docker.  However, the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker_builder&lt;/code&gt; mode is actually just a standard Ubuntu VM, and it works totally fine to run an rbm build in this environment without ever touching Docker [1].&lt;/p&gt;

&lt;h2 id=&quot;time-limits-caching&quot;&gt;Time limits: Caching&lt;/h2&gt;

&lt;p&gt;Cirrus has a default time limit per task of 1 hour.  This can be increased to a maximum of 2 hours via YML configuration, but 2 hours is still too short a duration to build Tor Browser (or ncdns).  However, there are some hacks we can use here.  First off, we can instruct Cirrus to cache the &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt; directory that rbm creates during a build.  This means that once we build a specific project (e.g. GCC or the Go compiler), it won’t have to be rebuilt unless its version or dependencies are bumped.  We can also cache the &lt;code class=&quot;highlighter-rouge&quot;&gt;git_clones&lt;/code&gt; directory, which means that only new Git commits must be downloaded, rather than cloning entire repositories on each build.&lt;/p&gt;

&lt;h2 id=&quot;time-limits-splitting-by-project&quot;&gt;Time limits: Splitting by Project&lt;/h2&gt;

&lt;p&gt;Once we’re caching the outputs of projects, we can instruct Cirrus to split the build into several tasks, each of which builds only a subset of projects.  For example, Namecoin currently builds GCC, the Go compiler, and a few Go libraries in one task, while we build ncdns in another task.  I wrote a Bash script that automates construction of a Cirrus YML config that contains many tasks that all run rbm and are executed sequentially.  (Maybe I could scrap the Bash script in favor of smarter YML usage?  Looking into that is for another day.)&lt;/p&gt;

&lt;h2 id=&quot;time-limits-the-clang-problem&quot;&gt;Time limits: The Clang Problem&lt;/h2&gt;

&lt;p&gt;A few of Tor Browser’s rbm projects take longer than 2 hours to build.  The good news is that none of them are necessary to build any Namecoin projects for GNU/Linux or Windows targets.  The bad news is that one of them (Clang) is needed to build Namecoin for macOS.  And of course, since Namecoin is a good neighbor, I want to get this upstreamed to Tor, so Tor’s problems are my problems.  I considered a few options here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Try to refactor the affected projects so that they can be split into smaller projects that each take less build time.  I rejected this approach because (1) it would probably be fairly invasive to upstream, and (2) it would probably slow down builds that aren’t running on Cirrus (there is a nontrivial per-project overhead in rbm).&lt;/li&gt;
  &lt;li&gt;Checkpoint the build containers with &lt;a href=&quot;https://www.criu.org/&quot;&gt;CRIU&lt;/a&gt; (“Checkpoint/Restore In Userspace”; basically the container equivalent of the “hibernate” feature that operating systems have on bare-metal), so we can split their execution into multiple Cirrus tasks.  This seemed like a good option since runc has built-in support for CRIU, until Nicolas from Tor gave me a heads up that rbm was soon going to replace runc with something built in-house, which does not support CRIU.&lt;/li&gt;
  &lt;li&gt;Send the SIGINT signal to a build container to interrupt its build script, then cache the container’s filesystem, and then run the build script again in a subsequent Cirrus task.  This is conceptually similar to CRIU, but it abuses the fact that most build systems (e.g. GNU Make) are smart enough to not repeat already-completed steps if you run them a 2nd time.  In contrast, CRIU is designed to handle the more general case where a program inside a container isn’t that smart – we do not need that level of robustness here, and sending SIGINT to everything inside a build container is a lot simpler than using CRIU with a container system that isn’t designed to support it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Option 3 is what I decided to go with.  I initially wasn’t sure how to send SIGINT to a container, but some brief experiments with &lt;code class=&quot;highlighter-rouge&quot;&gt;pgrep&lt;/code&gt; on the host OS showed that all processes inside the rbm container were visible from the host OS, including their command-line metadata.  Since rbm always launches a build inside the container by running a script called &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;, that means we can identify the host-side process ID of the build script inside the container by running &lt;code class=&quot;highlighter-rouge&quot;&gt;pgrep -f '\./build'&lt;/code&gt;.  Furthermore, I found &lt;a href=&quot;https://unix.stackexchange.com/a/299198&quot;&gt;a Stack Exchange answer by Russell Davis&lt;/a&gt; on obtaining all of the descendent process ID’s (e.g. the &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt; processes); this also works from the host OS.&lt;/p&gt;

&lt;p&gt;From this, I wrote a quick Bash script (which runs on the host OS) that first sets a flag (via &lt;code class=&quot;highlighter-rouge&quot;&gt;touch&lt;/code&gt;ing a file) indicating that the build was interrupted, and proceeds to send SIGINT to the build script and all of its descendent processes inside the rbm container.  Next, I patched rbm so that when the build script exits, rbm checks if that flag is set.  If it was set, then rbm saves a copy of the container’s filesystem before deleting the container.  The next time rbm tries to build that particular project hash, it checks whether it had previously saved a filesystem for that project hash; if so, it restores the filesystem instead of creating a clean container image.&lt;/p&gt;

&lt;p&gt;Finally, I had to slightly patch the build script for the Clang toolchain projects.  This was necessary because although GNU Make is smart enough to not get confused by being run twice in a row, Tor’s Bash script for building Clang is not quite that smart.  I didn’t need to make the Bash build script tolerate being restarted at arbitrary points; the only place where it was going to restart from was the &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; command.  So, I simply made the build script set a flag (again, by &lt;code class=&quot;highlighter-rouge&quot;&gt;touch&lt;/code&gt;ing a file) right before it ran the &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; command; this gets saved along with the rest of the container’s filesystem if the build gets interrupted with SIGINT.  If the build script finds that this flag is set at the beginning of the script, it skips ahead in the script straight to the &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; command.  Sure, it’s a little hacky, but it’s dead simple and generally noninvasive.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;Namecoin’s rbm build system now runs inside Cirrus CI, meaning that we can use Cirrus as a reproducible build co-signer.  In addition, I set up a Cirrus cron task that checks daily for dependencies whose versions we can bump, and automatically submits a GitHub PR when it finds some.  Since Cirrus builds our GitHub PR’s, this allows us to automatically test whether the bumped dependencies still build without errors, saving us even more time.&lt;/p&gt;

&lt;p&gt;I gave a presentation on this work at Tor Demo Day; the response from the Tor developers was enthusiastic.  (My understanding is that Tor intends to post a video of the presentation.)  I intend to send these patches upstream to Tor once Namecoin has battle-tested them for a few months.&lt;/p&gt;

&lt;p&gt;In the field of reproducible builds, security derives from diversity.  Adding the diversity of public CI infrastructure to the Namecoin and Tor reproducible build systems yields a major security bump.  I’m looking forward to getting this upstreamed, and maybe adding additional CI services like GitLab and GitHub Actions to the mix in the future.&lt;/p&gt;

&lt;p&gt;[1] Yes, I know that Hitler was referring to a container inside a VM, which means we’re still violating Hitler’s advice.  Quiet, you.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/06/09/rbm-on-cirrus-ci.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/06/09/rbm-on-cirrus-ci.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Transaction queue for Namecoin Core</title>
        <description>&lt;p&gt;Lately, work aiming to simplify the RPC API for name management has been proceeding. This is done both for the sake of improvement itself, and to make it easier to write GUIs for Namecoin.&lt;/p&gt;

&lt;p&gt;One unique element in Namecoin is the extensive use of time-dependent transactions. This is comparatively rare in Bitcoin. Either you want to send money or you don’t want to send money, but the “when” is usually ASAP. However, in Namecoin, it’s pretty common to, for instance, want to renew a name &lt;em&gt;when&lt;/em&gt; it’s close to expiring, or register a name &lt;em&gt;when&lt;/em&gt; its &lt;code class=&quot;highlighter-rouge&quot;&gt;NAME_NEW&lt;/code&gt; input has matured.&lt;/p&gt;

&lt;p&gt;Historically, this has been a bit of an annoyance. Transactions can only[1] be broadcast if they have a good chance of making it into the next block, and not all transactions are intended to be broadcast immediately. The way users had to deal with it, then, was to manually keep track of what transactions they wanted broadcast and when.&lt;/p&gt;

&lt;p&gt;This isn’t suitable. It’s bad enough for direct users, but it also makes writing auxilliary software a pain, since the obligation will fall upon it to manage a lot of state. For example, the old name management GUI had to have a series of undocumented internal hooks into the wallet database.&lt;/p&gt;

&lt;p&gt;For this reason, a transaction queue has now been added to Namecoin to explicitly manage all that state. It was written by Brandon Roberts, Jeremy Rand, and yanmaani, who is the author of this post.  The implementation is actually shockingly simple:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Keep a list of transactions we’d like to broadcast&lt;/li&gt;
  &lt;li&gt;Each block, try to broadcast everything&lt;/li&gt;
  &lt;li&gt;Remove everything that made it into the mempool&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The initial plan was to have a very baroque API, where users could enter transactions and have them broadcast either when a name reached a certain age or when a transaction had a certain height. The reason for this was was that the transaction queue API was &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2018/10/21/electrum-nmc-name-registration-gui.html&quot;&gt;first implemented in Electrum-NMC&lt;/a&gt;, which doesn’t allow you to check whether a transaction is valid without leaking it to the server. &lt;em&gt;Having already implemented all this&lt;/em&gt;, it was realized that Bitcoin’s existing locking facilities could already cover our needs for Namecoin Core, and so I took it out. Wasting the effort was a bummer, but you can’t be sentimental like that. In the end it made for a better API and cleaner code. Such is life.&lt;/p&gt;

&lt;p&gt;The API for the transaction queue is thus very simple:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;queuerawtransaction &amp;lt;hex&amp;gt;&lt;/code&gt; queues a transaction to be broadcast as soon as it can, and returns the txid on success. There is a basic sanity check to try and ensure the transaction at least theoretically could be broadcast at some point in the future, but there’s no guarantee. Note that it’s on you to properly lock the transaction, or else it will be broadcast immediately. If you want to update a name when it’s 35000 blocks old, make sure to set nSequence on the name input to 35001.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dequeuerawtransaction &amp;lt;txid&amp;gt;&lt;/code&gt; removes a transaction from the queue.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;listqueuetransactions&lt;/code&gt; lists all the queued transactions. Note that this may also include transactions queued by RPC calls.&lt;/p&gt;

&lt;p&gt;These changes will be available in Namecoin Core starting version 22.0.&lt;/p&gt;

&lt;p&gt;This change was a prerequisite for &lt;code class=&quot;highlighter-rouge&quot;&gt;name_autoregister&lt;/code&gt;, an RPC call to register a name in one step without having to manually call &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt;, regarding which we endeavor to have an update in the next few days. That RPC call is the final pre-requisite for completing the new name management GUI.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s NGI0 Discovery Fund.&lt;/p&gt;

&lt;p&gt;[1] Actually, this is only true in Bitcoin. In Namecoin, presumably to take the edge off this wart, there’s a special (somewhat ungainly) exemption for &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt;, which was the cause of very serious bugs in the past, such as the &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2018/07/08/brownout-june-17-20.html&quot;&gt;June 2018 incident&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/06/01/transaction-queue-for-namecoin-core.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/06/01/transaction-queue-for-namecoin-core.html</guid>
        <dc:creator>yanmaani</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Deterministic salts in Namecoin Core</title>
        <description>&lt;p&gt;Namecoin Core will, starting version 22.0, no longer require that a salt or TXID be provided in the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; RPC call. If no transaction ID is provided, the wallet will perform a linear scan over its unspent outputs to attempt to find a matching transaction. If no salt is provided, it will assume that it can be deterministically generated from the private key using the same scheme already &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2020/05/10/deterministic-salts.html&quot;&gt;implemented in Electrum-NMC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To facilitate this, &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; has also been changed to use deterministically generated salts.&lt;/p&gt;

&lt;p&gt;The old API is still supported; users are free to manually enter a salt, TXID, both, or neither. In fact, for &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; transactions created by versions of Namecoin Core prior to this change, the salt is still required. However, the transaction ID can always be determined automatically. In principle, it should only be necessary to provide the transaction ID to select which of several possible &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; outputs should be spent.&lt;/p&gt;

&lt;p&gt;There is therefore no longer any need to write down the salt and transaction ID going forward. With the new API, registering a name from the RPC console works like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name_new &quot;d/myname&quot;
(wait 12 blocks...)
name_firstupdate &quot;d/myname&quot; [value]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; is optional; omitting the parameter will cause Namecoin to &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2020/12/04/namecoin-core-name-firstupdate-name-update-default-values.html&quot;&gt;use the empty string&lt;/a&gt; by default.&lt;/p&gt;

&lt;p&gt;This change is being made as part of the effort to simplify the RPC API for name management. It was also one of the prerequisites for a new name registration GUI, work on which is intended to proceed shortly.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s NGI0 Discovery Fund.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/05/26/deterministic-salts-in-namecoin-core.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/05/26/deterministic-salts-in-namecoin-core.html</guid>
        <dc:creator>yanmaani</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Freenode Undergoing Hostile Takeover -- Abandon Ship</title>
        <description>&lt;p&gt;The Freenode IRC network is actively undergoing a &lt;a href=&quot;https://gist.github.com/joepie91/df80d8d36cd9d1bde46ba018af497409/&quot;&gt;hostile takeover&lt;/a&gt; by London Trust Media Holdings.  All Freenode staff have resigned in protest.  &lt;strong&gt;We strongly recommend that all Namecoin community members who are accessing our IRC channels via Freenode abandon ship immediately, and move to our channels on Hackint, OFTC, or Matrix.org.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/05/19/freenode-hostile-takeover.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/05/19/freenode-hostile-takeover.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Alerts</category>
        
        
      </item>
    
      <item>
        <title>Funding from NLnet</title>
        <description>&lt;p&gt;We are happy to announce that we have been selected by NLnet Foundation to receive funding. A total of €50’000 (roughly US$60’645) has been pledged toward our development work.&lt;/p&gt;

&lt;p&gt;NLnet is a Dutch charitable foundation. It helps fund open-source projects that aim to promote the exchange of electronic information. In the past, they, along with their partners, have helped fund projects such as &lt;a href=&quot;https://nlnet.nl/project/tor-hidden/&quot;&gt;Tor&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/qubes&quot;&gt;Qubes OS&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/wireguard&quot;&gt;WireGuard&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/Freenet-Routing&quot;&gt;Freenet&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/PeerTube&quot;&gt;PeerTube&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/YacyGrid&quot;&gt;YaCy&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/Libre-RISCV&quot;&gt;Libre-RISCV&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/Briar&quot;&gt;Briar&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/GNUMes&quot;&gt;GNU Mes&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/GUIX&quot;&gt;GNU Guix&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/ReplicantUpdate&quot;&gt;Replicant&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/Spectrum&quot;&gt;Spectrum&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/mobile-nixos&quot;&gt;NixOS&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/reproduciblebuilds&quot;&gt;Reproducible Builds&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/Rico&quot;&gt;Ricochet Refresh&lt;/a&gt;, and &lt;a href=&quot;https://nlnet.nl/project/namecoin&quot;&gt;Namecoin&lt;/a&gt;. The full list of projects is available at &lt;a href=&quot;https://nlnet.nl/project/index.html&quot;&gt;https://nlnet.nl/project/index.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will receive funding from NLnet’s NGI0 Discovery Fund. This fund is managed by NLnet and funded by the European Commission, the executive branch of the European Union, through their Next Generation Internet intitiative.&lt;/p&gt;

&lt;p&gt;We are immensely grateful to NLnet for this decision, and to the European Commission for their generous financial support. A governmental institution that invests in decentralized Internet technologies has its eye toward the future.&lt;/p&gt;

&lt;p&gt;We will use this funding to work on the following:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Making name registration easier with automatic registration and deterministic salts.&lt;/li&gt;
  &lt;li&gt;Making it safer and easier to buy and sell names with atomic name trading.&lt;/li&gt;
  &lt;li&gt;Making censoring light wallets harder by lightweight SPV proofs of name nonexistence.&lt;/li&gt;
  &lt;li&gt;Various security and performance improvements to Electrum-NMC and upstream Electrum.&lt;/li&gt;
  &lt;li&gt;Improving on-chain privacy with coin control.&lt;/li&gt;
  &lt;li&gt;Better Tor integration in Electrum, Namecoin Core, and hopefully Bitcoin Core.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This work will principally be done by developers Ahmed Bodiwala and yanmaani, who is the author of this post.&lt;/p&gt;

&lt;p&gt;We will post updates on a regular basis as development proceeds.&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/04/30/funding-from-nlnet.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/04/30/funding-from-nlnet.html</guid>
        <dc:creator>yanmaani</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Released 10 Years Ago Today</title>
        <description>&lt;p&gt;Today, April 18, 2021, marks 10 years since Vincent Durham first released Namecoin.  We’d like to wish a very happy birthday to the Namecoin community, and we look forward to the next 10 years (and beyond) of hijacking-resistant, censorship-resistant naming and PKI.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/04/18/namecoin-released-10-years-ago-today.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/04/18/namecoin-released-10-years-ago-today.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncdns v0.1.2 Released</title>
        <description>&lt;p&gt;We’ve released ncdns v0.1.2 for Windows.  This release includes a fix for an upstream issue that impacted Windows service support.  Binaries for non-Windows platforms are not yet available; we expect to release those soon.&lt;/p&gt;

&lt;p&gt;Full changelog of what’s new since v0.1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DNS:
    &lt;ul&gt;
      &lt;li&gt;Fix caching bug that affected DS, SRV, MX, and non-dehydrated TLSA records.  Patch by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TLS:
    &lt;ul&gt;
      &lt;li&gt;Compressed ECDSA public keys are now supported in TLSA records, even for TLS implementations that do not support such keys.  This paves the way for decreased blockchain storage.   Namecoin patch by Jeremy Rand; thanks to Filippo Valsorda for implementing this in upstream Go.&lt;/li&gt;
      &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;aia.x--nmc.bit&lt;/code&gt; meta-domain.  This paves the way for layer-2 TLS; see my Grayhat 2020 presentation for details.  Patch by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows:
    &lt;ul&gt;
      &lt;li&gt;Support logging to Windows Event Log.  Patch by Jeremy Rand; merged by Hugo Landau.&lt;/li&gt;
      &lt;li&gt;Switch to Windows Service library from upstream Go instead of abandoned Conformal fork.  This fixes a crash bug on Windows 10 when running as a Windows Service with ASLR/PIE enabled.  Patch by Jeremy Rand; merged by Hugo Landau.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Misc:
    &lt;ul&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build system:
    &lt;ul&gt;
      &lt;li&gt;Support Go modules.  Patch by Jeremy Rand; thanks to Hugo Landau for valuable input.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/download/betas/#ncdns&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/03/11/ncdns-v0.1.2-released.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/03/11/ncdns-v0.1.2-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Core 0.21.0.1 Released</title>
        <description>&lt;p&gt;Namecoin Core 0.21.0.1 has been released on the &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/download/#namecoin-core-client-stable-release&quot;&gt;Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s what’s new since 0.19.0.1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; for expired names will error by default.  (Reported by Jeremy Rand; Patch by Yanmaani; Reviewed by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; can accept queries by SHA256d hash.  (Reported by Jeremy Rand; Patch by Daniel Kraft; Reviewed by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_update&lt;/code&gt; now consider the value to be optional.  (Reported by Jeremy Rand; Patch by Yanmaani; Reviewed by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Added &lt;code class=&quot;highlighter-rouge&quot;&gt;namepsbt&lt;/code&gt; RPC method.  (Reported by Jeremy Rand; Patch by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Added new DNS seed for testnet.  (Patch by Yanmaani; Reviewed by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Fix build for WSL.  (Patch by Chris Andrew; Reviewed by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Fix crash on macOS 10.13+.  (Reported by Jip; Analysis by Jip, Daniel Kraft, Andy Colosimo, and Cassini; Patch by DeckerSU; Reviewed by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Code quality improvements for regression tests.  (Patch by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Numerous improvements from upstream Bitcoin Core.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/03/07/namecoin-core-0.21.0.1-released.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/03/07/namecoin-core-0.21.0.1-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>Namecoin Core Releases</category>
        
        
      </item>
    
  </channel>
</rss>
