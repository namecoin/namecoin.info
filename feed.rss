<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/</link>
    <atom:link href="http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/feed.rss" rel="self" type="application/rss+xml" />
    <language>en</language>
    <pubDate>Wed, 08 Jun 2022 22:18:23 +0000</pubDate>
    <lastBuildDate>Wed, 08 Jun 2022 22:18:23 +0000</lastBuildDate>
    <generator>Jekyll</generator>
    <image>
      <url>http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/images/logo.png</url>
      <title>Namecoin</title>
      <link>http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/</link>
      <width>134</width>
      <height>25</height>
    </image>
    
      <item>
        <title>Electrum-NMC v4.0.0b1 fixes CVE-2022-31246</title>
        <description>&lt;p&gt;Electrum-NMC v4.0.0b0 and earlier are affected by &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-31246&quot;&gt;CVE-2022-31246&lt;/a&gt; / &lt;a href=&quot;https://github.com/spesmilo/electrum/security/advisories/GHSA-4fh4-hx35-r355&quot;&gt;GHSA-4fh4-hx35-r355&lt;/a&gt; (the vulnerability is inherited from upstream Electrum).  Electrum-NMC v4.0.0b1 and ncdns for Windows v0.3.1 contain the fix.  Tor Browser Nightly was not vulnerable.  We would like to thank &lt;a href=&quot;https://www.unciphered.com/&quot;&gt;Unciphered&lt;/a&gt; and &lt;a href=&quot;https://immunefi.com/&quot;&gt;Immunefi&lt;/a&gt; for reporting the vulnerability and coordinating the disclosure with us, and upstream Electrum for implementing the fix.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/06/08/electrum-nmc-cve-2022-31246.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/06/08/electrum-nmc-cve-2022-31246.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Alerts</category>
        
        <category>Electrum-NMC Alerts</category>
        
        <category>ncdns Alerts</category>
        
        
      </item>
    
      <item>
        <title>ncdns v0.3.1 Released</title>
        <description>&lt;p&gt;We’ve released ncdns v0.3.1.  This Windows-only release includes important improvements to memory safety and UX; we recommend that all Windows users upgrade.&lt;/p&gt;

&lt;p&gt;Full changelog of what’s new since v0.3:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;certinject
    &lt;ul&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ncdns
    &lt;ul&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ncprop279
    &lt;ul&gt;
      &lt;li&gt;Fix stderr privacy leak when tlshook is enabled at compile-time.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;StemNS
    &lt;ul&gt;
      &lt;li&gt;Log errors to stderr. Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Redact target address from stderr logs.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Load configuration from &lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; folder.  Reported by Patrick Schleizer; patch by Yanmaani.&lt;/li&gt;
      &lt;li&gt;Support &lt;code class=&quot;highlighter-rouge&quot;&gt;ControlPort auto&lt;/code&gt;.  Reported by Adolf-Putin-2022; patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;x509-compressed
    &lt;ul&gt;
      &lt;li&gt;Fix Go 1.18.x compatibility.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows installer
    &lt;ul&gt;
      &lt;li&gt;Switch from BIND’s dnssec-keygen to CoreDNS’s coredns-keygen.  Unlike BIND, CoreDNS is memory-safe and has no non-freedom build dependencies.  This also means the Visual C++ Runtime is no longer required.  Reported by Yana Timoshenko and Aminda Suomalainen; patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Fix compatibility with StemNS’s conf.d feature.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Log StemNS stderr to event log.  Makes it easier to diagnose Tor Browser configuration bugs.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Work around PowerShell v2 bug.  Partially fixes Windows 7 compatibility.  Reported by Cyphrs; patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build system
    &lt;ul&gt;
      &lt;li&gt;Bump Electrum-NMC to v4.0.0b1.&lt;/li&gt;
      &lt;li&gt;Bump godns to v1.1.49.&lt;/li&gt;
      &lt;li&gt;Bump tor-browser-build to v11.5a12.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/download/#ncdns&quot;&gt;Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/06/04/ncdns-v0.3.1-released.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/06/04/ncdns-v0.3.1-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC v4.0.0b1 Released</title>
        <description>&lt;p&gt;We’ve released Electrum-NMC v4.0.0b1.  This release includes important UX improvements to reduce the risk of accidentally letting names expire, both on the wallet side and a resolution mechanism called &lt;a href=&quot;/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/02/18/preventing-expiration-mishaps-with-semi-expiration.html&quot;&gt;semi-expiration&lt;/a&gt; that stops resolving names before they are permanently lost.  Since semi-expiration affects resolution results, we therefore recommend that all users upgrade, even if you do not own any names yourself, so that you see the same resolution results as everyone else.  Here’s what’s new since v4.0.0b0:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simplify GUI for editing TLS records.  (Patch by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;Add documentation links to DNS Builder GUI.  (Patch by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;Add server from deafboy.  (Patch by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;Improve UNOList datetime formatting consistency.  (Patch by Jeremy Rand, review by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;expires_time&lt;/code&gt; field to &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt;.  (Patch by Jeremy Rand, review by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Implement semi-expiration.  (Reported by Cypherpunks, patch by Jeremy Rand, review by Arthur Edelstein, Cyberia Computer Club, Cypherpunks, Cyphrs, Daniel Kraft, Diego Salazar, Forest Johnson, s7r, Somewhat, and Yanmaani.)&lt;/li&gt;
  &lt;li&gt;Allow passing raw commitment to &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt;.  (Patch by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;Show exact expiration timestamps for expired names.  (Patch by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;Warn user in UNOList when names are expiring soon.  (Reported by Diego Salazar, patch by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;Fix some i18n bugs.  (Patch by Jeremy Rand, review by Somewhat, Yanmaani, and Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Add Namebrow.se explorer.  (Patch by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;Produce packager-friendly tarballs.  (Reported by Jeremy Rand, patches by Yanmaani and Jeremy Rand, review by Jeremy Rand and SomberNight.)&lt;/li&gt;
  &lt;li&gt;Switch to detached OpenPGP signatures (to follow upstream).&lt;/li&gt;
  &lt;li&gt;Various improvements from upstream Electrum.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/download/betas/#electrum-nmc&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and NLnet Foundation’s NGI0 Discovery Fund.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/06/02/electrum-nmc-v4.0.0b1-released.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/06/02/electrum-nmc-v4.0.0b1-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>Electrum Releases</category>
        
        
      </item>
    
      <item>
        <title>ncdns v0.3 Released</title>
        <description>&lt;p&gt;We’ve released ncdns v0.3.  This release adds Tor Browser configuration support to the Windows installer.  If you have Tor Browser installed already, the Windows installer will offer to configure Tor Browser to use Namecoin.  This Tor Browser support is aimed at a different audience than the support currently shipped with Tor Browser Nightly; the major features that the ncdns installer brings to the table compared to Tor Browser Nightly are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Windows support (Tor Browser Nightly only supports Namecoin on GNU/Linux).&lt;/li&gt;
  &lt;li&gt;Choice of Tor Browser Stable, Alpha, or Nightly (Stable and Alpha do not have Namecoin built-in).&lt;/li&gt;
  &lt;li&gt;Choice of Electrum-NMC or Namecoin Core (Tor Browser Nightly only supports Electrum-NMC).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains fall back to IP address resolution if no onion service exists (Tor Browser Nightly only supports onion services).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Additional features we intend to add to the ncdns installer in the future include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;TLS support (important for Tor since exit relays are in an excellent position to do MITM attacks, and also important given the censorship attacks we’ve observed from public CA’s such as Comodo and ISRG in the past few years).&lt;/li&gt;
  &lt;li&gt;Recursive DNS support (will allow more complex setups such as &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;DS&lt;/code&gt; records to be used with Namecoin over Tor).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While we are looking forward to all of the above features making their way into Tor Browser, we want to give power users the option to experiment with these features now.  We expect the feedback from that experimentation to make it easier and faster to migrate these features into Tor Browser.&lt;/p&gt;

&lt;p&gt;Meanwhile, here are some important caveats you should be aware of in this integration:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download size is much larger than Tor Browser Nightly’s Namecoin integration.  If you are on a heavily metered data plan, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;The build system is less strict on reproducibility than Tor Browser Nightly.  In particular, Electrum-NMC is built with the upstream Electrum reproducible build system, and BIND and DNSSEC-Trigger use official upstream binaries.  If you are concerned about these components, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;You must launch Electrum-NMC or Namecoin Core yourself and keep it running while Tor Browser is running; otherwise &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; resolution will fail.  If you want Electrum-NMC to automatically start when Tor Browser does, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;Some timing metadata (in particular, the date and time at which you exit Tor Browser) will be written to the Windows event log, which could be a privacy leak.  Timing metadata about Tor Browser usage has been used against alleged whistleblowers (e.g. alleged Vault 7 source Joshua Schulte) in the past, so if you have a strong requirement for disk nonpersistence, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;The TorButton patch for showing the underlying onion service in the circuit display is not included.  If you care about being able to easily view which onion service a &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domain is pointing to, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;The Firefox patch for adding &lt;code class=&quot;highlighter-rouge&quot;&gt;bit.onion&lt;/code&gt; to the eTLD list is not included.  This means that the address bar will default to search mode if you type a &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit.onion&lt;/code&gt; domain without a URL scheme (leading &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt;).  More importantly, it means that FPI (first-party isolation) will treat &lt;code class=&quot;highlighter-rouge&quot;&gt;bit.onion&lt;/code&gt; as an eTLD+1; as a result, all &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit.onion&lt;/code&gt; websites that you visit will be trivially linkable to each other.  To work around this privacy leak, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit.onion&lt;/code&gt; (but see the conflicting advice below), or you can limit yourself to one &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit.onion&lt;/code&gt; first-party domain at a time (use the New Identity button when you want to switch to another &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit.onion&lt;/code&gt; domain).  If you’re worried that you may not remember to do this, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;TLS is not mandated for &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains that point to an IP address.  This means that you cannot be confident that &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains are secure origins.  Tor Browser will correctly tell you that these origins are not secure; you should heed that warning.  To work around this, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit.onion&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; (but see the conflicting advice above), or you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt; URL scheme; either of these will guarantee a secure origin.  If you use HTTPS, you will need to verify the certificate chain yourself.  If you’re worried that you may accidentally use the &lt;code class=&quot;highlighter-rouge&quot;&gt;http://&lt;/code&gt; URL scheme with &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains, or if you’re worried that you may accidentally click through a TLS certificate dialog without checking the chain, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;Our QA team has reported occasional timeout errors when accessing &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains in Tor Browser.  We are investigating the cause.  If you require solidly reliable connectivity without timeouts, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;Our QA team has reported various breakage on Windows 7.  We are working on fixes, but this is not a high priority since Windows 7 is EOL.  If you require Windows 7 support, you may be better off waiting for us to fix that.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of the above caveats are easier to fix than others.  We expect some of these to be fixed very soon; others are longer-term efforts.  We reiterate that this is intended for power users who want to experiment with Namecoin in Tor Browser, so that their feedback can facilitate future efforts to get these features added to Tor Browser.  As such, we very much appreciate feedback so we can improve this functionality.&lt;/p&gt;

&lt;p&gt;Full changelog of what’s new since v0.2.2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;certinject
    &lt;ul&gt;
      &lt;li&gt;Add dexlogconfig support.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Add –capi.watch flag (paves the way for better sandboxing).  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;dexlogconfig
    &lt;ul&gt;
      &lt;li&gt;Support custom Windows event log source name.  Patch by Jeremy Rand; code review by Hugo Landau.&lt;/li&gt;
      &lt;li&gt;Clarify help text.  Reported by Jeremy Rand; patch by Hugo Landau.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;easyconfig
    &lt;ul&gt;
      &lt;li&gt;Support durations.  Reported by Jeremy Rand; patch by Hugo Landau.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Encaya
    &lt;ul&gt;
      &lt;li&gt;Add README.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Clarify license as GPLv3+.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ncdns
    &lt;ul&gt;
      &lt;li&gt;Use new certinject package.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Remove Layer-1 TLS support (100% of Namecoin domain owners moved to Layer-2 by now).  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ncprop279
    &lt;ul&gt;
      &lt;li&gt;Documentation: add sample config file.  Patch by redfish; code review by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;StemNS
    &lt;ul&gt;
      &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;StreamStatus.CONTROLLER_WAIT&lt;/code&gt; when available.  Patches by Jeremy Rand and Lola Dam.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;tlsrestrictnss
    &lt;ul&gt;
      &lt;li&gt;Fix compatibility with ncprop279.  Patch by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;x509-compressed
    &lt;ul&gt;
      &lt;li&gt;Fix GOROOT paths containing a space.  Patch by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows installer
    &lt;ul&gt;
      &lt;li&gt;Configure Tor Browser.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Remove Layer-1 TLS support (100% of Namecoin domain owners moved to Layer-2 by now).  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patch by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build system
    &lt;ul&gt;
      &lt;li&gt;Add coredns-utils project, by Miek Gieben, Steve Winslow, and Andrew Heberle.&lt;/li&gt;
      &lt;li&gt;Add python-windows project.  Patches by Yanmaani and Jeremy Rand; code review by Nicolas Vigier.&lt;/li&gt;
      &lt;li&gt;Add winsvcwrap project, by Hugo Landau.&lt;/li&gt;
      &lt;li&gt;Bump BIND to v9.16.28.&lt;/li&gt;
      &lt;li&gt;Bump Electrum-NMC to v4.0.0b0.&lt;/li&gt;
      &lt;li&gt;Bump godns to v1.1.48.&lt;/li&gt;
      &lt;li&gt;Bump gointernal to v1.8.1.&lt;/li&gt;
      &lt;li&gt;Bump gopkcs11 to v1.1.1.&lt;/li&gt;
      &lt;li&gt;Bump gotoml to v1.1.0.&lt;/li&gt;
      &lt;li&gt;Bump gounits.&lt;/li&gt;
      &lt;li&gt;Bump tor-browser-build to v11.5a11.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Improve Cirrus CI integration, as we continue to incubate RBM Cirrus support in preparation to send upstream to Tor.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can download it at the &lt;a href=&quot;/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/download/#ncdns&quot;&gt;Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/05/27/ncdns-v0.3-released.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/05/27/ncdns-v0.3-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>Go DNS Seeder TCP Support</title>
        <description>&lt;p&gt;In a previous post, I covered some Go DNS seeder improvements I made.  Now here’s another one: DNS over TCP support.&lt;/p&gt;

&lt;p&gt;DNS is an application-layer protocol, and can thus be used with multiple transport protocols.  The most common is UDP, but various others such as TCP, TLS, DTLS, QUIC, HTTP, HTTPS, and Unix sockets are a thing.  TCP is particularly relevant from a privacy standpoint because TCP works with Tor, while UDP does not.  Due to a bug, Lyndsay Roger’s DNS seeder didn’t support TCP, which made it unpleasant to access over Tor.  I’ve now fixed that; master branch now supports DNS over TCP, which both improves the experience for Tor users and brings the DNS seeder into compliance with RFC 7766 (which says TCP support is mandatory).&lt;/p&gt;

&lt;p&gt;Thanks to Lyndsay for merging the fix!  The fix will hopefully be deployed onto Namecoin’s DNS seeds over the next days.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/05/22/go-dns-seeder-tcp.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/05/22/go-dns-seeder-tcp.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Receives 30k EUR in Additional Funding from NLnet Foundation’s Internet Hardening Fund and Netherlands Ministry of Economic Affairs and Climate Policy</title>
        <description>&lt;p&gt;We’re happy to announce that Namecoin is receiving 30,000 EUR (roughly 33,306 USD) in additional funding from &lt;a href=&quot;https://nlnet.nl/&quot;&gt;NLnet Foundation&lt;/a&gt;’s Internet Hardening Fund.  If you’re unfamiliar with NLnet, you might want to read &lt;a href=&quot;https://nlnet.nl/foundation/&quot;&gt;about NLnet Foundation&lt;/a&gt;, or just take a look at &lt;a href=&quot;https://nlnet.nl/thema/index.html&quot;&gt;the projects they’ve funded over the years&lt;/a&gt; (you might see some familiar names).  The &lt;a href=&quot;https://nlnet.nl/internethardening/&quot;&gt;Internet Hardening Fund&lt;/a&gt; is managed by NLnet and funded by the &lt;a href=&quot;https://www.rijksoverheid.nl/ministeries/ministerie-van-economische-zaken-en-klimaat&quot;&gt;Netherlands Ministry of Economic Affairs and Climate Policy&lt;/a&gt;.  Unlike our &lt;a href=&quot;/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2021/04/30/funding-from-nlnet.html&quot;&gt;already-active funding&lt;/a&gt; from NLnet’s NGI0 Discovery Fund, which is focused on Namecoin Core and Electrum-NMC, this new funding is focused on TLS use cases.&lt;/p&gt;

&lt;p&gt;We will use this funding to work on the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Namecoin interoperability with TLS implementations that use AIA.  In addition to reducing attack surface of Namecoin TLS on Windows, this lays the groundwork for Namecoin TLS support on Android/Linux, macOS, and iOS.&lt;/li&gt;
  &lt;li&gt;Refactoring Namecoin TLS PKCS#11 interoperability to use higher-level API’s that are more straightforward to audit.  In addition to improving security and reliability of Namecoin TLS on Firefox (all OS’s) and GNU/Linux (most browsers), this lays the groundwork for things like decentralized TLS with &lt;code class=&quot;highlighter-rouge&quot;&gt;.onion&lt;/code&gt; domains (in collaboration with the Tor developers), and is likely to benefit 3rd-party developers who wish to create PKCS#11 modules in Go (e.g. for HSM or smart card use cases).&lt;/li&gt;
  &lt;li&gt;Adding imposed name constraint support to NSS’s TLS trust store (used by Firefox), similar to the existing functionality that exists in CryptoAPI (used by Windows) and GnuTLS (used by GNOME Web).  In addition to allowing us to simplify Namecoin’s TLS interoperability code considerably, this is likely to benefit system-wide trust policy projects such as sponsored by Red Hat.&lt;/li&gt;
  &lt;li&gt;Auditing TLS clients for name constraint bugs, using Netflix’s BetterTLS test suite.  This helps ensure that Namecoin’s security guarantees cannot be bypassed by exploiting bugs in 3rd-party applications.&lt;/li&gt;
  &lt;li&gt;Improved integration testing for Namecoin TLS PKCS#11 interoperability.  In addition to helping us review PR’s faster, this helps ensure that future changes in third-party applications/libraries don’t cause problems for Namecoin.&lt;/li&gt;
  &lt;li&gt;Windows installer for Namecoin TLS in Firefox and/or Tor Browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This work will principally be done by developers Aerth and Jeremy Rand (who is the author of this post).&lt;/p&gt;

&lt;p&gt;We’d like to thank the awesome people at NLnet Foundation for the continued vote of confidence, as well as the Netherlands government for recognizing that the economy and the climate require a hardened Internet.&lt;/p&gt;

&lt;p&gt;We’ll be posting updates regularly as development proceeds.  Due to delays in paperwork processing, some work covered by this funding has already taken place; for transparency, we have amended the relevant past news posts to clarify that they were funded by Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/03/07/namecoin-additional-funding-from-nlnet-internet-hardening-fund.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/03/07/namecoin-additional-funding-from-nlnet-internet-hardening-fund.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>The Namecoin Lab Leak (Part 2): How p11trustmod Vaccinates Against the Unmaintainable Code Omicron Variant</title>
        <description>&lt;p&gt;In a &lt;a href=&quot;/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2021/07/10/lab-leak-p11mod.html&quot;&gt;previous post&lt;/a&gt;, I covered how splitting off p11mod from ncp11 improved code readability and auditability by using a higher-level API.  Jacob Hoffman-Andrews’s p11 API is certainly more high-level than Miek Gieben’s pkcs11 API, but I wasn’t satisfied.  Consider that most PKCS#11 usage in the wild involves encryption or signature algorithms that operate on public or private keys.  In contrast, PKCS#11 modules like Mozilla CKBI or Namecoin ncp11 are strictly using the PKCS#11 API as a read-only database API, and only for X.509 certificates [1] – public and private keys are nowhere to be found.  Given these limits on what usage Namecoin will need, we can construct a much higher-level (and much simpler) API than even the p11 API.&lt;/p&gt;

&lt;p&gt;For reference, here are the function prototypes of p11:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FindObjects finds any objects in the token matching the template.
func (s Session) FindObjects(template []*pkcs11.Attribute) ([]Object, error)

Attribute gets exactly one attribute from a PKCS#11 object, returning an error if the attribute is not found, or if multiple attributes are returned. On success, it will return the value of that attribute as a slice of bytes. For attributes not present (i.e. CKR_ATTRIBUTE_TYPE_INVALID), Attribute returns a nil slice and nil error.
func (o Object) Attribute(attributeType uint) ([]byte, error)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the p11 API is intentionally very generic; every object is an arbitrary mapping of attribute types (generic integers) to attribute values (generic binary data), and searching for objects requires constructing a template that looks about as generic as the object itself.  This necessarily involves a lot of boilerplate.  Here’s the higher-level API, which I call p11trustmod:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type CertificateData struct {
	Label string
	Certificate *x509.Certificate
	BuiltinPolicy bool
	TrustServerAuth uint
	TrustClientAuth uint
	TrustCodeSigning uint
	TrustEmailProtection uint
}

func (b Backend) QueryCertificate(cert *x509.Certificate) ([]*CertificateData, error)
func (b Backend) QuerySubject(subject *pkix.Name) ([]*CertificateData, error)
func (b Backend) QueryIssuerSerial(issuer *pkix.Name, serial *big.Int) ([]*CertificateData, error)
func (b Backend) QueryAll() ([]*CertificateData, error)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, this API matches the behavior of libraries like NSS, which query for certificates by only a few search keys: the certificate itself, the subject, the issuer and serial, and asking for all the certificates at once.  In ncp11, we extract the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domain from the subject or the issuer.  (If the entire certificate is searched for, the subject and issuer are both within the &lt;code class=&quot;highlighter-rouge&quot;&gt;x509.Certificate&lt;/code&gt; struct.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;QueryAll&lt;/code&gt; search method can’t be used to look up &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; certificates, but it &lt;em&gt;can&lt;/em&gt; be used to find the Namecoin root CA, which is sufficient.)  Here’s some of what p11trustmod is doing behind the scenes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;FindObjects&lt;/code&gt; function checks which attributes are in the search template, and calls &lt;code class=&quot;highlighter-rouge&quot;&gt;QueryCertificate&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySubject&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;QueryIssuerSerial&lt;/code&gt; as appropriate.  Thus, ncp11 won’t need to deal with processing attributes from the search template.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;FindObjects&lt;/code&gt; function always calls &lt;code class=&quot;highlighter-rouge&quot;&gt;QueryAll&lt;/code&gt; and appends those results.  This allows ncp11 to return certain objects such as the Namecoin root CA even if those objects aren’t being referenced by name [2].&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;FindObjects&lt;/code&gt; function filters all the query results to make sure it actually matches the search template.  This allows ncp11 to simply return whatever Namecoin says matches the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domain, without worrying about the search template.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Attribute&lt;/code&gt; function automatically fills in sane values for boilerplate attributes such as &lt;code class=&quot;highlighter-rouge&quot;&gt;CKA_TOKEN&lt;/code&gt; (always true), &lt;code class=&quot;highlighter-rouge&quot;&gt;CKA_PRIVATE&lt;/code&gt; (always false), &lt;code class=&quot;highlighter-rouge&quot;&gt;CKA_MODIFIABLE&lt;/code&gt; (always false), and &lt;code class=&quot;highlighter-rouge&quot;&gt;CKA_CERTIFICATE_TYPE&lt;/code&gt; (always &lt;code class=&quot;highlighter-rouge&quot;&gt;CKC_X_509&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Attribute&lt;/code&gt; function automatically extracts the subject, issuer, serial number, and hash from the certificate, so ncp11 can just return the certificate.&lt;/li&gt;
  &lt;li&gt;The backend (e.g. ncp11) can choose whether to supply trust bits, and if so, p11trustmod synthesizes trust bits objects for the Namecoin root CA from the &lt;code class=&quot;highlighter-rouge&quot;&gt;BuiltinPolicy&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TrustServerAuth&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TrustClientAuth&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TrustCodeSigning&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;TrustEmailProtection&lt;/code&gt; fields.  There are some tradeoffs here:
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;BuiltinPolicy&lt;/code&gt; trust bit causes Certificate Transparency errors in Chromium, but enforces better security (e.g. blacklisting obsolete crypto and enforcing key rotations) in Firefox.&lt;/li&gt;
      &lt;li&gt;Omitting all trust bits from ncp11 and putting the Namecoin root CA in the standard trust store instead allows ncp11 to run with improved sandboxing.  However, depending on which trust store implementation is used, this might preclude the security benefits of the &lt;code class=&quot;highlighter-rouge&quot;&gt;BuiltinPolicy&lt;/code&gt; trust bit.  p11-kit, which is used in Fedora and Arch, supports the &lt;code class=&quot;highlighter-rouge&quot;&gt;BuiltinPolicy&lt;/code&gt; trust bit.  Softoken, which is used in Debian, Windows, and macOS, does not.  Since Tor Browser does not have a mutable trust store (for fingerprinting reasons), this sandboxing is probably not possible in Tor Browser.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, all things considered, p11trustmod eliminates quite a lot of boilerplate code that ncp11 would have otherwise needed to mix in with the Namecoin-specific ncp11 code.  By proactively implementing this additional layer of abstraction between p11mod and ncp11, we reduce the risk of a second “Omicron lab leak” of insufficiently auditable code.  p11trustmod is nearly finished with implementation but still needs testing; once testing is complete, we can move on to the Namecoin-specific code in ncp11, which I expect to be quite simple since the complex things have been split out into p11mod/p11trustmod.&lt;/p&gt;

&lt;p&gt;In other p11mod news, p11mod now supports generating key pairs.  Thanks to OpenDNSSEC for facilitating this.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;

&lt;p&gt;[1] Technically this isn’t quite true.  In addition to X.509 certificates, there are a couple of other object classes that are used for setting the trust policy bits on the Namecoin root CA.  Those classes are only used by optional features, though.&lt;/p&gt;

&lt;p&gt;[2] There are a few ways this might happen.  NSS sometimes retrieves a list of all known CA’s, e.g. to display in the certificate GUI.  NSS also retrieves trust bits objects by searching for an object class or a certificate hash instead of a PKIX name or full certificate.&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/02/26/lab-leak-part-2-p11trustmod.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/02/26/lab-leak-part-2-p11trustmod.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Preventing Expiration Mishaps with Semi-Expiration</title>
        <description>&lt;p&gt;Forgetting to renew a Namecoin name on time is rather catastrophic: it means that anyone else can re-register it and then hold the name hostage.  In practice today, it is likely that such re-registrations will be done by Good Samaritan volunteers who are happy to donate the name back to you.  However, as per the cypherpunk philosophy of “don’t trust, verify”, it’s not desirable to rely on those Good Samaritans, since they constitute a trusted third party.  How can we improve this situation?&lt;/p&gt;

&lt;p&gt;Let’s start by observing two fundamental properties of expired names:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Expired names resolve as &lt;code class=&quot;highlighter-rouge&quot;&gt;NXDOMAIN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Expired names can be registered by anyone.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Astute readers will have noticed that these are, in principle, distinct properties.  Where are they enforced?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Policy layer&lt;/strong&gt;: Expired names resolve as &lt;code class=&quot;highlighter-rouge&quot;&gt;NXDOMAIN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Consensus layer&lt;/strong&gt;: Expired names can be registered by anyone.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And what are their respective impacts?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Temporary DoS&lt;/strong&gt;: Expired names resolve as &lt;code class=&quot;highlighter-rouge&quot;&gt;NXDOMAIN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Permanent hijacking&lt;/strong&gt;: Expired names can be registered by anyone.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So what happens if we make the following change?  We introduce a new state for names: &lt;em&gt;Semi-Expired&lt;/em&gt;.  Semi-expired names obey Property 1 but not Property 2.  Names semi-expire when they come within 4032 blocks (4 weeks) of expiration.  Does the situation improve?&lt;/p&gt;

&lt;p&gt;Let’s imagine that Alice forgets to renew her name before it semi-expires.  As a result, her name becomes unresolvable.  This causes her website to go down.  Some of Alice’s users notice this, and complain to her via email, social media, or some other out-of-band medium.  Alice then renews her name, which reverts the semi-expired state.  And this out-of-band process gives Alice 4 weeks to fix things before she is at risk of having her name stolen.  That certainly seems like an improvement.  And this is solely a policy change, not a consensus change, making it cheap to implement and deploy.&lt;/p&gt;

&lt;p&gt;I’ve now implemented this in Electrum-NMC.  The RPC interface adds fields for the “semi-expired” state, and the Manage Names GUI counts down to semi-expiration rather than expiration.&lt;/p&gt;

&lt;p&gt;Some additional observations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Semi-expiration will only help you as a name owner if you actually actively use your name.  It won’t help you if you hold an unused name for squatting purposes.  While I don’t think any of the Namecoin developers are opposed to additional anti-expiry mechanisms that work for squatters, I think it’s arguably a good thing that semi-expiration incentivizes active use of names.&lt;/li&gt;
  &lt;li&gt;Because semi-expiration decreases the effective duration of resolvability for names (this is a necessary consequence of implementing semi-expiration on the policy layer), it means that name owners will renew somewhat more often with respect to time.  Theoretically, this means that name owners will pay higher fees with respect to time, and that the blockchain will grow faster with respect to time.  In practice, the difference is likely to be negligible, and if it is detectable at all, it will be in the form of increased block reward (which indirectly improves blockchain hashrate) and decreased incentive to squat on names (which indirectly improves usefulness of the system).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Semi-expiration should be released in Electrum-NMC v4.0.0b1.  Namecoin Core will hopefully follow soon after.&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/02/18/preventing-expiration-mishaps-with-semi-expiration.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/02/18/preventing-expiration-mishaps-with-semi-expiration.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Go DNS Seeder Improvements</title>
        <description>&lt;p&gt;Any P2P network has to deal with initial peer discovery.  Bitcoin and Namecoin mostly solve this via &lt;em&gt;DNS seeds&lt;/em&gt;: special domain names that return a large number of IP addresses corresponding to Bitcoin/Namecoin nodes.  If you’ve used Namecoin Core, you’ve probably encountered the dreaded “no peers” symptom.  This is because, unfortunately, the primary DNS seeder implementation used by Bitcoin (by Pieter Wuille) is neither Freedom Software (it’s under an All Rights Reserved license, so Namecoin cannot legally use it) nor memory-safe (it’s in C++).  To help improve Namecoin peer discovery (and maybe Bitcoin too), I’ve submitted the following improvements to Lyndsay Roger’s Go-based DNS seeder (which is both Freedom Software and memory-safe):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Run without root privileges via &lt;code class=&quot;highlighter-rouge&quot;&gt;setcap&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;This is a good alternative to &lt;code class=&quot;highlighter-rouge&quot;&gt;iptables&lt;/code&gt;, which was already supported.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use multiple initial IP’s.
    &lt;ul&gt;
      &lt;li&gt;Helpful if there are no operational DNS seeds when you start a crawl.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Receive multiple peers per crawl.
    &lt;ul&gt;
      &lt;li&gt;Fixes a Bitcoin protocol implementation bug that caused crawls to stall.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Support Bitcoin Core’s &lt;code class=&quot;highlighter-rouge&quot;&gt;seeds.txt&lt;/code&gt; API.
    &lt;ul&gt;
      &lt;li&gt;Allows us to export the seed list into Namecoin Core, so that even if the DNS seed is offline, Namecoin Core can still find peers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Route TCP traffic over SOCKS5 proxy.
    &lt;ul&gt;
      &lt;li&gt;Prerequisite for crawling onion-service peers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lyndsay has merged all of these except for the SOCKS5 patch, which is waiting on some review from the Tor developers.  Huge thanks to Lyndsay for reviewing and merging the patches – I’m hoping that these patches will result in much better peer discovery for Namecoin Core (which has always been a pain point for us).&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/01/29/go-dns-seeder-improvements.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/01/29/go-dns-seeder-improvements.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>p11mod Now Supports Signatures</title>
        <description>&lt;p&gt;In a &lt;a href=&quot;/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2021/07/10/lab-leak-p11mod.html&quot;&gt;previous post&lt;/a&gt;, I covered p11mod and how it improves the auditability of Namecoin’s TLS interoperability with NSS and GnuTLS.  Recently, I’ve expanded the subset of the PKCS#11 implementation that p11mod covers; p11mod can now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Import certificates, public keys, and private keys.&lt;/li&gt;
  &lt;li&gt;Delete certificates, public keys, and private keys.&lt;/li&gt;
  &lt;li&gt;Sign messages with private keys.&lt;/li&gt;
  &lt;li&gt;Verify signatures with public keys.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;None of these operations are required by Namecoin, but they do make p11mod useful for a wider variety of use cases, which helps attract more users and developers.  This new functionality was made possible by integration tests from OpenDNSSEC.  Thanks to the OpenDNSSEC developers for that!&lt;/p&gt;

&lt;p&gt;I also fixed a PKCS#11 specification compliance bug in p11mod (stupid off-by-one error in object handle validation), which was surfaced by a GnuTLS upgrade that enforces greater strictness.  Kudos to the GnuTLS developers for being strict and helping me fix a bug!&lt;/p&gt;

&lt;p&gt;All of these improvements are now tested daily on Cirrus via p11proxy.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/01/27/p11mod-signatures.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1EZSUprqJQph9JwKg3gAJtiNs899vatZTo/2022/01/27/p11mod-signatures.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
  </channel>
</rss>
