<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/</link>
    <atom:link href="http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/feed.rss" rel="self" type="application/rss+xml" />
    <language>en</language>
    <pubDate>Wed, 26 May 2021 15:54:00 +0000</pubDate>
    <lastBuildDate>Wed, 26 May 2021 15:54:00 +0000</lastBuildDate>
    <generator>Jekyll</generator>
    <image>
      <url>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/images/logo.png</url>
      <title>Namecoin</title>
      <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/</link>
      <width>134</width>
      <height>25</height>
    </image>
    
      <item>
        <title>Deterministic salts in Namecoin Core</title>
        <description>&lt;p&gt;Namecoin Core will, starting version 22.0, no longer require that a salt or TXID be provided in the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; RPC call. If no transaction ID is provided, the wallet will perform a linear scan over its unspent outputs to attempt to find a matching transaction. If no salt is provided, it will assume that it can be deterministically generated from the private key using the same scheme already &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2020/05/10/deterministic-salts.html&quot;&gt;implemented in Electrum-NMC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To facilitate this, &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; has also been changed to use deterministically generated salts.&lt;/p&gt;

&lt;p&gt;The old API is still supported; users are free to manually enter a salt, TXID, both, or neither. In fact, for &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; transactions created by versions of Namecoin Core prior to this change, the salt is still required. However, the transaction ID can always be determined automatically. In principle, it should only be necessary to provide the transaction ID to select which of several possible &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; outputs should be spent.&lt;/p&gt;

&lt;p&gt;There is therefore no longer any need to write down the salt and transaction ID going forward. With the new API, registering a name from the RPC console works like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name_new &quot;d/myname&quot;
(wait 12 blocks...)
name_firstupdate &quot;d/myname&quot; [value]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; is optional; omitting the parameter will cause Namecoin to &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2020/12/04/namecoin-core-name-firstupdate-name-update-default-values.html&quot;&gt;use the empty string&lt;/a&gt; by default.&lt;/p&gt;

&lt;p&gt;This change is being made as part of the effort to simplify the RPC API for name management. It was also one of the prerequisites for a new name registration GUI, work on which is intended to proceed shortly.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s NGI0 Discovery Fund.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/05/26/deterministic-salts-in-namecoin-core.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/05/26/deterministic-salts-in-namecoin-core.html</guid>
        <dc:creator>yanmaani</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Freenode Undergoing Hostile Takeover -- Abandon Ship</title>
        <description>&lt;p&gt;The Freenode IRC network is actively undergoing a &lt;a href=&quot;https://gist.github.com/joepie91/df80d8d36cd9d1bde46ba018af497409/&quot;&gt;hostile takeover&lt;/a&gt; by London Trust Media Holdings.  All Freenode staff have resigned in protest.  &lt;strong&gt;We strongly recommend that all Namecoin community members who are accessing our IRC channels via Freenode abandon ship immediately, and move to our channels on Hackint, OFTC, or Matrix.org.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/05/19/freenode-hostile-takeover.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/05/19/freenode-hostile-takeover.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Alerts</category>
        
        
      </item>
    
      <item>
        <title>Funding from NLnet</title>
        <description>&lt;p&gt;We are happy to announce that we have been selected by NLnet Foundation to receive funding. A total of €50’000 (roughly US$60’645) has been pledged toward our development work.&lt;/p&gt;

&lt;p&gt;NLnet is a Dutch charitable foundation. It helps fund open-source projects that aim to promote the exchange of electronic information. In the past, they, along with their partners, have helped fund projects such as &lt;a href=&quot;https://nlnet.nl/project/tor-hidden/&quot;&gt;Tor&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/qubes&quot;&gt;Qubes OS&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/wireguard&quot;&gt;WireGuard&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/Freenet-Routing&quot;&gt;Freenet&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/PeerTube&quot;&gt;PeerTube&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/YacyGrid&quot;&gt;YaCy&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/Libre-RISCV&quot;&gt;Libre-RISCV&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/Briar&quot;&gt;Briar&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/GNUMes&quot;&gt;GNU Mes&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/GUIX&quot;&gt;GNU Guix&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/ReplicantUpdate&quot;&gt;Replicant&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/Spectrum&quot;&gt;Spectrum&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/mobile-nixos&quot;&gt;NixOS&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/reproduciblebuilds&quot;&gt;Reproducible Builds&lt;/a&gt;, &lt;a href=&quot;https://nlnet.nl/project/Rico&quot;&gt;Ricochet Refresh&lt;/a&gt;, and &lt;a href=&quot;https://nlnet.nl/project/namecoin&quot;&gt;Namecoin&lt;/a&gt;. The full list of projects is available at &lt;a href=&quot;https://nlnet.nl/project/index.html&quot;&gt;https://nlnet.nl/project/index.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will receive funding from NLnet’s NGI0 Discovery Fund. This fund is managed by NLnet and funded by the European Commission, the executive branch of the European Union, through their Next Generation Internet intitiative.&lt;/p&gt;

&lt;p&gt;We are immensely grateful to NLnet for this decision, and to the European Commission for their generous financial support. A governmental institution that invests in decentralized Internet technologies has its eye toward the future.&lt;/p&gt;

&lt;p&gt;We will use this funding to work on the following:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Making name registration easier with automatic registration and deterministic salts.&lt;/li&gt;
  &lt;li&gt;Making it safer and easier to buy and sell names with atomic name trading.&lt;/li&gt;
  &lt;li&gt;Making censoring light wallets harder by lightweight SPV proofs of name nonexistence.&lt;/li&gt;
  &lt;li&gt;Various security and performance improvements to Electrum-NMC and upstream Electrum.&lt;/li&gt;
  &lt;li&gt;Improving on-chain privacy with coin control.&lt;/li&gt;
  &lt;li&gt;Better Tor integration in Electrum, Namecoin Core, and hopefully Bitcoin Core.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This work will principally be done by developers Ahmed Bodiwala and yanmaani, who is the author of this post.&lt;/p&gt;

&lt;p&gt;We will post updates on a regular basis as development proceeds.&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/04/30/funding-from-nlnet.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/04/30/funding-from-nlnet.html</guid>
        <dc:creator>yanmaani</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Released 10 Years Ago Today</title>
        <description>&lt;p&gt;Today, April 18, 2021, marks 10 years since Vincent Durham first released Namecoin.  We’d like to wish a very happy birthday to the Namecoin community, and we look forward to the next 10 years (and beyond) of hijacking-resistant, censorship-resistant naming and PKI.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/04/18/namecoin-released-10-years-ago-today.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/04/18/namecoin-released-10-years-ago-today.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncdns v0.1.2 Released</title>
        <description>&lt;p&gt;We’ve released ncdns v0.1.2 for Windows.  This release includes a fix for an upstream issue that impacted Windows service support.  Binaries for non-Windows platforms are not yet available; we expect to release those soon.&lt;/p&gt;

&lt;p&gt;Full changelog of what’s new since v0.1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DNS:
    &lt;ul&gt;
      &lt;li&gt;Fix caching bug that affected DS, SRV, MX, and non-dehydrated TLSA records.  Patch by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TLS:
    &lt;ul&gt;
      &lt;li&gt;Compressed ECDSA public keys are now supported in TLSA records, even for TLS implementations that do not support such keys.  This paves the way for decreased blockchain storage.   Namecoin patch by Jeremy Rand; thanks to Filippo Valsorda for implementing this in upstream Go.&lt;/li&gt;
      &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;aia.x--nmc.bit&lt;/code&gt; meta-domain.  This paves the way for layer-2 TLS; see my Grayhat 2020 presentation for details.  Patch by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows:
    &lt;ul&gt;
      &lt;li&gt;Support logging to Windows Event Log.  Patch by Jeremy Rand; merged by Hugo Landau.&lt;/li&gt;
      &lt;li&gt;Switch to Windows Service library from upstream Go instead of abandoned Conformal fork.  This fixes a crash bug on Windows 10 when running as a Windows Service with ASLR/PIE enabled.  Patch by Jeremy Rand; merged by Hugo Landau.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Misc:
    &lt;ul&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build system:
    &lt;ul&gt;
      &lt;li&gt;Support Go modules.  Patch by Jeremy Rand; thanks to Hugo Landau for valuable input.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/download/betas/#ncdns&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/03/11/ncdns-v0.1.2-released.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/03/11/ncdns-v0.1.2-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Core 0.21.0.1 Released</title>
        <description>&lt;p&gt;Namecoin Core 0.21.0.1 has been released on the &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/download/#namecoin-core-client-stable-release&quot;&gt;Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s what’s new since 0.19.0.1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; for expired names will error by default.  (Reported by Jeremy Rand; Patch by Yanmaani; Reviewed by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; can accept queries by SHA256d hash.  (Reported by Jeremy Rand; Patch by Daniel Kraft; Reviewed by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_update&lt;/code&gt; now consider the value to be optional.  (Reported by Jeremy Rand; Patch by Yanmaani; Reviewed by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Added &lt;code class=&quot;highlighter-rouge&quot;&gt;namepsbt&lt;/code&gt; RPC method.  (Reported by Jeremy Rand; Patch by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Added new DNS seed for testnet.  (Patch by Yanmaani; Reviewed by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Fix build for WSL.  (Patch by Chris Andrew; Reviewed by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Fix crash on macOS 10.13+.  (Reported by Jip; Analysis by Jip, Daniel Kraft, Andy Colosimo, and Cassini; Patch by DeckerSU; Reviewed by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Code quality improvements for regression tests.  (Patch by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Numerous improvements from upstream Bitcoin Core.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/03/07/namecoin-core-0.21.0.1-released.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/03/07/namecoin-core-0.21.0.1-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>Namecoin Core Releases</category>
        
        
      </item>
    
      <item>
        <title>Nightly Builds of ncdns and certinject</title>
        <description>&lt;p&gt;The &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/download/betas/&quot;&gt;Beta Downloads page&lt;/a&gt; now includes Nightly builds of ncdns (both the plain binaries and the Windows installer) and certinject.  For the #reckless among you who want to help us test new features or identify bugs before a release, the Nightly builds are a great way to do so.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/03/04/nightly-builds-ncdns-certinject.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/03/04/nightly-builds-ncdns-certinject.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Core Name Update GUI</title>
        <description>&lt;p&gt;Now that Namecoin Core’s &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2020/12/05/namecoin-core-name-renew-gui.html&quot;&gt;Name Renewal GUI&lt;/a&gt; is complete (it’s been merged and will be in Namecoin Core v22.0), it’s time to move on to the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_update&lt;/code&gt; GUI.  This forward-port was pretty uneventful, so rather than boring you with details, here’s a screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/images/screenshots/namecoin-core/name-update-2021-01-17.png&quot; alt=&quot;A screenshot of the Update Name dialog in Namecoin-Qt.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Code review will be needed before a merge can happen, but I expect the review process to be pretty uneventful as well.&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/02/16/namecoin-core-name-update-gui.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/02/16/namecoin-core-name-update-gui.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncdns v0.1 Released</title>
        <description>&lt;p&gt;We’ve released ncdns v0.1 for Windows.  The big new feature is system-wide TLS support on Windows.  Now any application that uses Windows for certificate verification (no longer just Chromium) will accept Namecoin TLS certificates, and will reject malicious certificates issued by public CA’s for Namecoin domains.  Note that some Windows software, such as Firefox, does not use the Windows certificate verifier, and is therefore not supported by this feature.&lt;/p&gt;

&lt;p&gt;Binaries for non-Windows platforms are not yet available; we expect to release those soon.&lt;/p&gt;

&lt;p&gt;Full changelog of what’s new since v0.0.10.3:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TLS:
    &lt;ul&gt;
      &lt;li&gt;Negative overrides are now supported for CryptoAPI (patches by Jeremy Rand).&lt;/li&gt;
      &lt;li&gt;Remove negative override support for Chromium (patches by Jeremy Rand).&lt;/li&gt;
      &lt;li&gt;Switch from x509-signature-splice to splicesign (patches by Jeremy Rand, thanks to Filippo Valsorda for the suggestion).&lt;/li&gt;
      &lt;li&gt;Code quality improvements (patches by Jeremy Rand).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build system:
    &lt;ul&gt;
      &lt;li&gt;Fix silent NSIS installation (patches by Jeremy Rand).&lt;/li&gt;
      &lt;li&gt;Support NSIS install.log (patches by Jeremy Rand).&lt;/li&gt;
      &lt;li&gt;Code quality improvements (patches by Jeremy Rand)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/download/betas/#ncdns&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/02/05/ncdns-v0.1-released.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/02/05/ncdns-v0.1-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>CTLPop: Populating the Windows AuthRoot Certificate Store</title>
        <description>&lt;p&gt;In my &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/01/15/external-name-constraints-in-certinject.html&quot;&gt;previous post&lt;/a&gt;, I introduced improvements to &lt;code class=&quot;highlighter-rouge&quot;&gt;certinject&lt;/code&gt;, which allow us to apply a name constraint to all certificates in a Windows certificate store, without needing Administrator privileges.  Alas, there is a major issue with using &lt;code class=&quot;highlighter-rouge&quot;&gt;certinject&lt;/code&gt; as presented in that post.  The issue is that most of the built-in root CA’s in Windows &lt;em&gt;aren’t part of any cert store!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;wait-what&quot;&gt;Wait, What?&lt;/h2&gt;

&lt;p&gt;Yep.  Allow me to explain.  The root CA list in Windows is pretty large (420 root CA’s at the moment, if my count is correct), and can also be updated on the fly via Windows Update.  However, due to what Microsoft claims are performance concerns, only 24 of those root CA’s are actually populated in the cert store on a fresh Windows installation.  The full list lives in a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot.stl&lt;/code&gt;, which ships with Windows, and can also be updated via Windows Update.  This file is a &lt;em&gt;CTL&lt;/em&gt; (certificate trust list), meaning it only stores the hashes of the certificates (and a bit of other metadata), not the certificate preimages.  (Why does a “CTL” have the file extension &lt;code class=&quot;highlighter-rouge&quot;&gt;.stl&lt;/code&gt; rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;.ctl&lt;/code&gt;?  Don’t ask.  Just accept that Microsoft hates you.  It’ll be easier that way.)  When Windows tries to verify a certificate that chains back to a certificate in &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot.stl&lt;/code&gt; but isn’t in the Windows certificate store, it automatically fetches the certificate preimage from Windows Update, and inserts it into the certificate store (typically in the &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot&lt;/code&gt; logical store) prior to proceeding with the verification.  This is all transparent to the user under typical circumstances.&lt;/p&gt;

&lt;p&gt;Personally I am highly dubious that this is a meaningful performance optimization, especially since this system was created (AFAICT) around 2 decades ago, so even if it helped performance when it was introduced, I doubt that this performance gain is applicable on modern hardware (especially since today, network latency is a much bigger contributor to perceived performance than any kind of local CPU or IO performance, and this system entails extra network latency when verifying certificates with a previously-unseen root CA).&lt;/p&gt;

&lt;h2 id=&quot;so-whats-the-problem&quot;&gt;So What’s the Problem?&lt;/h2&gt;

&lt;p&gt;Well, unfortunately, if a root CA is being downloaded on-the-fly during certificate verification, that prevents &lt;code class=&quot;highlighter-rouge&quot;&gt;certinject&lt;/code&gt; from applying a name constraint to it before it gets used.  This is unfortunate, since it means that most of the root CA’s in Windows cannot be reliably constrained via &lt;code class=&quot;highlighter-rouge&quot;&gt;certinject&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-can-we-do&quot;&gt;What Can We Do?&lt;/h2&gt;

&lt;p&gt;It’s entirely feasible to download the full list of certificate preimages that &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot.stl&lt;/code&gt; refers to.  There’s even a mostly-undocumented [1] &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn265983(v=ws.11)#new-certutil-options&quot;&gt;command&lt;/a&gt; for this.  But what do we want to do with it?  Two ideas occurred to me:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We could download the full set of certs in SST (serialized store) format (which also includes all the metadata, i.e. Properties besides the cert preimage), and ask &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; to import it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot&lt;/code&gt; logical store.  Unfortunately, this means we’d need to run as Administrator, which is not really ideal.  Also, how do we know for sure that &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot&lt;/code&gt; is the right logical store to import them?  Seems suboptimal.&lt;/li&gt;
  &lt;li&gt;We could download the full set of certs to individual files, and use &lt;code class=&quot;highlighter-rouge&quot;&gt;certinject&lt;/code&gt; to individually inject them to the &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot&lt;/code&gt; store, with Properties manually parsed from the &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot.stl&lt;/code&gt; file.  While this does avoid running with Administrator privileges by virtue of using &lt;code class=&quot;highlighter-rouge&quot;&gt;certinject&lt;/code&gt;, it means we’d have to carefully parse the Properties from &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot.stl&lt;/code&gt;, and make sure that &lt;code class=&quot;highlighter-rouge&quot;&gt;certinject&lt;/code&gt; is applying them correctly.  Seems like a lot of attack surface.  Also, we still don’t know for sure that they all belong in the &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot&lt;/code&gt; logical store, and it still requires write privileges to the &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot&lt;/code&gt; store’s registry key.  So this is still not great.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since neither of these jumped out at me as “obviously this is the right way to do it”, I came up with another idea.&lt;/p&gt;

&lt;h2 id=&quot;make-windows-do-our-job-for-us&quot;&gt;Make Windows Do Our Job For Us!&lt;/h2&gt;

&lt;p&gt;If you were reading the first section of this post carefully, you might have noted that Windows itself will happily insert the certificates from &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot.stl&lt;/code&gt; into the certificate store under certain circumstances, specifically when it’s necessary for certificate verification.  Hmm, this sounds like something we can abuse!  What happens if we download the full set of certificates to individual files from Windows Update, and then just politely ask &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; to &lt;strong&gt;verify&lt;/strong&gt; all of them?  Intuitively, this seems like the kind of thing that will cause the following Series of &lt;del&gt;un&lt;/del&gt;Fortunate Events:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CryptoAPI tries to verify the certificate by chaining it to a root CA in the certificate store.  This, naturally, fails.&lt;/li&gt;
  &lt;li&gt;CryptoAPI checks whether the certificate chains to a root CA in &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot.stl&lt;/code&gt;.  Yes, the certificate does claim to be issued by a root CA in &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot.stl&lt;/code&gt;.  (In reality, that’s because the certificate is issued by &lt;strong&gt;itself&lt;/strong&gt;, but CryptoAPI can’t know this until it sees the issuing certificate.)&lt;/li&gt;
  &lt;li&gt;CryptoAPI helpfully fetches the root CA referenced by &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot.stl&lt;/code&gt; from Windows Update, and adds it to the certificate store.  &lt;strong&gt;Yay, we’ve achieved our goal!&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;CryptoAPI discovers that the certificate we’re trying to verify is now marked as trusted, and &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; tells us that verification succeeded.  That’s cool and such, but we don’t really care about this step.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And the beauty of this trick is that we don’t need &lt;strong&gt;any&lt;/strong&gt; elevated permissions for the certificate store (all we did was ask Windows to verify some certificates, which is obviously an unprivileged operation; Windows messed with the certificate store for us), nor did we need to worry about the Property metadata (again, Windows does this for us; there’s nothing we can screw up there no matter how buggy our code is).&lt;/p&gt;

&lt;p&gt;And indeed, based on testing, the above workflow works exactly as I was hoping it would!  Running &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; to verify a certificate in &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot.stl&lt;/code&gt; downloaded from Windows Update does indeed result in the certificate being immediately imported to the certificate store.  How cool is that?&lt;/p&gt;

&lt;p&gt;(Side note: it turns out I was absolutely right to be wary of assuming that the &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot&lt;/code&gt; logical store is the right place.  In fact, the &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot.stl&lt;/code&gt; CTL also covers a small number of Microsoft-operated root CA’s, which go in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Root&lt;/code&gt; logical store – &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot&lt;/code&gt; is only for built-in root CA’s &lt;strong&gt;not&lt;/strong&gt; operated by Microsoft.)&lt;/p&gt;

&lt;h2 id=&quot;ctlpop-the-authroot-certificate-trust-list-populator&quot;&gt;CTLPop: the AuthRoot Certificate Trust List Populator&lt;/h2&gt;

&lt;p&gt;I’ve created a simple PowerShell script called CTLPop, which automates this procedure.  Just create a temporary directory (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;.\place-to-store-certs&lt;/code&gt;) to download certificates to, run &lt;code class=&quot;highlighter-rouge&quot;&gt;ctlpop.ps1 -sync_dir .\place-to-store-certs&lt;/code&gt;, wait a few minutes (Travis CI indicates that it takes 4 minutes and 26 seconds to run twice in a row on their VM), and voila: now all 420 of the built-in root CA’s are part of your certificate store, ready for you to apply name constraints via &lt;code class=&quot;highlighter-rouge&quot;&gt;certinject&lt;/code&gt;!&lt;/p&gt;

&lt;h2 id=&quot;so-whats-next&quot;&gt;So What’s Next?&lt;/h2&gt;

&lt;p&gt;The easiest way to use CTLPop and &lt;code class=&quot;highlighter-rouge&quot;&gt;certinject&lt;/code&gt; is to simply run CTLPop once as part of the ncdns NSIS installer, and then run &lt;code class=&quot;highlighter-rouge&quot;&gt;certinject&lt;/code&gt; to apply the name constraint globally (again, as part of the NSIS installer).  This is probably what we’ll ship initially, since it’s very simple and mostly works fine.  However, it’s not great in terms of sandboxing (the NSIS installer runs as Administrator), and it’s also not as robust as I’d like (because if Microsoft updates the &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot.stl&lt;/code&gt; list later, the new root CA’s won’t get the name constraint unless ncdns is reinstalled).  The “right” way to do this is to have a daemon that continuously watches for &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot.stl&lt;/code&gt; updates,  and runs CTLPop and &lt;code class=&quot;highlighter-rouge&quot;&gt;certinject&lt;/code&gt; whenever an update is observed.  We could even add a dead-man’s switch to make ncdns automatically stop resolving &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains if the &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot.stl&lt;/code&gt;-watching daemon encounters some kind of unexpected error.  We’ll probably migrate to this approach in the future, since it’s much more friendly to sandboxing (CTLPop, which involves network access and parsing untrusted data via &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt;, can run completely unprivileged, and &lt;code class=&quot;highlighter-rouge&quot;&gt;certinject&lt;/code&gt;, which does not touch the network and doesn’t parse untrusted data, only needs read+write privileges to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Root&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthRoot&lt;/code&gt; certificate stores), and also will handle new root CA’s gracefully.&lt;/p&gt;

&lt;p&gt;Expect to see name constraints via CTLPop and &lt;code class=&quot;highlighter-rouge&quot;&gt;certinject&lt;/code&gt; coming soon to an ncdns for Windows installer near you!&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;After this post was written, but before publication, I discovered that &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; actually has a built-in command that will do exactly the same thing as CTLPop: &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil -v -f -verifyCTL AuthRootWU&lt;/code&gt;.  So, we can scrap the custom PowerShell implementation I wrote.  Everything else, e.g. integration with the ncdns NSIS installer, remains the same.  Why publish this post anyway?  Because research isn’t always as clean as people sometimes imagine it to be.  Researchers often pursue suboptimal leads; I think it’s useful to document the research process authentically rather than perpetuate the myth that scientists always know what they’re going to find in advance.&lt;/p&gt;

&lt;p&gt;[1] It’s not documented at &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil&quot;&gt;the certutil manual&lt;/a&gt;, but is mentioned elsewhere on Microsoft’s website.&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/02/02/ctlpop-populating-windows-authroot-certificate-store.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/02/02/ctlpop-populating-windows-authroot-certificate-store.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
  </channel>
</rss>
