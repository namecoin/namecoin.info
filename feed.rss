<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/</link>
    <atom:link href="http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/feed.rss" rel="self" type="application/rss+xml" />
    <language>en</language>
    <pubDate>Thu, 27 Jan 2022 23:59:45 +0000</pubDate>
    <lastBuildDate>Thu, 27 Jan 2022 23:59:45 +0000</lastBuildDate>
    <generator>Jekyll</generator>
    <image>
      <url>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/images/logo.png</url>
      <title>Namecoin</title>
      <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/</link>
      <width>134</width>
      <height>25</height>
    </image>
    
      <item>
        <title>p11mod Now Supports Signatures</title>
        <description>&lt;p&gt;In a &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/07/10/lab-leak-p11mod.html&quot;&gt;previous post&lt;/a&gt;, I covered p11mod and how it improves the auditability of Namecoin’s TLS interoperability with NSS and GnuTLS.  Recently, I’ve expanded the subset of the PKCS#11 implementation that p11mod covers; p11mod can now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Import certificates, public keys, and private keys.&lt;/li&gt;
  &lt;li&gt;Delete certificates, public keys, and private keys.&lt;/li&gt;
  &lt;li&gt;Sign messages with private keys.&lt;/li&gt;
  &lt;li&gt;Verify signatures with public keys.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;None of these operations are required by Namecoin, but they do make p11mod useful for a wider variety of use cases, which helps attract more users and developers.  This new functionality was made possible by integration tests from OpenDNSSEC.  Thanks to the OpenDNSSEC developers for that!&lt;/p&gt;

&lt;p&gt;I also fixed a PKCS#11 specification compliance bug in p11mod (stupid off-by-one error in object handle validation), which was surfaced by a GnuTLS upgrade that enforces greater strictness.  Kudos to the GnuTLS developers for being strict and helping me fix a bug!&lt;/p&gt;

&lt;p&gt;All of these improvements are now tested daily on Cirrus via p11proxy.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2022/01/27/p11mod-signatures.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2022/01/27/p11mod-signatures.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Unix domain sockets in Electrum</title>
        <description>&lt;p&gt;I recently sent in a patch to Electrum which adds support for Unix domain sockets to the RPC interface. After review by ghost43 and Jeremy Rand, who is also a Namecoin developer, this patch has been merged. As a result, Electrum now has support for Unix domain sockets in the RPC daemon. (Unix domain sockets are not yet supported for other occasionally local network operations, such as for connecting to a SOCKS proxy.)&lt;/p&gt;

&lt;p&gt;Unix domain sockets are a type of sockets that run entirely inside of the system (the “Unix domain”). Instead of binding to a network port, they bind to a file. The access to this file can then be controlled by the ordinary mechanisms, like file system permissions or ACLs. This makes them very well-suited to replace connections to the loopback interface, because unlike such connections, they are not visible to the entire system. Moreover, by completely disabling the ability of an application to make network requests and limiting its connections to a few select Unix domain sockets, a very high degree of control can be maintained.&lt;/p&gt;

&lt;p&gt;It is envisioned that this will be useful for &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdns&lt;/code&gt;, our DNS resolver, because it will allow Electrum-NMC to provide an RPC interface to &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdns&lt;/code&gt; without having to bind to a network port. This reduces attack surface, making the application more secure. The functionality can also be used by other Electrum users for other use-cases, and some are even suggesting to make it the default on Unix platforms.&lt;/p&gt;

&lt;p&gt;I would like to thank Jeremy Rand and ghost43 for reviewing this pull request, pointing out several important details I missed and giving me helpful feedback on future-proofing and codebase standards.&lt;/p&gt;

&lt;p&gt;This change does not in any way impact how Electrum makes connections to other hosts over the network. This change is not expected to break any existing behaviors.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s NGI0 Discovery Fund.&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2022/01/07/unix-domain-sockets-in-electrum.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2022/01/07/unix-domain-sockets-in-electrum.html</guid>
        <dc:creator>yanmaani</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC v4.0.0b0 Released</title>
        <description>&lt;p&gt;We’ve released Electrum-NMC v4.0.0b0.  This release includes numerous bugfixes and improvements, both Namecoin-related and from upstream Electrum.&lt;/p&gt;

&lt;p&gt;The following Namecoin developers contributed to this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jeremy Rand&lt;/li&gt;
  &lt;li&gt;Daniel Kraft&lt;/li&gt;
  &lt;li&gt;Yanmaani&lt;/li&gt;
  &lt;li&gt;Somewhat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/download/betas/#electrum-nmc&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/12/17/electrum-nmc-v4.0.0b0-released.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/12/17/electrum-nmc-v4.0.0b0-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>Electrum Releases</category>
        
        
      </item>
    
      <item>
        <title>Namecoin-Qt: Export, Name Count, and Buy Names Feedback</title>
        <description>&lt;p&gt;I implemented a few more Namecoin-Qt features.  The Manage Names tab now includes both an Export button and a name counter:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/images/screenshots/namecoin-core/manage-names-2021-09-14.png&quot; alt=&quot;A screenshot of the Manage Names tab in Namecoin-Qt.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Buy Names tab also now gives real-time feedback on which names are available:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/images/screenshots/namecoin-core/buy-names-available-2021-09-14.png&quot; alt=&quot;A screenshot of the Buy Names tab in Namecoin-Qt, when the name is available.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/images/screenshots/namecoin-core/buy-names-taken-2021-09-14.png&quot; alt=&quot;A screenshot of the Buy Names tab in Namecoin-Qt, when the name is taken.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a good example of a UX benefit that only full-node users get: because name lookups in Namecoin Core don’t generate network traffic, they are fast enough that they can be performed every time a character is typed in the name field, without making the user click anything.&lt;/p&gt;

&lt;p&gt;I’m not leaving RPC users behind either: the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; RPC method now yields more specific error messages when a name doesn’t exist, depending on whether it is expired or never existed.  This should make things more convenient for human RPC users.  The error codes haven’t changed, so this shouldn’t break any software.&lt;/p&gt;

&lt;p&gt;These improvements are expected to be included in Namecoin Core 23.0.&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/12/06/namecoin-qt-export-count-feedback.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/12/06/namecoin-qt-export-count-feedback.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Upstream btcd Has Merged Last Outstanding Namecoin Patch</title>
        <description>&lt;p&gt;Good news: upstream btcd has merged the last outstanding patch that Namecoin was applying for our usage of btcd’s JSON-RPC client in ncdns.  This means that Namecoin’s fork of btcd will be discontinued, and as of the next btcd release (v0.22.1), ncdns will switch to using an unpatched upstream btcd.  Using unpatched upstream btcd will decrease our maintenance effort and improve code quality.&lt;/p&gt;

&lt;p&gt;Huge thanks to Torkel Rogstad, Anirudha Bose, and John Vernaleo from upstream btcd for code review.&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/11/14/upstream-btcd-merges-last-namecoin-patch.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/11/14/upstream-btcd-merges-last-namecoin-patch.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncdns v0.2.2 Released</title>
        <description>&lt;p&gt;We’ve released ncdns v0.2.2.  This release contains multiple bugfixes, in particular a patch to &lt;code class=&quot;highlighter-rouge&quot;&gt;generate_nmc_cert&lt;/code&gt; that works around a CryptoAPI connectivity bug.  We strongly recommend that all users upgrade.  &lt;strong&gt;All domain owners who have TLS enabled will need to re-generate their TLS certificates and TLS records after upgrading.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Full changelog of what’s new since v0.2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ncdns
    &lt;ul&gt;
      &lt;li&gt;Remove tlsrestrict_chromium_tool binary.  (certinject should be used instead now.)&lt;/li&gt;
      &lt;li&gt;Code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;generate_nmc_cert
    &lt;ul&gt;
      &lt;li&gt;Disable AIA over HTTPS.  (No major TLS clients support it, and it was tickling a CryptoAPI connectivity bug.  Thanks to mjgill89.)&lt;/li&gt;
      &lt;li&gt;Rebase against Go 1.17.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ncp11
    &lt;ul&gt;
      &lt;li&gt;Temporarily suspend providing macOS binaries of ncp11.  (macOS support for ncp11 will return after the ongoing p11mod refactor has completed.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows installer
    &lt;ul&gt;
      &lt;li&gt;Support chain-installing and configuring Electrum-NMC.&lt;/li&gt;
      &lt;li&gt;Redesign Components dialogs.&lt;/li&gt;
      &lt;li&gt;Fix installation error on certain non-English locales, e.g. Swedish.  (Thanks to Jonas Ostman.)&lt;/li&gt;
      &lt;li&gt;Warn users of Windows 7 and earlier.  (ncdns hasn’t supported these EOL Windows versions for a while; users who are okay with security degradation will be able to bypass the warning and install anyway.)&lt;/li&gt;
      &lt;li&gt;Relicense under GPLv3+.&lt;/li&gt;
      &lt;li&gt;Remove non-freedom build dependency.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build system:
    &lt;ul&gt;
      &lt;li&gt;Downgrade to BIND 9.16 branch for Windows.  (Upstream BIND has dropped Windows support in 9.17 branch.)&lt;/li&gt;
      &lt;li&gt;Relicense ncdns-repro under tor-browser-build license.  (Thanks to Nicolas Vigier and Georg Koppen.)&lt;/li&gt;
      &lt;li&gt;Code quality improvements.&lt;/li&gt;
      &lt;li&gt;Bump dependencies:
        &lt;ul&gt;
          &lt;li&gt;tor-browser-build&lt;/li&gt;
          &lt;li&gt;gobtcd&lt;/li&gt;
          &lt;li&gt;godns&lt;/li&gt;
          &lt;li&gt;goisatty&lt;/li&gt;
          &lt;li&gt;gopretty&lt;/li&gt;
          &lt;li&gt;gotoml&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/download/betas/#ncdns&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/09/25/ncdns-v0.2.2-released.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/09/25/ncdns-v0.2.2-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>Namecoin-Qt Buy Names Tab</title>
        <description>&lt;p&gt;Now that the Manage Names tab in Namecoin-Qt (which lets you update existing names in your wallet) is &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/02/16/namecoin-core-name-update-gui.html&quot;&gt;implemented&lt;/a&gt;, it’s time to move onto the Buy Names tab.  Like the Name Update GUI, this forward-port was pretty uneventful, so rather than boring you with details, here’s a screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/images/screenshots/namecoin-core/buy-names-2021-08-22.png&quot; alt=&quot;A screenshot of the Buy Names tab in Namecoin-Qt.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I kept things minimalist to enable faster review.  For example, there is not yet any UI element to tell you if a name already is registered (you’ll find out in such cases after clicking the button).  In addition, this UI only triggers the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; RPC method, not &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; (which you’ll need to do yourself via the console prior to using the Buy Names tab).  This is because Yanmaani is already working on RPC support for combining &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt;; once his work on that is merged, this GUI should be convertible to use his work with a one-liner patch.&lt;/p&gt;

&lt;p&gt;The Buy Names tab is expected to be included in Namecoin Core 23.0.&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/09/14/namecoin-qt-buy-names-tab.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/09/14/namecoin-qt-buy-names-tab.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin-Qt Decoration Improvements</title>
        <description>&lt;p&gt;I’ve been improving the UX of decorations applied to transactions in Namecoin-Qt.  For comparison, here’s what it looked like before the improvements:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/images/screenshots/namecoin-core/transactions-2021-08-02.png&quot; alt=&quot;A screenshot of the Transactions tab in Namecoin-Qt.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And after:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/images/screenshots/namecoin-core/transactions-2021-08-09.png&quot; alt=&quot;Another screenshot of the Transactions tab in Namecoin-Qt.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, jargon such as &lt;code class=&quot;highlighter-rouge&quot;&gt;NAME_FIRSTUPDATE&lt;/code&gt; has been replaced with more user-friendly terminology such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Name registration&lt;/code&gt; and has been moved to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt; column (replacing the redundant &lt;code class=&quot;highlighter-rouge&quot;&gt;Name operation&lt;/code&gt; text).  Name updates that do not change the value are now marked as &lt;code class=&quot;highlighter-rouge&quot;&gt;Name renewal&lt;/code&gt;, which more precisely conveys the nature of such transactions (this required some plumbing, as previously the transaction decoration code did not have access to the previous value of a name transaction).  Additionally (not pictured above), name transfers are now decorated appropriately.&lt;/p&gt;

&lt;p&gt;These improvements are expected to be included in Namecoin Core 23.0 (22.0 has already branched from master and should be released soon).&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/08/23/namecoin-qt-decoration-improvements.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/08/23/namecoin-qt-decoration-improvements.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>The Namecoin Lab Leak: How p11mod Vaccinates Against the Unmaintainable Code Pandemic</title>
        <description>&lt;p&gt;Every now and then, some mad scientists will get foreign government funding, routed through an intermediary NGO, to create something in their lab, with the expectation that their creation will stay in the lab – and then it escapes, potentially wreaking havoc.  Oops.  This is what happened to Namecoin in the months surrounding 35C3.&lt;/p&gt;

&lt;p&gt;As those of you who watch our C3 talks will be aware, Aerth and I did some mad science in the leadup to &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2019/05/08/35c3-summary.html&quot;&gt;35C3&lt;/a&gt;, in the form of ncp11.  ncp11 is a PKCS#11 module that enables Namecoin TLS certificate verification in software that uses NSS or GnuTLS (which means Firefox, the GNU/Linux release of Chromium, GNOME Web, GNU Wget, and various other software).  The ncp11 codebase that we released at our &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/resources/presentations/35C3/tls-workshop/&quot;&gt;35C3 workshop&lt;/a&gt; was very much a proof of concept, as the workshop notes make clear:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Welcome to the 35C3 Namecoin TLS Workshop, home of the code that first worked a few days ago.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We figured at the time that this was not really a big deal, since the code did work just fine, and we could always refactor and clean it up later.  And it’s not like the hackers attending 35C3 have a problem with experimental code.  Alas, you already know what happened: after 35C3, we entered &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2020/01/11/36c3-summary.html#lecture-adventures-and-experiments-adding-namecoin-to-tor-browser&quot;&gt;major discussions with the Tor Browser developers&lt;/a&gt;, and all of our capacity for cleaning up the ncp11 code got gobbled up.  Thus, the ncp11 codebase ended up in production use (though hopefully not in large numbers, since it was never added to the ncdns Windows installer), escaping the lab.&lt;/p&gt;

&lt;p&gt;So, what was wrong with the ncp11 codebase that made it so in need of a refactor?  I think the best way to explain it is to examine the API it’s forced to provide.  ncp11 provides an API that is equivalent to the API that &lt;a href=&quot;https://godocs.io/github.com/miekg/pkcs11&quot;&gt;Miek Gieben’s pkcs11 package&lt;/a&gt; provides.  Here’s an example consumer of this API, courtesy of Miek’s documentation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p := pkcs11.New(&quot;/usr/lib/softhsm/libsofthsm.so&quot;)
err := p.Initialize()
if err != nil {
    panic(err)
}

defer p.Destroy()
defer p.Finalize()

slots, err := p.GetSlotList(true)
if err != nil {
    panic(err)
}

session, err := p.OpenSession(slots[0], pkcs11.CKF_SERIAL_SESSION|pkcs11.CKF_RW_SESSION)
if err != nil {
    panic(err)
}
defer p.CloseSession(session)

err = p.Login(session, pkcs11.CKU_USER, &quot;1234&quot;)
if err != nil {
    panic(err)
}
defer p.Logout(session)

p.DigestInit(session, []*pkcs11.Mechanism{pkcs11.NewMechanism(pkcs11.CKM_SHA_1, nil)})
hash, err := p.Digest(session, []byte(&quot;this is a string&quot;))
if err != nil {
    panic(err)
}

for _, d := range hash {
        fmt.Printf(&quot;%x&quot;, d)
}
fmt.Println()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As Miek’s doc prefaces this example:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;yes, pkcs#11 is verbose&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This example doesn’t really do us justice though, since Namecoin uses the FindObjects API, which the above example doesn’t include.  Here are the function prototypes of that API:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FindObjectsInit initializes a search for token and session objects that match a template.
func (c *Ctx) FindObjectsInit(sh SessionHandle, temp []*Attribute) error

FindObjects continues a search for token and session objects that match a template, obtaining additional object handles. Calling the function repeatedly may yield additional results until an empty slice is returned. The returned boolean value is deprecated and should be ignored.
func (c *Ctx) FindObjects(sh SessionHandle, max int) ([]ObjectHandle, bool, error)

FindObjectsFinal finishes a search for token and session objects.
func (c *Ctx) FindObjectsFinal(sh SessionHandle) error

GetAttributeValue obtains the value of one or more object attributes.
func (c *Ctx) GetAttributeValue(sh SessionHandle, o ObjectHandle, a []*Attribute) ([]*Attribute, error)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Anytime you have to provide an API this low-level, the code is going to be hard to follow.  So, how to fix it?  In fact, there is actually a higher-level API available: &lt;a href=&quot;https://godocs.io/github.com/miekg/pkcs11/p11&quot;&gt;the p11 API by Jacob Hoffman-Andrews&lt;/a&gt;, which also lives in Miek’s repo (and acts as a high-level wrapper for Miek’s pkcs11 API).  Here’s an example consumer of Jacob’s API:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module, err := p11.OpenModule(&quot;/path/to/module.so&quot;)
if err != nil {
  return err
}
slots, err := module.Slots()
if err != nil {
  return err
}
// ... find the appropriate slot, then ...
session, err := slots[0].OpenSession()
if err != nil {
  return err
}
privateKeyObject, err := session.FindObject(...)
if err != nil {
  return err
}
privateKey := p11.PrivateKey(privateKeyObject)
signature, err := privateKey.Sign(..., []byte{&quot;hello&quot;})
if err != nil {
  return err
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Doesn’t look as bad.  And here are the function prototypes that correspond to the above ones:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FindObjects finds any objects in the token matching the template.
func (s Session) FindObjects(template []*pkcs11.Attribute) ([]Object, error)

Attribute gets exactly one attribute from a PKCS#11 object, returning an error if the attribute is not found, or if multiple attributes are returned. On success, it will return the value of that attribute as a slice of bytes. For attributes not present (i.e. CKR_ATTRIBUTE_TYPE_INVALID), Attribute returns a nil slice and nil error.
func (o Object) Attribute(attributeType uint) ([]byte, error)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That certainly looks simpler.&lt;/p&gt;

&lt;p&gt;So, in the same way that we created a helper library for ncp11 to use, pkcs11mod, to interface between the C ABI for PKCS#11 and the Go API for Miek’s pkcs11 package, we can create a helper library (which we call p11mod) to interface between the Go API for Miek’s pkcs11 package and the Go API for Jacob’s p11 package.  We can then make ncp11 implement Jacob’s p11 API, which allows us to make the ncp11 code substantially more readable, maintainable, and auditable.&lt;/p&gt;

&lt;p&gt;I’ve now done exactly that.  p11mod has been merged as a subpackage of the pkcs11mod repository, which enables us to move forward with refactoring the Namecoin-specific parts of ncp11 (more on that in a future post).&lt;/p&gt;

&lt;p&gt;In addition, I’ve improved testability of pkcs11mod/p11mod.  The repo now includes two example modules, pkcs11proxy and p11proxy.  These simply act as a passthrough shim between pkcs11mod and Miek’s pkcs11 package, and p11mod and Jacob’s p11 package, respectively.  Thus, you can load Mozilla’s CKBI (built-in certificates) module into NSS via the pkcs11proxy and p11proxy shims, and confirm that the resulting behavior matches loading CKBI into NSS without the shims (e.g. you can do a TLS handshake and make sure that certificate acceptance behavior matches).  So, there are now nightly builds of both pkcs11proxy and p11proxy courtesy of Cirrus, as well as nightly integration tests that make sure both pkcs11proxy and p11proxy work as expected in Firefox, Chromium, GNU Wget, tstclnt, and gnutls-client, among other applications.  This is a major improvement over the previous situation, where testing pkcs11mod required Namecoin-specific tests with ncp11.&lt;/p&gt;

&lt;p&gt;Coming soon: refactoring the Namecoin-specific parts of ncp11.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/07/10/lab-leak-p11mod.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/07/10/lab-leak-p11mod.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>tstclnt: openssl s_client / gnutls-cli equivalent for NSS</title>
        <description>&lt;p&gt;When debugging TLS handshakes, it’s incredibly helpful to have a CLI tool that acts as a simple TLS client.  For OpenSSL (the TLS library used by Python, &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;, and various other GNU/Linux things), the relevant tool is &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl s_client&lt;/code&gt;.  For GnuTLS (the TLS library used by GNOME Web, &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;, and various other GNU/Linux things), it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;gnutls-cli&lt;/code&gt;.  But did you know that there’s an analogous tool for NSS (the TLS library used by Firefox and the GNU/Linux version of Chromium)?  If you didn’t know this, you can be easily forgiven – the Mozilla NSS documentation doesn’t mention that it exists, and there are almost no web search results for it!  Yet it’s there.&lt;/p&gt;

&lt;p&gt;The tool is called &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; (“testclient” with the vowels removed).  On Debian Buster, you can find it in the &lt;code class=&quot;highlighter-rouge&quot;&gt;libnss3-tools&lt;/code&gt; package.  On Fedora 34, it’s a tad more complicated: &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;nss-tools&lt;/code&gt; package, but it doesn’t install to a directory that’s on the default &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;.  Fedora instead installs &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib64/nss/unsupported-tools/&lt;/code&gt;   directory (path is accurate for &lt;code class=&quot;highlighter-rouge&quot;&gt;ppc64le&lt;/code&gt;; other architectures may have slightly different paths).&lt;/p&gt;

&lt;p&gt;Once you’ve installed &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt;, you can run it like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tstclnt -b -D -h www.namecoin.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-h&lt;/code&gt; argument indicates which TLS server to connect to.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;-b&lt;/code&gt; flag instructs &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; to use the default CKBI (built-in certificate database) PKCS#11 module.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt; flag disables the Softoken (SQLite-based certificate database) PKCS#11 module.&lt;/p&gt;

&lt;p&gt;If all goes well, &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; will do a successful TLS handshake with &lt;code class=&quot;highlighter-rouge&quot;&gt;www.namecoin.org&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more fun, you may also wish to try the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;-b&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;-R /usr/lib64/pkcs11/p11-kit-trust.so&lt;/code&gt; to use a non-default PKCS#11 module instead of CKBI.&lt;/li&gt;
  &lt;li&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;-d sql:/etc/pki/nssdb&lt;/code&gt; to use a SQLite certificate database with Softoken.  (You can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;dbm:&lt;/code&gt; prefix instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;sql:&lt;/code&gt; if you want to use Softoken’s legacy BerkeleyDB database format instead of the modern SQLite.)&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;-C&lt;/code&gt; to dump the certificate chain.  (You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;-C -C&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-C -C -C&lt;/code&gt; for more verbosity.)&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt; to override certificate validation errors.&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;-p 443&lt;/code&gt; to connect to a non-default TLS port.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course you can access a full list of options via &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt --help&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; is an excellent tool for TLS hackers; it’s too bad Mozilla doesn’t document its existence.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/07/05/tstclnt-openssl-s_client-gnutls-cli-equivalent-for-nss.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2021/07/05/tstclnt-openssl-s_client-gnutls-cli-equivalent-for-nss.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
  </channel>
</rss>
