<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/</link>
    <atom:link href="https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/feed.rss" rel="self" type="application/rss+xml" />
    <language>en</language>
    <pubDate>Tue, 23 Sep 2025 03:16:17 +0000</pubDate>
    <lastBuildDate>Tue, 23 Sep 2025 03:16:17 +0000</lastBuildDate>
    <generator>Jekyll</generator>
    <image>
      <url>https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/images/logo.png</url>
      <title>Namecoin</title>
      <link>https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/</link>
      <width>134</width>
      <height>25</height>
    </image>
    
      <item>
        <title>Is Post-Quantum Namecoin TLS Feasible?</title>
        <description>&lt;p&gt;As the shelf life of most public-key cryptography nears its quantum-induced termination, many protocols are moving toward post-quantum (PQ) cryptography. PQ crypto, defined as cryptosystems that are believed to be secure against both classical and quantum cryptanalysis, is an active research area, with rapid advances happening in both the cryptosystems and the attacks. It would be nice if we had more time to research secure PQ cryptosystems, but alas we do not have that luxury. TLS is thus beginning to deploy PQ crypto. Which begs the question: how is Namecoin affected by PQ crypto adoption in TLS?&lt;/p&gt;

&lt;p&gt;There are actually three different cryptosystems in Namecoin TLS that need a PQ replacement:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Replacing ECDHE for the TLS handshake.&lt;/li&gt;
  &lt;li&gt;Replacing ECDSA for the X.509 certificates.&lt;/li&gt;
  &lt;li&gt;Replacing Schnorr for the on-chain transactions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What would they be replaced with?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ECDHE would be replaced with something like CRYSTALS-Kyber (standardized by NIST as ML-KEM).&lt;/li&gt;
  &lt;li&gt;ECDSA would be replaced with something like CRYSTALS-Dilithium (standardized by NIST as ML-DSA).&lt;/li&gt;
  &lt;li&gt;Schnorr would be replaced with CRYSTALS-Dilithium, or perhaps something like Falcon or Lamport signatures.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(Yes, cryptographers like sci-fi jokes when naming things.)&lt;/p&gt;

&lt;p&gt;And who has to do the work to replace them?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ECDHE is handled by web browsers. Encaya doesn’t touch this. Web browsers are already starting to deploy CRYSTALS-Kyber; no action is needed on Namecoin’s end.&lt;/li&gt;
  &lt;li&gt;ECDSA in X.509 is handled specially by Encaya. It’s our job to make sure this doesn’t break when users try to use CRYSTALS-Dilithium!&lt;/li&gt;
  &lt;li&gt;Schnorr on-chain is handled by Bitcoin. As the Bitcoin community moves toward PQ crypto adoption, Namecoin will have to follow Bitcoin on a softfork, but no additional action is needed on Namecoin’s end.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yeah, uh, about number 2. What’s the challenge with CRYSTALS-Dilithium? The big problem is that Dilithium involves really really big public keys and really really big signatures (at least compared to ECDSA). Specifically, Dilithium5 public keys are 2592 bytes, with signatures of 4595 bytes. Dilithium is probably not catastrophic for TLS in general, but recall that Encaya needs to staple a public key (and maybe a signature too) into the AIA Issuer URL as well as the Issuer/Subject Serial Number. Mainstream TLS clients generally have no reason to expect massive amounts of data in these fields.&lt;/p&gt;

&lt;p&gt;I already looked into the &lt;a href=&quot;/2025/09/07/whats-maximum-length-aia-issuer-url-windows-11-cryptoapi.html&quot;&gt;length limit of the AIA Issuer URL&lt;/a&gt;. The gist is that it’ll give a bit over 65 kB of data. That’s totally fine for Dilithium. However, other limits come into play. &lt;a href=&quot;https://docs.openssl.org/3.2/man3/SSL_CTX_set_max_cert_list/&quot;&gt;OpenSSL imposes a length limit&lt;/a&gt; of 100 KiB on the entire cert chain (the manual says 100 kB, but it’s wrong; the OpenSSL devs apparently are illiterate about the metric system). Given that the stapled data shows up 3 times in the TLS cert chain (AIA Issuer URL, Issuer Serial Number, and Subject Serial Number), that means we have a maximum of ~33.3 KiB to work with. (We have to fit the rest of the cert chain in too!) I couldn’t find any official documentation on the limits in Firefox (&lt;a href=&quot;https://0x00.cl/blog/2024/exploring-tls-certs/&quot;&gt;this article by Tomás Gutiérrez&lt;/a&gt; suggests Firefox is less tolerant than OpenSSL), but by manual testing, I found that stapled data of 32 kB worked OK, while 34 kB made Firefox so unhappy that it managed to show a TLS error with an &lt;em&gt;empty&lt;/em&gt; error code (wat). So for practical purposes, our limits for Firefox look very close to those of OpenSSL. Microsoft Edge seems mildly more tolerant than Firefox, but I didn’t try to nail down how much more tolerant.&lt;/p&gt;

&lt;p&gt;As far as I can tell, 32 kB of stapled data will easily meet our needs. It’s considerably larger than what we’d need for a Dilithium5 public key and a Dilithium5 signature, even if they were hex-encoded. In practice, we would probably use base64 encoding (more compact). TLS would probably use Dilithium2 or Dilithium3 (which yields smaller public keys), and Bitcoin might wind up using Falcon, which has even smaller signatures than Dilithium2.&lt;/p&gt;

&lt;p&gt;It’s not clear to me whether 32 kB of stapled data would be able to handle SPV proofs (&lt;a href=&quot;https://github.com/handshake-org/HIPs/blob/master/HIP-0017.md&quot;&gt;as Handshake is doing&lt;/a&gt;), but on the other hand I am not convinced that stapling SPV proofs into a TLS handshake is something that Namecoin needs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/memes/ought-to-be-enough.jpg&quot; alt=&quot;~32 kB of stapled data in the Subject Serial Number ought to be enough for anyone?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, Namecoin’s Encaya certificate format is reasonably well prepared for a PQ transition. There will probably be plentiful drama elsewhere though. No ETA, as far as I’m aware, of when mainstream browsers will support Dilithium certificates.&lt;/p&gt;

&lt;p&gt;This work was funded by Power Up Privacy.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Sep 2025 00:00:00 +0000</pubDate>
        <link>https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/09/23/is-post-quantum-namecoin-tls-feasible.html</link>
        <guid isPermaLink="true">https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/09/23/is-post-quantum-namecoin-tls-feasible.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Off-Chain TLSA Records in Encaya</title>
        <description>&lt;p&gt;Now that &lt;a href=&quot;/2025/09/11/hashed-tlsa-records-in-encaya.html&quot;&gt;hashed TLSA records&lt;/a&gt; are a thing, it’s time to ask our inner mad scientist: can we do any better than that?&lt;/p&gt;

&lt;p&gt;What would be better for scalability than only putting a hash on the blockchain? What about… not putting &lt;em&gt;any&lt;/em&gt; TLS things on the blockchain? Sounds impossible, right?&lt;/p&gt;

&lt;p&gt;Let’s frame this question a different way: why are we putting a TLSA record on the blockchain? Or perhaps we can ask an even more radical question: why do we put &lt;em&gt;anything&lt;/em&gt; on the blockchain?&lt;/p&gt;

&lt;p&gt;There are three main reasons we might put something on the blockchain:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Authenticity&lt;/em&gt;: the data is signed by the rightful owner.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Exclusivity&lt;/em&gt;: the data hasn’t been double-spent.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Freshness&lt;/em&gt;: the data isn’t outdated.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Exclusivity isn’t really relevant for TLSA records; there’s not really any incentive for a domain owner to double-spend their own TLSA record.&lt;/p&gt;

&lt;p&gt;What about authenticity? The signature is what’s important, but the signature doesn’t &lt;em&gt;have&lt;/em&gt; to be the transaction signature. It’s straightforward to sign a message with a Bitcoin private key, and verify it against the corresponding Bitcoin address. This concept is frequently used in Bitcoinland for proof of reserves. And conveniently, in Namecoin, it’s very easy to check which Namecoin address owns a name.&lt;/p&gt;

&lt;p&gt;So how would this look? We’re already stapling a public key into the Subject Serial Number, Issuer Serial Number, and AIA Issuer URL. We could also staple a signature, signed by the Namecoin address that owns the name. Encaya can then call out to Namecoin Core or Electrum-NMC to verify the signature.&lt;/p&gt;

&lt;p&gt;Does this break freshness? Not really: the signature becomes stale whenever the name is transferred to a new Namecoin address. This means that if you &lt;em&gt;don’t&lt;/em&gt; want to revoke your TLSA records that are stapled in this way, you must keep your name at the same address.&lt;/p&gt;

&lt;p&gt;Address reuse is often frowned upon in Bitcoinland due to privacy concerns, but the privacy leakage that results from address reuse is &lt;em&gt;already&lt;/em&gt; public knowledge in Namecoin: of course those two transactions were made by the same person, they’re for the same domain name and they point to the same IP address. Address reuse is also sometimes cited as an issue for quantum safety. That is technically true, but if a quantum computer starts attacking Bitcoin, you probably want better security than unique addresses will give you. Transitioning Bitcoin and Namecoin to post-quantum signatures is likely to be a better approach.&lt;/p&gt;

&lt;p&gt;There is, of course, a practical issue with this scheme. Bitcoin Core doesn’t yet support message signatures with non-P2PKH addresses. Electrum does support P2WPKH addresses. Neither supports multisig addresses (or any other kind of smart contracts). So for now, this approach will only work if you’re using legacy (non-SegWit) single-key addresses; in terms of transaction weight, the witness discount will typically outweigh the benefit from moving TLSA records off-chain. Hopefully Bitcoin Core will fix this soon upstream.&lt;/p&gt;

&lt;p&gt;The above has now been implemented into Encaya and ncgencert, and works fine with both AIA and PKCS#11. No changes were needed to ncp11. The ncdns Windows installer will need some small tweaks to relax Encaya’s sandbox so that it can talk to Namecoin Core.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s NGI0 Core Fund.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Sep 2025 00:00:00 +0000</pubDate>
        <link>https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/09/22/off-chain-tlsa-records-in-encaya.html</link>
        <guid isPermaLink="true">https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/09/22/off-chain-tlsa-records-in-encaya.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>generate_nmc_cert is now ncgencert</title>
        <description>&lt;p&gt;If you’ve used &lt;code class=&quot;highlighter-rouge&quot;&gt;generate_nmc_cert&lt;/code&gt; to set up a Namecoin TLS server, you’ve probably found the interface a tad vexing. Examples of such weirdness:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why is the &lt;code class=&quot;highlighter-rouge&quot;&gt;-use-ca&lt;/code&gt; argument always required? What happens if you forget it?&lt;/li&gt;
  &lt;li&gt;Why is the &lt;code class=&quot;highlighter-rouge&quot;&gt;-use-aia&lt;/code&gt; argument sometimes required?&lt;/li&gt;
  &lt;li&gt;What the heck is the &lt;code class=&quot;highlighter-rouge&quot;&gt;-falsehost&lt;/code&gt; argument?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The answer is: prioritization of interface stability over UX. This may have made sense many years ago when the Encaya certificate format was still experimental, but by now everyone knows that we’re not going back to the pre-Encaya certificate formats (which is what you’d get if you forgot &lt;code class=&quot;highlighter-rouge&quot;&gt;-use-ca&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-use-aia&lt;/code&gt;, or if you used &lt;code class=&quot;highlighter-rouge&quot;&gt;-falsehost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I’ve now refactored the interface, as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-use-ca&lt;/code&gt; is always true. The code paths for when it was false have been sent to a luxurious permanent retirement; we thank them for their past service.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-use-aia&lt;/code&gt; is now inferred based on whether parent or grandparent chains are specified. The code paths for when the aforementioned inference was wrong have also been sent to luxurious permanent retirement; we thank them for their past service as well.&lt;/li&gt;
  &lt;li&gt;All code associated with &lt;code class=&quot;highlighter-rouge&quot;&gt;-falsehost&lt;/code&gt; has met the same fate, and received the same thank-you, as above.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To celebrate the new, more user-friendly interface, the tool has also been renamed to &lt;code class=&quot;highlighter-rouge&quot;&gt;ncgencert&lt;/code&gt;. The old name &lt;code class=&quot;highlighter-rouge&quot;&gt;generate_nmc_cert&lt;/code&gt; was a result of the tool’s code being a copy of a Golang standard library example called &lt;code class=&quot;highlighter-rouge&quot;&gt;generate_cert&lt;/code&gt;; it was chosen with essentially no thought. In particular, it was inconsistent with existing convention for how Namecoin tools are named: application-layer tools generally are supposed to have &lt;code class=&quot;highlighter-rouge&quot;&gt;nc&lt;/code&gt; as a prefix (e.g. ncdns, ncp11, ncprop279, and Encaya’s original spelling ncaia). The &lt;code class=&quot;highlighter-rouge&quot;&gt;NMC&lt;/code&gt; abbreviation is supposed to be reserved for wallets and similar tools.&lt;/p&gt;

&lt;p&gt;This work was funded by Power Up Privacy.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Sep 2025 00:00:00 +0000</pubDate>
        <link>https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/09/20/generate-nmc-cert-is-now-ncgencert.html</link>
        <guid isPermaLink="true">https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/09/20/generate-nmc-cert-is-now-ncgencert.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Hashed TLSA Records in Encaya</title>
        <description>&lt;p&gt;As long-time readers will be aware, probably the biggest innovation of Namecoin’s TLS functionality is that it uses a special form of TLS certificates that happens to work well in mainstream web browsers, via the interoperability magic of AIA and PKCS#11. This avoids having to patch web browsers or intercept TLS connections (either of which would introduce nontrivial security liabilities).&lt;/p&gt;

&lt;p&gt;One of the consequences of this benefit has been that Namecoin domains must embed an ECDSA public key on-chain. ECDSA public keys, alas, are somewhat big. We worked around this, sort of, by using compressed public keys on-chain, and decompressing them on-the-fly before passing them to web browsers via AIA. This was still suboptimal for a few reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compressed ECDSA public keys are still kind of big. Much bigger than a SHA-256 hash.&lt;/li&gt;
  &lt;li&gt;Compressed ECDSA public keys aren’t supported by the Go standard library, so we had to maintain a fork of the standard library.&lt;/li&gt;
  &lt;li&gt;Whatever escape hatch we get from using compressed ECDSA public keys won’t help us when TLS eventually moves to PQ signatures. (More on this in a future post.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, why did we need full public keys in the blockchain (as opposed to a public key hash) anyway? The constraints are as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Encaya needs to synthesize a CA certificate when the browser asks for it.&lt;/li&gt;
  &lt;li&gt;This synthesized CA certificate needs to contain the public key that the domain owner picked.&lt;/li&gt;
  &lt;li&gt;The browser will &lt;em&gt;not&lt;/em&gt; provide any public keys that the TLS server presented in the certificate chain.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Therefore&lt;/strong&gt;, Encaya needs to get the public key from the blockchain, since there’s no other way to get it given the API constraints. QED. &lt;em&gt;Right…?&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Um, about that last assumption. Is there really no other way to get the public key given the API constraints?&lt;/p&gt;

&lt;p&gt;Moreover, how does Encaya even know what domain name to look up in the blockchain? Could we get the public key that way?&lt;/p&gt;

&lt;p&gt;Hmm…&lt;/p&gt;

&lt;p&gt;Encaya gets the domain name from an AIA request (for Chromium-like browsers) or from a PKCS#11 request (for Firefox-like browsers). Why do these requests contain the domain name? Uh. Because we put the domain name there?&lt;/p&gt;

&lt;p&gt;The AIA request contains whatever data is in the AIA Issuer URL field of a certificate sent by the TLS server. The PKCS#11 request contains whatever data is in the Issuer Distinguished Name (DN) field of that certificate. There’s no requirement that either of those fields contain the domain name. The DN does &lt;em&gt;sometimes&lt;/em&gt; contain a domain name in the Common Name field, but that’s normally only a thing for end-entity certificates, not CA certificates. The AIA Issuer URL field definitely doesn’t normally have anything like that under any circumstances. In both fields, we &lt;em&gt;deliberately&lt;/em&gt; put the domain name there so that Encaya would see it.&lt;/p&gt;

&lt;p&gt;You probably see where this is going. Could we stuff a public key into the AIA Issuer URL and the Subject DN? It’d look pretty weird, but if you’re averse to looking weird, you’re probably not a hacker.&lt;/p&gt;

&lt;p&gt;So here’s the new workflow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The AIA Issuer URL field of the CA certificate sent by the TLS server adds a new GET query parameter, containing a base64-encoded public key.&lt;/li&gt;
  &lt;li&gt;The Subject DN field of that CA certificate’s parent CA adds a base64-encoded public key in the Subject Serial Number subfield.&lt;/li&gt;
  &lt;li&gt;The Issuer DN field of the CA certificate matches the Subject DN of its parent, thus also including an Issuer Serial Number with a base64-encoded public  key in it.&lt;/li&gt;
  &lt;li&gt;When Chromium sees this certificate chain, it sends an AIA request to Encaya that includes the public key as part of the AIA Issuer URL.&lt;/li&gt;
  &lt;li&gt;When Firefox sees this certificate chain, it sends a PKCS#11 request to ncp11 that includes the public key as part of the Subject DN or Issuer DN.&lt;/li&gt;
  &lt;li&gt;Encaya can then compare this public key to the hashed TLSA record in the blockchain. It if matches, Encaya uses the public key in its synthesized CA.&lt;/li&gt;
  &lt;li&gt;Chromium and Firefox don’t know that anything funky has happened. Sure, there’s an intermediate CA with a really long AIA Issuer URL and Issuer Serial Number. But Chromium and Firefox don’t care about that.&lt;/li&gt;
  &lt;li&gt;On-chain savings achieved. &lt;em&gt;We win!&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ve implemented the above in Encaya, ncp11, and generate_nmc_cert. What do the savings look like?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Before: 90 bytes of JSON per TLSA record&lt;/li&gt;
  &lt;li&gt;After: 54 bytes of JSON per TLSA record&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The TLS handshake, of course, contains a bit more data, but TLS handshake bytes are cheap compared to on-chain bytes.&lt;/p&gt;

&lt;p&gt;Once this feature gets into a release, we will contact Namecoin HTTPS website operators in the wild (where feasible) to nudge them to upgrade their setup. Support for the previous certificate format will probably be dropped soon, because the maintenance burden of a standard Go crypto library fork is not a good use of my time.&lt;/p&gt;

&lt;p&gt;This work was funded by Power Up Privacy.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Sep 2025 00:00:00 +0000</pubDate>
        <link>https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/09/11/hashed-tlsa-records-in-encaya.html</link>
        <guid isPermaLink="true">https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/09/11/hashed-tlsa-records-in-encaya.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>What's the maximum length of an AIA Issuer URL in Windows 11 CryptoAPI?</title>
        <description>&lt;p&gt;For those of you who haven’t seen my various conference talks about Namecoin TLS, AIA (&lt;em&gt;Authority Information Access&lt;/em&gt;) is a mechanism for a TLS certificate to provide a URL where you can find the certificate of its issuer. Namecoin does some, uh, &lt;em&gt;creative&lt;/em&gt; things with AIA. For reasons that will be elaborated on in a future post (don’t worry, all will be explained there), I wanted to know the maximum length of the URL that AIA can link to.&lt;/p&gt;

&lt;p&gt;I had no luck finding any such limit in any relevant RFC, nor could I find anyone on the Internet who had documented any such limit, so I had to fall back to experimentation. I ended up writing a patched certificate generator and AIA HTTP server that could test whether arbitrary AIA URL lengths were usable to build a certificate chain. I then wrote a PowerShell script that tried various AIA URL lengths with Windows 11’s &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil -verify&lt;/code&gt;, to see what CryptoAPI’s limits were.&lt;/p&gt;

&lt;p&gt;After running some tests, I have some answers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AIA URL lengths up to &lt;code class=&quot;highlighter-rouge&quot;&gt;65534&lt;/code&gt; bytes work fine.&lt;/li&gt;
  &lt;li&gt;AIA URL lengths &lt;code class=&quot;highlighter-rouge&quot;&gt;65535&lt;/code&gt; bytes and higher do not work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am not certain why the upper bound is &lt;em&gt;2&lt;/em&gt; less than a power of 2. If it were &lt;em&gt;1&lt;/em&gt; less than a power of 2, that would be sensible since that would indicate a length field that’s an unsigned 16-bit integer. My best guess is that Windows is using a strange data structure that uses both a 16-bit length field &lt;em&gt;and&lt;/em&gt; a NULL terminator.&lt;/p&gt;

&lt;p&gt;Checking CryptoAPI’s logs in Event Viewer indicates that none of the AIA-related code paths are running when the limit is exceeded.&lt;/p&gt;

&lt;p&gt;Scope caveats:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I only ran this test in Windows 11 24H2. I suspect that sufficiently old Windows releases are less tolerant.&lt;/li&gt;
  &lt;li&gt;I don’t know what happens if you try to put Unicode in the URL.&lt;/li&gt;
  &lt;li&gt;I would not expect to see the same limit in other TLS clients that implement AIA, e.g. macOS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Should you wish to reproduce these results yourself (&lt;em&gt;Science Rules!&lt;/em&gt;), the code should be included in the next release of Encaya.&lt;/p&gt;

&lt;p&gt;This work was funded by Power Up Privacy.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Sep 2025 00:00:00 +0000</pubDate>
        <link>https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/09/07/whats-maximum-length-aia-issuer-url-windows-11-cryptoapi.html</link>
        <guid isPermaLink="true">https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/09/07/whats-maximum-length-aia-issuer-url-windows-11-cryptoapi.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Improving sockstrace: Debugging, Process Control, and Proxy Rules</title>
        <description>&lt;p&gt;sockstrace just got a major update. Here’s a quick overview of the new features:&lt;/p&gt;

&lt;h2 id=&quot;core-dump--stack-trace&quot;&gt;Core Dump &amp;amp; Stack Trace&lt;/h2&gt;
&lt;p&gt;When a proxy leak is detected, sockstrace can:&lt;/p&gt;

&lt;p&gt;Stack Trace: Extract a stack trace of the leaking process to show where in the code the leak occurred. This uses &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb&lt;/code&gt; behind the scenes, so the trace includes detailed symbol infomation (if available).&lt;/p&gt;

&lt;p&gt;Core Dump: Creates a full core dump of the leaking process by sending &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGABRT.&lt;/code&gt; Before triggering it, sockstrace checks that &lt;code class=&quot;highlighter-rouge&quot;&gt;ulimit&lt;/code&gt; allows dumping. The resulting core can be loaded into GDB for full post-mortem analysis, including memory, registers, and detailed traces.&lt;/p&gt;

&lt;h2 id=&quot;kill-all-tracees-including-children&quot;&gt;Kill All Tracees (Including Children)&lt;/h2&gt;
&lt;p&gt;Previously, sockstrace only supported killing the specific PID that triggered the leak. In multi-process applications like browsers, this often left child processes alive, leading to inconsistent behavior or silent failures.&lt;/p&gt;

&lt;p&gt;Now, it can recursively terminate the entire process tree rooted at that PID, ensuring:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A clearer signal to the user that something went wrong (Avoid silent failures)&lt;/li&gt;
  &lt;li&gt;No zombie processes are left behind&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whitelist-for-incoming-tcp-connections&quot;&gt;Whitelist for Incoming TCP Connections&lt;/h2&gt;
&lt;p&gt;You can now define a whitelist of allowed source IPs or subnets for incoming TCP connections.
sockstrace enforces the whitelist by intercepting the &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;listen&lt;/code&gt; syscalls: it parses the bind address from the syscall arguments, and on listen, it calls &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall.Getsockname&lt;/code&gt; to retrieve the actual bound address. This address is then checked against a user-defined whitelist, and if it doesn’t match, the bind is flagged as a leak or blocked based on the configuration.&lt;/p&gt;

&lt;p&gt;This is useful because:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It blocks unexpected incoming connections.&lt;/li&gt;
  &lt;li&gt;It ensures only known gateways (e.g. Tor) are allowed to connect, as in Whonix-like setups.&lt;/li&gt;
  &lt;li&gt;It catches misconfigured or unsafe behavior in network-facing apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;socks5-handshake-enforcement&quot;&gt;SOCKS5 Handshake Enforcement&lt;/h2&gt;
&lt;p&gt;sockstrace now enforces SOCKS5 rules by intercepting the &lt;code class=&quot;highlighter-rouge&quot;&gt;sendto&lt;/code&gt; syscall and parsing the actual handshake data.&lt;/p&gt;

&lt;p&gt;Parse &amp;amp; Validate Structure: Verifies the SOCKS5 version, authentication methods, and field layout directly from the syscall. Rejects malformed or legacy handshakes.&lt;/p&gt;

&lt;p&gt;Require Authentication: Flags connections that use no-auth &lt;code class=&quot;highlighter-rouge&quot;&gt;(0x00)&lt;/code&gt; as leaks. This helps catch unsafe fallback behavior.&lt;/p&gt;

&lt;p&gt;Tor-Compatible Isolation: Supports enforcing Tor-style stream isolation using SOCKS5 username/password fields. While implementing this, we also fixed a few typos and ambiguities in the &lt;a href=&quot;https://spec.torproject.org/socks-extensions.html&quot;&gt;Tor spec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Regex-Based Rules: Users can define custom regex patterns for valid auth fields (e.g. session-*, profile-[0-9]+) to ensure proper identity separation.&lt;/p&gt;

&lt;p&gt;This gives fine-grained control over SOCKS5 behavior and helps detect apps that bypass proxy isolation.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Next Generation Internet Zero Core Fund.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
        <link>https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/07/25/sockstrace-improvements.html</link>
        <guid isPermaLink="true">https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/07/25/sockstrace-improvements.html</guid>
        <dc:creator>Robert Nganga</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin will be at MoneroKon 5</title>
        <description>&lt;p&gt;We’re happy to announce that Namecoin will be giving a presentation at &lt;a href=&quot;https://monerokon.org/&quot;&gt;MoneroKon 5&lt;/a&gt; in Prague, Czechia (June 20-22). Live streams are expected.&lt;/p&gt;

&lt;p&gt;If you’re also attending and would like to meet up to discuss collaboration, please ping us on #namecoin-dev.&lt;/p&gt;

&lt;p&gt;We’d like to thank Cyphrs for facilitating our participation. See you there!&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jun 2025 00:00:00 +0000</pubDate>
        <link>https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/06/15/monerokon-5.html</link>
        <guid isPermaLink="true">https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/06/15/monerokon-5.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Code Quality Improvements in ncp11</title>
        <description>&lt;p&gt;As you may recall, ncp11 is Namecoin’s PKCS#11 module that enables TLS to work for Namecoin domains with standard TLS clients that use NSS or GnuTLS. I’ve recently made several improvements to ncp11:&lt;/p&gt;

&lt;h2 id=&quot;add-additional-tracing&quot;&gt;Add additional tracing&lt;/h2&gt;

&lt;p&gt;Namecoin’s PKCS#11 modules can log traces of their internal state, which can be helpful for debugging. I’ve expanded ncp11’s tracing to cover some additional state.&lt;/p&gt;

&lt;h2 id=&quot;disable-certificate-transparency&quot;&gt;Disable Certificate Transparency&lt;/h2&gt;

&lt;p&gt;Modern versions of Firefox and Chromium mandate Certificate Transparency for all certificates by default. Namecoin, of course, cannot comply with this requirement, since the public CT logs don’t accept Namecoin certificates. (To some Namecoin users, this is a feature, not a bug.) This was causing CT errors to show up for Namecoin certificate chains.&lt;/p&gt;

&lt;p&gt;I’ve changed ncp11’s trust bits to opt out of the CT requirement for all Namecoin certificates. This gets ncp11 working again in modern browsers.&lt;/p&gt;

&lt;h2 id=&quot;work-around-nss-blacklisting-bug&quot;&gt;Work around NSS blacklisting bug&lt;/h2&gt;

&lt;p&gt;NSS allows PKCS#11 modules to mark a CA as explicitly distrusted for root CA purposes, while still trusting them if they are issued by a trusted CA. ncp11 had been using this for all intermediate CA’s that it signed, but testing showed that NSS’s behavior doesn’t match the documentation, and this feature seems to be broken – marking a CA in this way will result in it being distrusted regardless of its issuer.&lt;/p&gt;

&lt;p&gt;I’ve worked around this by making trust objects optional in p11trustmod, and making ncp11 not return trust objects for intermediate CA’s. This makes ncp11’s generated certificate chains substantially more reliable.&lt;/p&gt;

&lt;h2 id=&quot;set-media-type-correctly-on-pem-responses&quot;&gt;Set media type correctly on PEM responses&lt;/h2&gt;

&lt;p&gt;Encaya’s API endpoint for ncp11’s usage was returning PEM certificate bundles with the default &lt;code class=&quot;highlighter-rouge&quot;&gt;text/plain&lt;/code&gt; media type. This is not really spec-compliant. I’ve made it return a proper &lt;code class=&quot;highlighter-rouge&quot;&gt;application/x-pem-file&lt;/code&gt; media type. ncp11 itself didn’t care, but this does mean that using the Encaya web interface to download the Encaya root CA certificate will now produce a download dialog as expected, instead of showing a bunch of text in the web browser.&lt;/p&gt;

&lt;h2 id=&quot;unify-aia-and-pkcs11-implementations&quot;&gt;Unify AIA and PKCS#11 implementations&lt;/h2&gt;

&lt;p&gt;Encaya has two API endpoints: one for AIA usage, and one for PKCS#11 usage. There are a number of differences, mostly related to differences in how AIA clients and PKCS#11 clients query and cache things. These endpoints had substantial code duplication, which was not great for maintainability. I’ve factored out the common code into a &lt;code class=&quot;highlighter-rouge&quot;&gt;lookupCert&lt;/code&gt; function. The result:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Lines of Code (Before)&lt;/th&gt;
      &lt;th&gt;Lines of Code (After)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;AIA&lt;/td&gt;
      &lt;td&gt;157&lt;/td&gt;
      &lt;td&gt;33&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PKCS#11&lt;/td&gt;
      &lt;td&gt;153&lt;/td&gt;
      &lt;td&gt;47&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Server Total&lt;/td&gt;
      &lt;td&gt;902&lt;/td&gt;
      &lt;td&gt;802&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The refactored code is much cleaner, easier to follow, and will facilitate decreased effort for future improvements.&lt;/p&gt;

&lt;p&gt;This work was funded by Power Up Privacy.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 May 2025 00:00:00 +0000</pubDate>
        <link>https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/05/13/code-quality-improvements-in-ncp11.html</link>
        <guid isPermaLink="true">https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/05/13/code-quality-improvements-in-ncp11.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Occlumask: A Content-based Anonymity Leak Detector</title>
        <description>&lt;p&gt;A few weeks ago, we &lt;a href=&quot;/2025/03/30/namecoin-tls-anonymity-research-funding-power-up-privacy-nlnet-ngi0-core.html&quot;&gt;announced funding&lt;/a&gt; from Power Up Privacy for a number of different projects. One of those projects being “Occlumask”. We will be giving some details about Occlumask, the motivations behind it, its methods, challenges, as well as the current status on research.&lt;/p&gt;

&lt;h2 id=&quot;what-is-occlumask&quot;&gt;What is Occlumask?&lt;/h2&gt;

&lt;p&gt;Occlumask is an LLM-based tool for detecting content-based anonymity leaks. It is currently built off of the &lt;code class=&quot;highlighter-rouge&quot;&gt;llama.cpp&lt;/code&gt; inference engine, running a local LLM instance. We are intending it to mainly be used in the context of chat messaging, forum posting or any other personal writing situation.&lt;/p&gt;

&lt;h2 id=&quot;occlumask-motivations&quot;&gt;Occlumask Motivations&lt;/h2&gt;

&lt;p&gt;De-anonymization remains a pressing issue for privacy conscious users. To that end, there are many things a prospective anonymous person needs to keep track of to keep their identities hidden. Some of you may be familiar with stylometric analysis, where writing style preferences can be used to identify the writer of a text. Tools for obfuscating stylometry, such as &lt;a href=&quot;https://github.com/psal/anonymouth&quot;&gt;Anonymouth&lt;/a&gt;, have existed for a long time. However, stylometry is only one axis of de-anonymization. Even if your stylometry is perfectly obfuscated, the content of your text can give your identity away.&lt;/p&gt;

&lt;p&gt;A lot of information, even piecemeal, can be used to identify you (See &lt;a href=&quot;http://www.dds6qkxpwdeubwucdiaord2xgbbeyds25rbsgr73tbfpqpt4a6vjwsyd.onion/wiki/Tips_on_Remaining_Anonymous#Always_Withhold_your_Identifying_Data&quot;&gt;Always Withhold your Identifying Data&lt;/a&gt; on the Whonix wiki for a non-exhaustive list). Famously, Jeremy Hammond was linked to the &lt;a href=&quot;https://www.justice.gov/archive/usao/nys/pressreleases/March12/hackers/hammondjeremycomplaint.pdf&quot;&gt;2012 Stratfor email leak&lt;/a&gt; through various snippets of personal anecdotes posted in IRC. Keeping in mind human error, it becomes difficult to ensure that one follows all these rules. Occlumask aims to be an aide in this process, catching any lapses in judgment.&lt;/p&gt;

&lt;h2 id=&quot;llm-use-reasoning&quot;&gt;LLM Use Reasoning&lt;/h2&gt;

&lt;p&gt;Classification has been a long-standing use case for machine learning, and so it would follow naturally to use machine learning models to “classify” if a text is de-anonymizing. Neural networks have already been used in stylometric obfuscation in &lt;a href=&quot;https://github.com/EricX003/ALISON&quot;&gt;ALISON&lt;/a&gt;. LLMs present an interesting opportunity with their unique natural language comprehension capabilities. The increased ability for understanding context in particular allows for more accuracy, differentiating between significant and insignificant mentions of potential identifiers. For example, “[City] has terrible weather” vs. “[City] is well known for its cheeses”.&lt;/p&gt;

&lt;h2 id=&quot;challenges-with-occlumask&quot;&gt;Challenges With Occlumask&lt;/h2&gt;

&lt;p&gt;The difficulties involved with using are both in the overall accuracy of the program, as well as the performance. LLMs are, to oversimplify, effectively non-deterministic. There is no guarantee that it will be completely correct in determining the presence of an anonymity leak. A large part of this project will be reducing uncertainty. Keep in mind that Occlumask is an aide, not a replacement for proper privacy practices.&lt;/p&gt;

&lt;p&gt;Running an LLM locally is also computationally expensive. Occlumask is planned to allow for any &lt;code class=&quot;highlighter-rouge&quot;&gt;GGUF&lt;/code&gt;-formatted model. This lets you run less demanding models (i.e. ones with fewer parameters or with more extreme quantization), in exchange for lower quality of output. We also want to minimize the amount of inference any given model does. As such, Occlumask won’t suggest any changes to your writing. &lt;strong&gt;It will only warn you that your text has an identity leak, how you handle it is up to you.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That being said, we still believe that Occlumask is a useful tool (otherwise we wouldn’t be making it!). It will still be reducing the amount of identity leaks that happen, and we will be working on reducing that amount as much as possible.&lt;/p&gt;

&lt;h2 id=&quot;current-progress&quot;&gt;Current Progress&lt;/h2&gt;

&lt;p&gt;We are currently in the prompt engineering phase, getting the LLM to produce the outputs that we want, with an acceptable level of consistency. To this end, we are also collecting example texts to test our program on. So far the results have been promising, with the LLM being able to correctly identify what and why a section of identifying text is as well as surprising us on one occasion, with a potential identifier that none of us could find before Occlumask flagged it for us.&lt;/p&gt;

&lt;p&gt;This work was funded by Power Up Privacy.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 May 2025 00:00:00 +0000</pubDate>
        <link>https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/05/11/occlumask-introduction.html</link>
        <guid isPermaLink="true">https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/05/11/occlumask-introduction.html</guid>
        <dc:creator>Alice Margatroid</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Enhancing Proxy Leak Detection with SocksTrace: From ptrace to seccomp notify</title>
        <description>&lt;p&gt;Initially, SocksTrace relied on &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace&lt;/code&gt; to trace connect syscalls. While &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace&lt;/code&gt; works well for simple programs, it wasn’t practical for high-performance applications, especially browsers.&lt;/p&gt;

&lt;h3 id=&quot;why-switch-to-seccomp-notify&quot;&gt;Why switch to seccomp notify?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Performance: ptrace slowed down applications significantly, making it impractical for real-time proxy leak detection.&lt;/li&gt;
  &lt;li&gt;Scalability: Large, multithreaded programs like browsers were difficult to trace effectively using ptrace.&lt;/li&gt;
  &lt;li&gt;More precise control: seccomp notify allows SocksTrace to intercept only the syscalls it cares about, without stepping through every syscall like ptrace does.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-the-transition-works&quot;&gt;How the transition works&lt;/h3&gt;
&lt;p&gt;Instead of using &lt;code class=&quot;highlighter-rouge&quot;&gt;PTRACE_SYSCALL&lt;/code&gt; to catch connect, SocksTrace now sets up a seccomp filter with &lt;code class=&quot;highlighter-rouge&quot;&gt;SECCOMP_RET_USER_NOTIF&lt;/code&gt;. This allows user-space handling of specific syscalls, without the overhead of stepping through every process instruction. When connect is intercepted, SocksTrace can inspect the syscall parameters, decide whether to allow or deny it, and act accordingly.&lt;/p&gt;

&lt;h2 id=&quot;whitelisting-syscalls&quot;&gt;Whitelisting syscalls&lt;/h2&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;seccomp&lt;/code&gt;, SocksTrace can define a strict policy that only allows necessary syscalls, blocking everything else.&lt;/p&gt;

&lt;h3 id=&quot;why-syscall-whitelisting-matters&quot;&gt;Why syscall whitelisting matters&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Reduces the attack surface by preventing unnecessary syscalls.&lt;/li&gt;
  &lt;li&gt;Ensures SocksTrace only intercepts network-related calls without interfering with other system behavior.&lt;/li&gt;
  &lt;li&gt;Can be extended for different security policies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;implementation-details&quot;&gt;Implementation details&lt;/h3&gt;
&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;go-seccomp-bpf&lt;/code&gt;, SocksTrace creates a seccomp filter that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Blocks all syscalls by default (ActionErrno).&lt;/li&gt;
  &lt;li&gt;Explicitly allows safe syscalls like read, write and exit.&lt;/li&gt;
  &lt;li&gt;Uses &lt;code class=&quot;highlighter-rouge&quot;&gt;seccomp.ActionTrace&lt;/code&gt; to intercept connect for analysis.
This prevents unauthorized connections while ensuring minimal disruption to the application’s normal behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;configuring-tcp-blocking&quot;&gt;Configuring TCP blocking&lt;/h2&gt;
&lt;p&gt;A new feature in SocksTrace allows users to decide whether to block incoming TCP connections.&lt;/p&gt;

&lt;h3 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h3&gt;
&lt;p&gt;By intercepting &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;accept&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;accept4&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;listen&lt;/code&gt;, SocksTrace can monitor and control incoming TCP connections.&lt;/p&gt;

&lt;h3 id=&quot;configurable-blocking-options&quot;&gt;Configurable blocking options&lt;/h3&gt;
&lt;p&gt;Currently, SocksTrace offers two options for incoming TCP connections:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allow all incoming connections.&lt;/li&gt;
  &lt;li&gt;Block all incoming connections (to prevent accidental exposure).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are also working on an option to allow only specific addresses, adding more fine-grained control.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Next Generation Internet Zero Core Fund.&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Mar 2025 04:00:00 +0000</pubDate>
        <link>https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/03/30/sockstrace-seccomp-notify.html</link>
        <guid isPermaLink="true">https://www.rw6nbpjrmcpdxszn3air4bt7t75rpz4cp3c2kbdu72ptua57tzvin4id.onion/2025/03/30/sockstrace-seccomp-notify.html</guid>
        <dc:creator>Robert Nganga</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
  </channel>
</rss>
