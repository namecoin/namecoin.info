<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>https://www.namecoin.org/</link>
    <atom:link href="https://www.namecoin.org/feed.rss" rel="self" type="application/rss+xml" />
    <language>en</language>
    <pubDate>Fri, 28 Oct 2022 20:14:21 +0000</pubDate>
    <lastBuildDate>Fri, 28 Oct 2022 20:14:21 +0000</lastBuildDate>
    <generator>Jekyll</generator>
    <image>
      <url>https://www.namecoin.org/images/logo.png</url>
      <title>Namecoin</title>
      <link>https://www.namecoin.org/</link>
      <width>134</width>
      <height>25</height>
    </image>
    
      <item>
        <title>Anonymity Improvements in Electrum-NMC v4.0.6</title>
        <description>&lt;p&gt;Electrum-NMC v4.0.6 (soon to be released) brings some long-awaited anonymity improvements.&lt;/p&gt;

&lt;h2 id=&quot;automatic-coin-control-for-names&quot;&gt;Automatic Coin Control for Names&lt;/h2&gt;

&lt;p&gt;I first described this feature in &lt;a href=&quot;/2018/03/19/34c3-slides-videos.html&quot;&gt;my 34C3 presentation on anonymity&lt;/a&gt;.  There’s not much else to say here; my presentation covers how the feature works and why that design was chosen.  The delay between 34C3 and implementation is due to the preferences expressed by the Tor developers, hopefully it was worth the wait.&lt;/p&gt;

&lt;h2 id=&quot;whonixtails-support&quot;&gt;Whonix/Tails Support&lt;/h2&gt;

&lt;p&gt;Various anonymous OS’s such as &lt;a href=&quot;https://www.whonix.org/&quot;&gt;Whonix&lt;/a&gt; and &lt;a href=&quot;https://tails.boum.org/&quot;&gt;Tails&lt;/a&gt; come with Tor preconfigured.  A major component of how these OS’s handle preconfiguration is via environment variables that tell Tor-friendly applications such as Tor Browser and OnionShare where Tor’s SOCKS port is.  Electrum-NMC now supports these environment variables, so it will automatically use the correct SOCKS port (with stream isolation) on Whonix and Tails instead of relying on transproxying.&lt;/p&gt;

&lt;p&gt;As part of this work, I engaged with the Tor Applications Team on improving the specifications for Tor-friendly applications.  This work has been slower than hoped, but some major improvements have already worked their way through the review process, and I expect to deliver more improvements to these specifications in the coming months.&lt;/p&gt;

&lt;h2 id=&quot;apparmor-sandboxing-support&quot;&gt;AppArmor Sandboxing Support&lt;/h2&gt;

&lt;p&gt;Besides environment variables, another trick that Whonix uses to Torify applications is usage of AppArmor to blacklist traffic that doesn’t go through Tor’s SOCKS port.  This works by having Tor listen on a Unix domain socket, and then blacklisting IP sockets via AppArmor; standard filesystem ACL’s take care of the rest.  Electrum-NMC now supports connecting to a SOCKS proxy via a Unix domain socket, so it should now be possible to enforce Torification via AppArmor.&lt;/p&gt;

&lt;p&gt;So far, no one has written such an AppArmor policy for Electrum-NMC; this will be the subject of future work.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s NGI0 Discovery Fund.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Oct 2022 02:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/10/28/anonymity-improvements-in-electrum-nmc-v4.0.6.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/10/28/anonymity-improvements-in-electrum-nmc-v4.0.6.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Changes to name_show in Electrum-NMC Protocol v1.4.3</title>
        <description>&lt;p&gt;In my 36C3 presentation (seems so long ago…), I mentioned some future changes I wanted to make to the Electrum-NMC protocol.  Some of these changes have recently been implemented:&lt;/p&gt;

&lt;h2 id=&quot;verifying-unconfirmed-transactions&quot;&gt;Verifying Unconfirmed Transactions&lt;/h2&gt;

&lt;p&gt;For security reasons, Electrum-NMC has historically required 12 confirmations before it accepts a name transaction.  Unfortunately, waiting 2 hours (on average) for a name update to take effect is not great UX, and also introduces its own security issues (e.g. it means that TLS revocations are unnecessarily delayed).  When evaluating security of name transactions, there are two different attacks that we need to consider:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hijacking attacks&lt;/li&gt;
  &lt;li&gt;Double-spend attacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hijacking attacks occur when a malicious miner mines a Namecoin block with an invalid scriptSig, which (if accepted) would allow them to hijack an arbitrary name without any participation from the name owner.  In contrast, double-spend attacks occur when a malicious name owner signs two different name updates with the same input, which (if accepted) would allow one of those name updates to be accepted even though only the other update is part of the longest blockchain.&lt;/p&gt;

&lt;p&gt;In practice, while any name could be targeted by a hijacking attack, only names that have recently been transferred to a new owner can be targeted by a double-spend attack.  (Double-spending a name that you still own doesn’t really confer any benefit.)  Since the vast majority of names have not been transferred in the last 12 blocks, if we can prevent hijacking attacks, we can accept the risk of double-spend attacks, since the latter can easily be mitigated by waiting 12 blocks from receiving a name transfer before using that name for critical purposes.&lt;/p&gt;

&lt;p&gt;Can we do this?  Ryan Castellucci proposed many years ago that we could verify the scriptSigs of recent name updates, chaining them back to a previous name update that has sufficient DMMS confirmation (i.e. 12 blocks).  I have now implemented this in Electrum-NMC Protocol v1.4.3; Electrum-NMC will retrieve recent updates to a name (from 1 to 11 confirmations) and verify scriptSigs to chain them back to the most recent update with at least 12 confirmations.  The result is that name updates now take effect in 1 block (~10 minutes) instead of 12 blocks (~2 hours).&lt;/p&gt;

&lt;h2 id=&quot;checkpoint-verification&quot;&gt;Checkpoint Verification&lt;/h2&gt;

&lt;p&gt;One of the inherent problems with the SPV threat model is that it only verifies DMMS signatures (attached to blocks), not scriptSigs (attached to transactions).  This means that an attacker with a majority of hashrate can mine invalid blocks (e.g. that hijack names) that will appear valid to SPV clients.  Full nodes are, of course, immune to this, since they check scriptSigs on all transactions.&lt;/p&gt;

&lt;p&gt;Unfortunately, full nodes have a much longer IBD duration, and also are much more resource-intensive.  Can an SPV client verify scriptSigs on the transactions it cares about?  In Bitcoinland, this is not really feasible, because the fungible nature of bitcoins means that you’d have to verify every transitive input to every transaction you care about, which would probably be exponential with respect to the verification depth.  However, in Namecoinland, we don’t have this problem.  The nonfungible nature of Namecoin names means that the number of transitive inputs grows linearly, not exponentially.&lt;/p&gt;

&lt;p&gt;Thus, we can reuse the scriptSig chaining trick to chain the latest confirmed name update back to a previous update that was committed to in the checkpoint (if such an update exists).  This means that in order to hijack a name that existed at the checkpoint height, an attacker would need to compromise both a majority of hashrate &lt;strong&gt;and&lt;/strong&gt; the full node used to generate the checkpoint.  I’ve implemented this in Electrum-NMC Protocol v1.4.3 as well; Electrum-NMC will retrieve all updates for a name going back to just before the checkpoint height, and verify the chain of scriptSigs.&lt;/p&gt;

&lt;h2 id=&quot;one-round-trip&quot;&gt;One Round Trip&lt;/h2&gt;

&lt;p&gt;Electrum-NMC’s protocol has always been inefficient for &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt;, because it needed to issue 4 commands to the ElectrumX server per name:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get the latest name update txid.&lt;/li&gt;
  &lt;li&gt;Get the transaction preimage.&lt;/li&gt;
  &lt;li&gt;Get the Merkle proof tying the txid to the block header.&lt;/li&gt;
  &lt;li&gt;Get the Merkle proof tying the block header to the checkpoint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The latter 3 of those could be issued in parallel, but that still means a best case of 2 round trips per lookup (and the best case was not always achieved in practice).  Especially over Tor, this extra latency is a major UX problem.  This inefficiency was a result of the upstream Electrum protocol for Bitcoin not being designed for Namecoin’s use cases.  As of Electrum-NMC Protocol v1.4.3, there is a dedicated command for &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt;, which combines the above 4 commands into 1, thus cutting down the lookup time to a single round trip.  The above scriptSig-related features are also integrated into the dedicated command, so retrieving the extra transactions does not incur any extra round trips.&lt;/p&gt;

&lt;h2 id=&quot;future-optimizations&quot;&gt;Future Optimizations&lt;/h2&gt;

&lt;p&gt;Electrum-NMC Protocol v1.4.3 also allows the ElectrumX server to send hint data for names other than the requested one.  For example, if &lt;code class=&quot;highlighter-rouge&quot;&gt;d/wikileaks&lt;/code&gt; imports from &lt;code class=&quot;highlighter-rouge&quot;&gt;dd/wikileaks&lt;/code&gt;, the server might return data for both &lt;code class=&quot;highlighter-rouge&quot;&gt;d/wikileaks&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dd/wikileaks&lt;/code&gt; when the client requests the former, thus saving a round trip if the client would have asked for the latter name next.  At the moment, the hint data is left unpopulated, but we should be able to start populating it in the future without needing another protocol change.&lt;/p&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;Electrum-NMC and upstream ElectrumX have both merged Protocol v1.4.3, so we’re now waiting for server operators to update.  Once we’ve determined that enough server operators have updated, we expect to flip a switch in the Electrum-NMC source code that enables the new protocol features.  This functionality should also work out of the box in other ElectrumX-supported coins that use a name index, which in practice means Xaya.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s NGI0 Discovery Fund.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/10/28/name-show-in-electrum-nmc-protocol-v1.4.3.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/10/28/name-show-in-electrum-nmc-protocol-v1.4.3.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>winsvcwrap: Open source replacement for SRVANY in Golang</title>
        <description>&lt;p&gt;Unlike *nix platforms, system services on Windows must be specifically designed
to run as services, and written against the Win32 Service APIs. This creates a
problem when it is desired to run a program as a Windows system service which
was not designed to function in this role.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SRVANY.EXE&lt;/code&gt; is an executable distributed by Microsoft in the Windows NT 4.0
Resource Kit, which can be used to adapt any program into a system service.
&lt;code class=&quot;highlighter-rouge&quot;&gt;SRVANY.EXE&lt;/code&gt; is configured as the system service, and it spawns and supervises
the target process in turn. Thus, it forms an adapter between the Windows
service manager and arbitrary programs. However, &lt;code class=&quot;highlighter-rouge&quot;&gt;SRVANY&lt;/code&gt; is a proprietary
binary for which source code is not available, and is no longer even
distributed by Microsoft.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hlandau/winsvcwrap&quot;&gt;winsvcwrap&lt;/a&gt; is a simple open source Go
program to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;SRVANY&lt;/code&gt; and provide equivalent functionality, and is now
used by the Namecoin project to power its Windows installer bundle. This
enables the Namecoin project to avoid depending on an unmaintained proprietary
component. It can be used by anyone seeking to run arbitrary Windows programs
as Windows system services. Since it is written in Go, it is memory-safe
(unlike C/C++) and bootstrappable (unlike Rust).&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/10/06/winsvcwrap-open-source-replacement-for-srvany.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/10/06/winsvcwrap-open-source-replacement-for-srvany.html</guid>
        <dc:creator>Hugo Landau</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Hacktoberfest 2022</title>
        <description>&lt;p&gt;Namecoin is participating in &lt;a href=&quot;https://hacktoberfest.com/&quot;&gt;Hacktoberfest 2022&lt;/a&gt;.  If you’re interested in contributing to Namecoin, Hacktoberfest is a great chance to start (and maybe win a t-shirt).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/search?q=org%3Anamecoin+label%3Ahacktoberfest&amp;amp;state=open&amp;amp;type=Issues&quot;&gt;The list of Hacktoberfest issues for Namecoin is here.&lt;/a&gt;  Of course, we welcome other PR’s as well.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/10/05/hacktoberfest-2022.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/10/05/hacktoberfest-2022.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Core 22.0 Released</title>
        <description>&lt;p&gt;Namecoin Core 22.0 has been released on the &lt;a href=&quot;/download/#namecoin-core-client-stable-release&quot;&gt;Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s what’s new since 0.21.0.1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RPC
    &lt;ul&gt;
      &lt;li&gt;Deterministic salts.  (Reported by s7r; Design by Ryan Castellucci and Jeremy Rand; Patch by Yanmaani; Review by Daniel Kraft.)&lt;/li&gt;
      &lt;li&gt;Transaction queue.  (Patch by Yanmaani; Review by Jeremy Rand and Daniel Kraft.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GUI
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name_list&lt;/code&gt; Qt GUI.  (Patch by Jeremy Rand; Review by Brandon Roberts, Randy Waterhouse, and Daniel Kraft.)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name_pending&lt;/code&gt; Qt GUI.  (Patch by Jeremy Rand; Review by Daniel Kraft.)&lt;/li&gt;
      &lt;li&gt;Edit contents of model instead of resetting.  (Patch by Jeremy Rand; Review by Daniel Kraft.)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name_update&lt;/code&gt; Qt GUI.  (Patch by Jeremy Rand; Review by Daniel Kraft.)&lt;/li&gt;
      &lt;li&gt;Name renew Qt GUI.  (Patch by Jeremy Rand; Review by Daniel Kraft and Randy Waterhouse.)&lt;/li&gt;
      &lt;li&gt;Add Renew Names button.  (Patch by Jeremy Rand; Review by Daniel Kraft.)&lt;/li&gt;
      &lt;li&gt;Fix double lock when creating a new wallet.  (Patch by Jeremy Rand; Review by Daniel Kraft.)&lt;/li&gt;
      &lt;li&gt;Name decoration in Qt GUI.  (Patch by Jeremy Rand; Review by Daniel Kraft and Brandon Roberts.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Misc
    &lt;ul&gt;
      &lt;li&gt;Fix name operations in descriptor wallets.  (Reported by Jeremy Rand; Patch by Daniel Kraft; Review by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Rebrand Cirrus build directory.  (Patch by Jeremy Rand; Review by Daniel Kraft.)&lt;/li&gt;
      &lt;li&gt;Rebrand Guix.  (Patch by Jeremy Rand; Review by Daniel Kraft.)&lt;/li&gt;
      &lt;li&gt;Add mainnet DNS seed from Jonas Ostman.  (Patch by Jeremy Rand; Review by Daniel Kraft.)&lt;/li&gt;
      &lt;li&gt;Update hardcoded seeds.  (Patch by Jeremy Rand; Review by Daniel Kraft.)&lt;/li&gt;
      &lt;li&gt;Fix some AuxPoW CI errors.  (Reported by Jeremy Rand; Patch by Daniel Kraft.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Numerous improvements from upstream Bitcoin Core.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/08/02/namecoin-core-22.0-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/08/02/namecoin-core-22.0-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>Namecoin Core Releases</category>
        
        
      </item>
    
      <item>
        <title>pkcs11mod progress: Windows, macOS, certutil support, and more!</title>
        <description>&lt;p&gt;Lots of things have been done with pkcs11mod since my &lt;a href=&quot;/2022/02/26/lab-leak-part-2-p11trustmod.html&quot;&gt;last post&lt;/a&gt; on the subject.  This is going to be a bit of a “grab bag” post without much structure (because that’s what reality looks like here, and this post is intended to reflect reality).&lt;/p&gt;

&lt;p&gt;I noticed that the Chromium tests were hanging.  After a bit of investigation, I found that the flags I was passing to Chromium to make it run in Docker weren’t quite sufficient.  The &lt;a href=&quot;https://github.com/Zenika/alpine-chrome&quot;&gt;alpine-chrome&lt;/a&gt; project has a more thorough set of flags, and applying these to pkcs11mod’s test scripts got the tests passing again.&lt;/p&gt;

&lt;p&gt;I implemented the &lt;code class=&quot;highlighter-rouge&quot;&gt;GenerateKeyPair&lt;/code&gt; function in p11mod, which got the &lt;code class=&quot;highlighter-rouge&quot;&gt;test-rsapub&lt;/code&gt; OpenDNSSEC test passing.  Thanks again to OpenDNSSEC for the test!&lt;/p&gt;

&lt;p&gt;I noticed that trying to use either of the proxy modules with a nonexistent target module path resulted in a Go panic.  This is not good, since a panic will crash the host application.  Now this is mitigated by both pkcs11mod and p11mod checking for initialization errors, and returning &lt;code class=&quot;highlighter-rouge&quot;&gt;CKR_GENERAL_ERROR&lt;/code&gt;, which is used by the PKCS#11 specification to indicate an error that is probably not recoverable.  The application can handle this however it likes, but whatever it does will probably be better than crashing.&lt;/p&gt;

&lt;p&gt;When trying to test pkcs11mod on Windows, I noticed that it failed very early.  So early that the Go runtime never even tried to initialize.  By comparing &lt;code class=&quot;highlighter-rouge&quot;&gt;pkcs11proxy.dll&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;nssckbi.dll&lt;/code&gt; in &lt;a href=&quot;https://lucasg.github.io/Dependencies/&quot;&gt;Dependencies&lt;/a&gt;, I found that pkcs11mod was failing to export the &lt;code class=&quot;highlighter-rouge&quot;&gt;C_GetFunctionList&lt;/code&gt; function, which caused applications to conclude that pkcs11proxy wasn’t a PKCS#11 module.  That explained the symptoms.  But wait, didn’t ncp11 work on Windows back when it was first released?  Yes.  Some digging found that this regression was caused by the fix for &lt;a href=&quot;https://github.com/golang/go/issues/30674&quot;&gt;Go issue 30674&lt;/a&gt;.  (Apparently, Go used to export all functions, and Windows has a tendency to crash if you export too many functions, so Go now requires developers to explicitly designate which functions will be exported.)  I fixed this via the &lt;code class=&quot;highlighter-rouge&quot;&gt;__declspec(dllexport)&lt;/code&gt; attribute.  And now, pkcs11proxy is detected as a PKCS#11 module on Windows.&lt;/p&gt;

&lt;p&gt;I fixed the documentation (and Cirrus scripts) to generate libraries with the idiomatic &lt;code class=&quot;highlighter-rouge&quot;&gt;pkcs11proxy.dll&lt;/code&gt; filename on Windows targets, instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;libpkcs11proxy.so&lt;/code&gt; filename that’s supposed to be only a Linux thing.  Not a big deal, but correct documentation is important.&lt;/p&gt;

&lt;p&gt;I added a trace mode (hidden behind an environment variable) to both pkcs11mod and p11mod, which makes it easier to follow what PKCS#11 calls are being issued.  Be warned, even running a proxy module for a minute or so can produce a trace log of over a megabyte, so this should not be done routinely.  Not all functions are traced yet; I’d happily accept PR’s to add more detailed tracing.&lt;/p&gt;

&lt;p&gt;I added a test for &lt;a href=&quot;/2021/07/05/tstclnt-openssl-s_client-gnutls-cli-equivalent-for-nss.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt;&lt;/a&gt; on Debian, and noticed that it was failing.  Further investigation showed that &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; was failing to read the trust bits from the CKBI module when &lt;code class=&quot;highlighter-rouge&quot;&gt;pkcs11proxy&lt;/code&gt; was in the middle.  This was odd, because I was already testing &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; on Fedora, and it worked fine there.  The obvious difference was that Fedora uses Red Hat’s p11-kit CKBI module, while Debian uses Mozilla’s CKBI module.  Fedora’s replacement is &lt;em&gt;supposed&lt;/em&gt; to be compatible with Mozilla’s version, but clearly the Red Hat CKBI module was doing something different from Mozilla’s, and my code was expecting the behavior of Red Hat’s module.  Using the trace mode (see above paragraph), I figured out what was going on.  NSS queries for 4 different EKU trust attributes: TLS server authentication, TLS client authentication, email, and code signing.  (Clearly NSS could get away with only querying for TLS server authentication in this case, since &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; isn’t doing anything with the other three, but they don’t do that optimization here.  Which is probably okay, since most of the time, the extra queries won’t harm performace.)  Red Hat’s CKBI module contains trust bits for all 4 of those EKU attributes.  Mozilla’s CKBI module, however, omits the TLS client authentication attribute.  This makes sense, I guess, since the Mozila root CA program is not intended to be used for TLS client authentication, while Red Hat’s CKBI module incorporates certificates added by the user, which might be used for that EKU.  Here’s where the problem happens: NSS queries for all 4 trust attributes in a single &lt;code class=&quot;highlighter-rouge&quot;&gt;GetAttributeValue&lt;/code&gt; function call.  Per the PKCS#11 specification, if any of the attributes in a oneshot query are missing, some extra error bits are returned, so that the caller knows which attributes existed and which didn’t.  However, Miek’s pkcs11 library doesn’t handle this case; it instead just returns an error, causing pkcs11mod to lose the trust bits attributes that did exist.  Patching Miek’s library seemed like an overkill approach, so I instead rigged pkcs11mod to detect the &lt;code class=&quot;highlighter-rouge&quot;&gt;CKR_ATTRIBUTE_SENSITIVE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CKR_ATTRIBUTE_TYPE_INVALID&lt;/code&gt; error codes, and retry the attributes one at a time to figure out which ones we can return to the application.  This isn’t ideal performance-wise, since we end up retrieving the attributes twice, but the difference should be negligible in the real world.  And with that, &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; on Debian passed the tests.&lt;/p&gt;

&lt;p&gt;Upstream p11 v1.1.0 added some named errors, which allowed me to avoid recognizing those errors via a brittle string comparison.  That makes my code cleaner, which is good.&lt;/p&gt;

&lt;p&gt;I added tests for Firefox and Chromium on Debian, which passed immediately (presumably because of the above &lt;code class=&quot;highlighter-rouge&quot;&gt;tstclnt&lt;/code&gt; fixes).&lt;/p&gt;

&lt;p&gt;I added tests for Firefox (both ESR and Nightly) on Windows.  These mostly passed, but I did need to fix the logfile output paths, since &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME&lt;/code&gt; is not a thing on Windows.  The logfile is now saved to &lt;code class=&quot;highlighter-rouge&quot;&gt;os.UserConfigDir()&lt;/code&gt;, which behaves sanely on all major OS’s.  It falls back to the current working directory if the user config directory isn’t accessible for some reason (e.g. sandboxing).&lt;/p&gt;

&lt;p&gt;I then added some more Firefox variants on Windows: Firefox Rapid Release, Firefox Beta, Firefox Developer Edition, &lt;a href=&quot;https://librewolf.net/&quot;&gt;LibreWolf&lt;/a&gt;, and &lt;a href=&quot;https://www.gnu.org/software/gnuzilla/&quot;&gt;GNU IceCat&lt;/a&gt;.  They all passed.  I also tried to add &lt;a href=&quot;https://www.waterfox.net/&quot;&gt;Waterfox&lt;/a&gt; and &lt;a href=&quot;https://www.palemoon.org/&quot;&gt;Pale Moon&lt;/a&gt;, but Waterfox hung on the install step in my Cirrus VM, and Pale Moon doesn’t support the headless screenshot feature, which my tests rely on.  My guess is that both of them would work fine outside of my test environment.&lt;/p&gt;

&lt;p&gt;Next, I added tests for &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; (the NSS tool, not the CryptoAPI tool of the same name).  Specifically, I dumped the CKBI certificate list, with trust bits, via pkcs11proxy and p11proxy, and compared the output to what I got without the proxy.  Surprisingly, this turned out to be a giant gopherhole [1].  Dumping the certificate list caused &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; to segfault halfway through dumping when proxied – but only on Windows, and only via p11proxy (pkcs11proxy didn’t segfault).  Inspecting logs revealed that &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; was calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;CloseAllSessions&lt;/code&gt; function, which &lt;code class=&quot;highlighter-rouge&quot;&gt;p11mod&lt;/code&gt; didn’t implement.  I implemented that function (it was pretty simple), but this didn’t fix the segfault.  I enabled the trace mode that I had previously added, and found that it was segfaulting after the &lt;code class=&quot;highlighter-rouge&quot;&gt;Finalize&lt;/code&gt; function had returned, which seemed odd, since that meant my code had already finished running by the point of the segfault.  After some confusion, I found &lt;a href=&quot;https://github.com/golang/go/issues/11100&quot;&gt;Go issue 11100&lt;/a&gt;, which described my problem: &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; had tried to unload &lt;code class=&quot;highlighter-rouge&quot;&gt;p11proxy.dll&lt;/code&gt;, which yanked some data structures out from under the Go runtime, causing a segfault.  There is a way to instruct Windows (via the &lt;code class=&quot;highlighter-rouge&quot;&gt;GET_MODULE_HANDLE_EX_FLAG_PIN&lt;/code&gt; argument to the &lt;code class=&quot;highlighter-rouge&quot;&gt;GetModuleHandleEx&lt;/code&gt; Windows API function) not to ever unload a DLL file until the application exits.  Conveniently, the &lt;code class=&quot;highlighter-rouge&quot;&gt;golang.org/x/sys/windows&lt;/code&gt; package (nicknamed &lt;code class=&quot;highlighter-rouge&quot;&gt;goxsys/windows&lt;/code&gt; by the Tor folks [2]) has support for this.  I tried it out, and sure enough, that fixed the segfault.&lt;/p&gt;

&lt;p&gt;However, this introduced a new issue.  Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; wouldn’t segfault, but it would hang after outputting the entire certificate list, until I hit Ctrl-C in the command prompt.  Go issue 11100 had some mention of this occurring in Unity: apparently some applications wait for all background threads to exit before closing the program, and the Go runtime (which never terminates) is being recognized as such a background thread.  In theory, this is an application bug, but pkcs11proxy is supposed to leave the behavior of buggy software unchanged, so this was something I couldn’t just ignore.  Alas, I didn’t find a clean way to solve this.  So I did the dumb approach: when the &lt;code class=&quot;highlighter-rouge&quot;&gt;Finalize&lt;/code&gt; function is called, pkcs11mod starts a 5-second timer in a goroutine, which then calls &lt;code class=&quot;highlighter-rouge&quot;&gt;os.Exit(0)&lt;/code&gt;.  Sometimes the dumb approach is the best option that presents itself.&lt;/p&gt;

&lt;p&gt;Unfortunately, this meant that now, if an application tries to unload pkcs11mod, the application will be forcibly closed 5 seconds later.  This works fine for applications like &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; which will exit right after that point anyway.  But in Firefox, you probably don’t want your browser to kill itself 5 seconds after you click the Unload button in the Security Devices dialog.  So, what to do…?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/memes/one-does-not-simply-avoid-user-agent-sniffing.jpg&quot; alt=&quot;One does not simply avoid user-agent sniffing.  Even in PKCS#11 modules.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yep, once again, sometimes the dumb approach is the best option that presents itself.  We simply check the process name that pkcs11mod is loaded into.  If it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt;, we start the 5-second exit timer; otherwise, we don’t.  The number of applications that exhibit this bug is, I’m guessing, small enough that we can simply enumerate them.&lt;/p&gt;

&lt;p&gt;This got the &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; tests passing.  However, now the Firefox tests on Windows were failing.  Inspection of Firefox stderr indicated some error messages about a tab subprocess failing to start.  A DuckDuckGo search for these errors indicated a Bugzilla thread where the reporter said that disabling the Electrolysis sandbox fixed a crash.  I added some Cirrus tasks that ran my usual Firefox tests but with Electrolysis disabled.  Sure enough, those tests passed.  I initially figured that my usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;GetModuleHandleEx&lt;/code&gt;, or perhaps my attempt to read the process name, had violated some kind of sandbox policy, but after bisecting my recent changes, I came to a surprising conclusion: the thing that crashes Electrolysis is simply the act of &lt;em&gt;importing&lt;/em&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;goxsys/windows&lt;/code&gt; package.  I’m guessing there’s some kind of &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; function inside that package that tries to do something that the sandbox doesn’t like, and panics when it gets a permission failure [3].  After grepping GitHub hoping someone had already found a solution to this, I discovered that the &lt;a href=&quot;https://github.com/pipelined/vst2&quot;&gt;vst2&lt;/a&gt; project had already implemented a similar solution to mine, but using the lower-level &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; package instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;goxsys/windows&lt;/code&gt;.  I copied their code nearly verbatim, and it worked out of the box: the DLL was pinned properly in &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt;, and Electrolysis worked fine.  Thus bringing me out of the &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; gopherhole.&lt;/p&gt;

&lt;p&gt;I then relaxed a bit by adding macOS builds to Cirrus, and confirmed that pkcs11mod builds without errors on macOS.  (I don’t know if the binaries actually work, but they’re on Cirrus now, you can try them yourself and let me know.)&lt;/p&gt;

&lt;p&gt;Finally, after discussion with the other pkcs11mod devs (Aerth and Bernard), we unanimously agreed to relicense pkcs11mod and ncp11 from LGPLv3+ to LGPLv2.1+.  This makes it unambiguously legal to use pkcs11mod with GPLv2-licensed applications.  The failure to do this initially was an oversight on our end; it was kind of ridiculous that we permitted pkcs11mod to be used with non-freedom software but not GPLv2 software.&lt;/p&gt;

&lt;p&gt;We’re not yet at the point where I’d consider pkcs11mod to be well-tested enough to be used in production by people other than its 3 authors, but we are getting a lot closer to that point.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&quot;https://go.dev/blog/gopher&quot;&gt;Rabbitholes are a thing in Plan 9, not Go.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] Insert Andrew “rasengan” Lee joke here.&lt;/p&gt;

&lt;p&gt;[3] The “goxfail” jokes write themselves.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/06/13/pkcs11mod-windows-macos-certutil.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/06/13/pkcs11mod-windows-macos-certutil.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC v4.0.0b1 fixes CVE-2022-31246</title>
        <description>&lt;p&gt;Electrum-NMC v4.0.0b0 and earlier are affected by &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-31246&quot;&gt;CVE-2022-31246&lt;/a&gt; / &lt;a href=&quot;https://github.com/spesmilo/electrum/security/advisories/GHSA-4fh4-hx35-r355&quot;&gt;GHSA-4fh4-hx35-r355&lt;/a&gt; (the vulnerability is inherited from upstream Electrum).  Electrum-NMC v4.0.0b1 and ncdns for Windows v0.3.1 contain the fix.  Tor Browser Nightly was not vulnerable.  We would like to thank &lt;a href=&quot;https://www.unciphered.com/&quot;&gt;Unciphered&lt;/a&gt; and &lt;a href=&quot;https://immunefi.com/&quot;&gt;Immunefi&lt;/a&gt; for reporting the vulnerability and coordinating the disclosure with us, and upstream Electrum for implementing the fix.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/06/08/electrum-nmc-cve-2022-31246.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/06/08/electrum-nmc-cve-2022-31246.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Alerts</category>
        
        <category>Electrum-NMC Alerts</category>
        
        <category>ncdns Alerts</category>
        
        
      </item>
    
      <item>
        <title>ncdns v0.3.1 Released</title>
        <description>&lt;p&gt;We’ve released ncdns v0.3.1.  This Windows-only release includes important improvements to memory safety and UX; we recommend that all Windows users upgrade.&lt;/p&gt;

&lt;p&gt;Full changelog of what’s new since v0.3:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;certinject
    &lt;ul&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ncdns
    &lt;ul&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ncprop279
    &lt;ul&gt;
      &lt;li&gt;Fix stderr privacy leak when tlshook is enabled at compile-time.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;StemNS
    &lt;ul&gt;
      &lt;li&gt;Log errors to stderr. Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Redact target address from stderr logs.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Load configuration from &lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; folder.  Reported by Patrick Schleizer; patch by Yanmaani.&lt;/li&gt;
      &lt;li&gt;Support &lt;code class=&quot;highlighter-rouge&quot;&gt;ControlPort auto&lt;/code&gt;.  Reported by Adolf-Putin-2022; patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;x509-compressed
    &lt;ul&gt;
      &lt;li&gt;Fix Go 1.18.x compatibility.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows installer
    &lt;ul&gt;
      &lt;li&gt;Switch from BIND’s dnssec-keygen to CoreDNS’s coredns-keygen.  Unlike BIND, CoreDNS is memory-safe and has no non-freedom build dependencies.  This also means the Visual C++ Runtime is no longer required.  Reported by Yana Timoshenko and Aminda Suomalainen; patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Fix compatibility with StemNS’s conf.d feature.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Log StemNS stderr to event log.  Makes it easier to diagnose Tor Browser configuration bugs.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Work around PowerShell v2 bug.  Partially fixes Windows 7 compatibility.  Reported by Cyphrs; patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build system
    &lt;ul&gt;
      &lt;li&gt;Bump Electrum-NMC to v4.0.0b1.&lt;/li&gt;
      &lt;li&gt;Bump godns to v1.1.49.&lt;/li&gt;
      &lt;li&gt;Bump tor-browser-build to v11.5a12.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/#ncdns&quot;&gt;Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/06/04/ncdns-v0.3.1-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/06/04/ncdns-v0.3.1-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC v4.0.0b1 Released</title>
        <description>&lt;p&gt;We’ve released Electrum-NMC v4.0.0b1.  This release includes important UX improvements to reduce the risk of accidentally letting names expire, both on the wallet side and a resolution mechanism called &lt;a href=&quot;/2022/02/18/preventing-expiration-mishaps-with-semi-expiration.html&quot;&gt;semi-expiration&lt;/a&gt; that stops resolving names before they are permanently lost.  Since semi-expiration affects resolution results, we therefore recommend that all users upgrade, even if you do not own any names yourself, so that you see the same resolution results as everyone else.  Here’s what’s new since v4.0.0b0:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simplify GUI for editing TLS records.  (Patch by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;Add documentation links to DNS Builder GUI.  (Patch by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;Add server from deafboy.  (Patch by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;Improve UNOList datetime formatting consistency.  (Patch by Jeremy Rand, review by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;expires_time&lt;/code&gt; field to &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt;.  (Patch by Jeremy Rand, review by Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Implement semi-expiration.  (Reported by Cypherpunks, patch by Jeremy Rand, review by Arthur Edelstein, Cyberia Computer Club, Cypherpunks, Cyphrs, Daniel Kraft, Diego Salazar, Forest Johnson, s7r, Somewhat, and Yanmaani.)&lt;/li&gt;
  &lt;li&gt;Allow passing raw commitment to &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt;.  (Patch by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;Show exact expiration timestamps for expired names.  (Patch by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;Warn user in UNOList when names are expiring soon.  (Reported by Diego Salazar, patch by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;Fix some i18n bugs.  (Patch by Jeremy Rand, review by Somewhat, Yanmaani, and Daniel Kraft.)&lt;/li&gt;
  &lt;li&gt;Add Namebrow.se explorer.  (Patch by Jeremy Rand.)&lt;/li&gt;
  &lt;li&gt;Produce packager-friendly tarballs.  (Reported by Jeremy Rand, patches by Yanmaani and Jeremy Rand, review by Jeremy Rand and SomberNight.)&lt;/li&gt;
  &lt;li&gt;Switch to detached OpenPGP signatures (to follow upstream).&lt;/li&gt;
  &lt;li&gt;Various improvements from upstream Electrum.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#electrum-nmc&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and NLnet Foundation’s NGI0 Discovery Fund.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/06/02/electrum-nmc-v4.0.0b1-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/06/02/electrum-nmc-v4.0.0b1-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>Electrum Releases</category>
        
        
      </item>
    
      <item>
        <title>ncdns v0.3 Released</title>
        <description>&lt;p&gt;We’ve released ncdns v0.3.  This release adds Tor Browser configuration support to the Windows installer.  If you have Tor Browser installed already, the Windows installer will offer to configure Tor Browser to use Namecoin.  This Tor Browser support is aimed at a different audience than the support currently shipped with Tor Browser Nightly; the major features that the ncdns installer brings to the table compared to Tor Browser Nightly are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Windows support (Tor Browser Nightly only supports Namecoin on GNU/Linux).&lt;/li&gt;
  &lt;li&gt;Choice of Tor Browser Stable, Alpha, or Nightly (Stable and Alpha do not have Namecoin built-in).&lt;/li&gt;
  &lt;li&gt;Choice of Electrum-NMC or Namecoin Core (Tor Browser Nightly only supports Electrum-NMC).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains fall back to IP address resolution if no onion service exists (Tor Browser Nightly only supports onion services).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Additional features we intend to add to the ncdns installer in the future include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;TLS support (important for Tor since exit relays are in an excellent position to do MITM attacks, and also important given the censorship attacks we’ve observed from public CA’s such as Comodo and ISRG in the past few years).&lt;/li&gt;
  &lt;li&gt;Recursive DNS support (will allow more complex setups such as &lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;DS&lt;/code&gt; records to be used with Namecoin over Tor).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While we are looking forward to all of the above features making their way into Tor Browser, we want to give power users the option to experiment with these features now.  We expect the feedback from that experimentation to make it easier and faster to migrate these features into Tor Browser.&lt;/p&gt;

&lt;p&gt;Meanwhile, here are some important caveats you should be aware of in this integration:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download size is much larger than Tor Browser Nightly’s Namecoin integration.  If you are on a heavily metered data plan, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;The build system is less strict on reproducibility than Tor Browser Nightly.  In particular, Electrum-NMC is built with the upstream Electrum reproducible build system, and BIND and DNSSEC-Trigger use official upstream binaries.  If you are concerned about these components, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;You must launch Electrum-NMC or Namecoin Core yourself and keep it running while Tor Browser is running; otherwise &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; resolution will fail.  If you want Electrum-NMC to automatically start when Tor Browser does, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;Some timing metadata (in particular, the date and time at which you exit Tor Browser) will be written to the Windows event log, which could be a privacy leak.  Timing metadata about Tor Browser usage has been used against alleged whistleblowers (e.g. alleged Vault 7 source Joshua Schulte) in the past, so if you have a strong requirement for disk nonpersistence, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;The TorButton patch for showing the underlying onion service in the circuit display is not included.  If you care about being able to easily view which onion service a &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domain is pointing to, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;The Firefox patch for adding &lt;code class=&quot;highlighter-rouge&quot;&gt;bit.onion&lt;/code&gt; to the eTLD list is not included.  This means that the address bar will default to search mode if you type a &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit.onion&lt;/code&gt; domain without a URL scheme (leading &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt;).  More importantly, it means that FPI (first-party isolation) will treat &lt;code class=&quot;highlighter-rouge&quot;&gt;bit.onion&lt;/code&gt; as an eTLD+1; as a result, all &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit.onion&lt;/code&gt; websites that you visit will be trivially linkable to each other.  To work around this privacy leak, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit.onion&lt;/code&gt; (but see the conflicting advice below), or you can limit yourself to one &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit.onion&lt;/code&gt; first-party domain at a time (use the New Identity button when you want to switch to another &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit.onion&lt;/code&gt; domain).  If you’re worried that you may not remember to do this, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;TLS is not mandated for &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains that point to an IP address.  This means that you cannot be confident that &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains are secure origins.  Tor Browser will correctly tell you that these origins are not secure; you should heed that warning.  To work around this, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit.onion&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; (but see the conflicting advice above), or you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt; URL scheme; either of these will guarantee a secure origin.  If you use HTTPS, you will need to verify the certificate chain yourself.  If you’re worried that you may accidentally use the &lt;code class=&quot;highlighter-rouge&quot;&gt;http://&lt;/code&gt; URL scheme with &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains, or if you’re worried that you may accidentally click through a TLS certificate dialog without checking the chain, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;Our QA team has reported occasional timeout errors when accessing &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains in Tor Browser.  We are investigating the cause.  If you require solidly reliable connectivity without timeouts, you may be better off with Tor Browser Nightly.&lt;/li&gt;
  &lt;li&gt;Our QA team has reported various breakage on Windows 7.  We are working on fixes, but this is not a high priority since Windows 7 is EOL.  If you require Windows 7 support, you may be better off waiting for us to fix that.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of the above caveats are easier to fix than others.  We expect some of these to be fixed very soon; others are longer-term efforts.  We reiterate that this is intended for power users who want to experiment with Namecoin in Tor Browser, so that their feedback can facilitate future efforts to get these features added to Tor Browser.  As such, we very much appreciate feedback so we can improve this functionality.&lt;/p&gt;

&lt;p&gt;Full changelog of what’s new since v0.2.2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;certinject
    &lt;ul&gt;
      &lt;li&gt;Add dexlogconfig support.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Add –capi.watch flag (paves the way for better sandboxing).  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;dexlogconfig
    &lt;ul&gt;
      &lt;li&gt;Support custom Windows event log source name.  Patch by Jeremy Rand; code review by Hugo Landau.&lt;/li&gt;
      &lt;li&gt;Clarify help text.  Reported by Jeremy Rand; patch by Hugo Landau.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;easyconfig
    &lt;ul&gt;
      &lt;li&gt;Support durations.  Reported by Jeremy Rand; patch by Hugo Landau.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Encaya
    &lt;ul&gt;
      &lt;li&gt;Add README.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Clarify license as GPLv3+.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ncdns
    &lt;ul&gt;
      &lt;li&gt;Use new certinject package.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Remove Layer-1 TLS support (100% of Namecoin domain owners moved to Layer-2 by now).  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ncprop279
    &lt;ul&gt;
      &lt;li&gt;Documentation: add sample config file.  Patch by redfish; code review by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;StemNS
    &lt;ul&gt;
      &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;StreamStatus.CONTROLLER_WAIT&lt;/code&gt; when available.  Patches by Jeremy Rand and Lola Dam.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;tlsrestrictnss
    &lt;ul&gt;
      &lt;li&gt;Fix compatibility with ncprop279.  Patch by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;x509-compressed
    &lt;ul&gt;
      &lt;li&gt;Fix GOROOT paths containing a space.  Patch by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows installer
    &lt;ul&gt;
      &lt;li&gt;Configure Tor Browser.  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Remove Layer-1 TLS support (100% of Namecoin domain owners moved to Layer-2 by now).  Patch by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patch by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build system
    &lt;ul&gt;
      &lt;li&gt;Add coredns-utils project, by Miek Gieben, Steve Winslow, and Andrew Heberle.&lt;/li&gt;
      &lt;li&gt;Add python-windows project.  Patches by Yanmaani and Jeremy Rand; code review by Nicolas Vigier.&lt;/li&gt;
      &lt;li&gt;Add winsvcwrap project, by Hugo Landau.&lt;/li&gt;
      &lt;li&gt;Bump BIND to v9.16.28.&lt;/li&gt;
      &lt;li&gt;Bump Electrum-NMC to v4.0.0b0.&lt;/li&gt;
      &lt;li&gt;Bump godns to v1.1.48.&lt;/li&gt;
      &lt;li&gt;Bump gointernal to v1.8.1.&lt;/li&gt;
      &lt;li&gt;Bump gopkcs11 to v1.1.1.&lt;/li&gt;
      &lt;li&gt;Bump gotoml to v1.1.0.&lt;/li&gt;
      &lt;li&gt;Bump gounits.&lt;/li&gt;
      &lt;li&gt;Bump tor-browser-build to v11.5a11.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  Patches by Jeremy Rand.&lt;/li&gt;
      &lt;li&gt;Improve Cirrus CI integration, as we continue to incubate RBM Cirrus support in preparation to send upstream to Tor.  Patches by Jeremy Rand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can download it at the &lt;a href=&quot;/download/#ncdns&quot;&gt;Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/05/27/ncdns-v0.3-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/05/27/ncdns-v0.3-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
  </channel>
</rss>
