<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>https://www.namecoin.org/</link>
    <atom:link href="https://www.namecoin.org/feed.rss" rel="self" type="application/rss+xml" />
    <language>en</language>
    <pubDate>Thu, 23 Feb 2023 06:04:06 +0000</pubDate>
    <lastBuildDate>Thu, 23 Feb 2023 06:04:06 +0000</lastBuildDate>
    <generator>Jekyll</generator>
    <image>
      <url>https://www.namecoin.org/images/logo.png</url>
      <title>Namecoin</title>
      <link>https://www.namecoin.org/</link>
      <width>134</width>
      <height>25</height>
    </image>
    
      <item>
        <title>SOCKSification: Outreachy Internship Progress</title>
        <description>&lt;p&gt;SOCKSification refers to the process of rerouting network traffic from an application via a SOCKS proxy server. This method is frequently used for security, anonymity, and circumventing network constraints. There are numerous techniques for SOCKSification, but in this article, we will focus on two main approaches that were considered.&lt;/p&gt;

&lt;p&gt;The first method includes intercepting the application’s connect and send system calls. When an application wants to connect to a remote server, it performs a connect system call with the target IP address and port specified. Following that, the send system call is used to transfer data through the established connection.&lt;/p&gt;

&lt;p&gt;With this method, we intercept the connect syscall and change the target IP address and port to those of the SOCKS proxy server. Then we intercept the send syscall which will contain a pointer (in tracee memory space) to the buffer that the application wants to send. We can prepend a SOCKS handshake to that buffer.  While this method can accomplish SOCKSification, it necessitates changing the tracee’s memory, which is not memory safe and might cause security problems.&lt;/p&gt;

&lt;p&gt;The second method, which is safer, includes utilizing the pidfd getfd capability, which was added to Linux v5.6, to duplicate the file descriptor of the established connection. When an application connects, the connect syscall returns a file descriptor, which may be used to transmit and receive data through the connection. We can replicate the file descriptor from the tracee to the tracer using the pidfd getfd functionality without having to touch the tracee’s memory.&lt;/p&gt;

&lt;p&gt;To SOCKSify the program, we intercept the connect syscall and change the target IP address and port to those of the SOCKS proxy server. The exit of the connect syscall, which returns the file descriptor of the established socket, is then intercepted. Using pidfd getfd, we copy this file descriptor to the tracer and execute a SOCKS5 handshake with the tracer’s socket. After the handshake, we resume the tracee, and all future network traffic gets SOCKSified.&lt;/p&gt;

&lt;p&gt;SOCKSification occurs in the function &lt;a href=&quot;https://github.com/robertmin1/heteronculous-horklump/blob/test-3/main.go#L412&quot;&gt;Socksify.&lt;/a&gt; This function allows an application running on a Linux system to use the SOCKS5 protocol to route network traffic through a proxy server.&lt;/p&gt;

&lt;p&gt;The function begins by checking whether the “one circuit” configuration option is set. If not, it initializes a set of authentication data consisting of 10 SOCKS user+pass pairs. Each connection is then assigned to a randomly selected slot from those 10. This is important in order to prevent vulnerability to a Sybil attack. Applications that connect to a P2P network (such as the Bitcoin network) may need to avoid using the same Tor circuit for all connections. Otherwise, a malicious Tor exit relay can block the application’s view of the network. Furthermore, using a different Tor circuit for each connection can also be helpful for things like download managers, as it avoids slowdowns caused by an unlucky slow Tor circuit.&lt;/p&gt;

&lt;p&gt;The function then reads the IP address and port number of the address we’re diverting from exit_addr, a thread-safe map. The address for each process that requires the SOCKS5 proxy is saved in the map.&lt;/p&gt;

&lt;p&gt;The function then opens the file descriptor associated with the program’s network connection. With the os.NewFile function, the file descriptor is utilized to construct a new file object. The net.FileConn function is then called on the file object to generate a net.Conn object. This enables the application to communicate with its network connection using the standard net package rather than the lower-level system calls that were used to establish the connection.&lt;/p&gt;

&lt;p&gt;The NewClient function is called, as well as the client’s Dial method. This creates a new client containing details such as authentication credentials and timeout values. The Dial method is then called, which carries out the redirecting. To listen to an existing net.Conn , we are currently utilizing a customized version of SOCKS5.&lt;/p&gt;

&lt;h3 id=&quot;relevant-links&quot;&gt;Relevant Links&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/txthinking/socks5&quot;&gt;SOCKS5 Repository&lt;/a&gt; We are planning to contribute the changes to the main SOCKS5 repository (Allowing the Dial Function to listen to an existing net.Conn file)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/namecoin/heteronculous-horklump&quot;&gt;Heteronculous-horklump Repository&lt;/a&gt;: The main codebase.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/robertmin1/heteronculous-horklump&quot;&gt;Temporary Heteronculous-horklump Repository&lt;/a&gt;: Contains the SOCKSification work in progress, which will be soon be merged upstream.&lt;/p&gt;

&lt;p&gt;This work was funded by &lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt; under the Tor Project umbrella.&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2023/02/23/socksification-outreachy-internship.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2023/02/23/socksification-outreachy-internship.html</guid>
        <dc:creator>Robert Nganga</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Outreachy Internship Progress</title>
        <description>&lt;p&gt;Greetings! I wanted to provide an overall update on the project’s progress. We have successfully implemented the ability to detect the IP address and port that socket system calls are sending data to, as well as the capability to block system calls that are sending data to an IP address and port that is not the desired proxy. Additionally, we have added an option to kill the application if a proxy leak occurs, which is useful for manual QA testing, and an option to allow proxy leaks but log any that occur, which is useful for automated testing of applications. Furthermore, we have included the capability to use the environment variables that Tor Browser uses, such as TOR_SOCKS_PORT, to determine the desired proxy.&lt;/p&gt;

&lt;p&gt;Lastly, we are currently in the process of implementing SOCKSification, which involves intercepting the connect syscall’s entry point, modifying the destination IP/Port, and capturing the established socket’s file descriptor through the exit of the connect syscall. A SOCKS5 handshake is then performed on the file descriptor. Afterwards, socks authentication enforcement and support of UDP proxies will be implemented. Socks authentication enforcement will detect if the tracee is using SOCKS without an appropriate username/password (stream isolation leak)&lt;/p&gt;

&lt;p&gt;The program instructions are manipulated using flags through &lt;a href=&quot;https://github.com/hlandau/easyconfig/tree/v1.0.18&quot;&gt;easyconfig&lt;/a&gt; which enables easy manipulation of arguments. Logging is done using &lt;a href=&quot;https://github.com/hlandau/xlog&quot;&gt;xlog&lt;/a&gt; which provides different options for logging. &lt;a href=&quot;https://github.com/u-root/u-root/tree/v0.10.0/pkg/strace&quot;&gt;U-root&lt;/a&gt; was preferred for tracing since it is easier to use.&lt;/p&gt;

&lt;p&gt;Suggestions are much welcomed! &lt;a href=&quot;https://github.com/namecoin/heteronculous-horklump&quot;&gt;Project Repository&lt;/a&gt; &amp;amp; &lt;a href=&quot;/2022/11/29/introducing-intern-robert-nganga.html&quot;&gt;Project Summary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This work was funded by &lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt; under the Tor Project umbrella.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2023/01/29/outreachy-internship-update.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2023/01/29/outreachy-internship-update.html</guid>
        <dc:creator>Robert Nganga</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Internship Progress</title>
        <description>&lt;p&gt;Greetings! I completed the initial tasks for the internship during the first week, where I utilized and experimented with the &lt;a href=&quot;https://pkg.go.dev/github.com/u-root/u-root/pkg/strace&quot;&gt;u-root strace package.&lt;/a&gt; The first tasks were to launch a program using ptrace and detect socket system calls. The first task was straightforward, requiring only the usage of the &lt;a href=&quot;https://github.com/u-root/u-root/blob/v0.10.0/pkg/strace/tracer.go#L156&quot;&gt;Trace Function.&lt;/a&gt; For the latter, it included utilizing a map to determine if the system call is a socket syscall and then informing the user if it is.&lt;/p&gt;

&lt;p&gt;Later, I worked on the main tasks, which included determining the IP address and port on which socket system calls send data. I did this by first filtering out syscalls that initiate a socket connection, then sending the syscall through the &lt;a href=&quot;https://pkg.go.dev/github.com/u-root/u-root/pkg/strace#SysCallEnter&quot;&gt;SysCallEnter function.&lt;/a&gt; This returns a string containing the Address and Port, which we then extract using string slicing. Better methods will be developed to replace string slicing.&lt;/p&gt;

&lt;p&gt;While resolving some of the &lt;a href=&quot;https://github.com/namecoin/heteronculous-horklump/issues&quot;&gt;issues&lt;/a&gt;, I am now working on blocking system calls that transfer data to an IP address+port that is not the targeted proxy.&lt;/p&gt;

&lt;p&gt;This work was funded by Outreachy under the Tor Project umbrella.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Publishing of this post was delayed by infrastructure issues on Namecoin Project’s end; we apologize for the delay, which was not due to any fault of Robert.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2023/01/10/week-one-of-internship-robert-nganga.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2023/01/10/week-one-of-internship-robert-nganga.html</guid>
        <dc:creator>Robert Nganga</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Outreachy Blog #1: Introduce Yourself</title>
        <description>&lt;p&gt;Hello! My name is Robert, an Outreachy Intern. I spend most of my days gaming, coding and learning. I’ve been very interested in open-source projects, and two months after contributing to Namecoin, I started my internship. For the two months, the experience has been very enjoyable and interesting.&lt;/p&gt;

&lt;h2 id=&quot;my-core-values&quot;&gt;My Core Values&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Integrity: I believe in being honest and transparent in all my actions and decisions.&lt;/li&gt;
  &lt;li&gt;Innovation: I value creativity and constantly strive to find new and better ways of doing things.&lt;/li&gt;
  &lt;li&gt;Collaboration: I believe in working together with others to achieve common goals and create successful outcomes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-motivated-me-to-apply-to-outreachy&quot;&gt;What motivated me to apply to Outreachy&lt;/h2&gt;

&lt;p&gt;Several factors influenced my decision to apply to Outreachy. To begin, I am really interested in open source and want to obtain practical experience in this subject. Outreachy is a fantastic chance for people like me to contribute to open source projects while learning from experienced mentors.&lt;/p&gt;

&lt;p&gt;Second, I am enthusiastic in learning new things and honing my talents. Outreachy provides a structured internship program in which I may work on difficult projects while developing my technical and professional abilities.&lt;/p&gt;

&lt;p&gt;Finally, I feel Outreachy will give me with beneficial networking chances. I am looking forward to meeting other Outreachy participants and mentors and developing contacts that will benefit my career.&lt;/p&gt;

&lt;p&gt;This work was funded by Outreachy under the Tor Project umbrella.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://medium.com/@mindo.robert1/outreachy-blog-1-introduce-yourself-ae45357227&quot;&gt;Cross-posted from Medium.&lt;/a&gt;  The cross-posting was delayed by infrastructure issues on Namecoin Project’s end; we apologize for the delay, which was not due to any fault of Robert.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2023/01/09/outreachy-blog-1-introduce-yourself.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2023/01/09/outreachy-blog-1-introduce-yourself.html</guid>
        <dc:creator>Robert Nganga</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncp11 Nightly Builds Now Available</title>
        <description>&lt;p&gt;More work has been done with pkcs11mod and ncp11.&lt;/p&gt;

&lt;p&gt;First off, a bunch of additional missing functions have beeen added to p11mod.  A lot of these functions came from Oureachy applicants, since I used pkcs11mod as a contribution task repo for Outreachy.  Some of these previously-missing functions may be useful to smartcard use cases, so if you’ve been holding off on touching p11mod for a smartcard project, it may be time to look again.&lt;/p&gt;

&lt;p&gt;Next, I discussed the p11 API with Miek, specifically some shortcomings that make it hard for Namecoin to emulate the p11 API.  We’ve agreed that Namecoin will maintain a fork with API changes for about 6 months, and then I’ll submit the changes upstream once I’m satisfied that it works in production.  The changes have a Concept ACK.  p11mod has beeen updated to use the fork.&lt;/p&gt;

&lt;p&gt;The p11trustmod library is fully working now, although there are no integration tests for it yet.  But how did I test it, then?  The ncp11 codebase has also now been rewritten to use p11trustmod!  Currently it only does positive overrides, and I’ve only tested it with Firefox on GNU/Linux, but it works.  For reference, the old ncp11 was 1351 lines of code; the rewrite is only 228.  Not a bad result; seems the abstraction work done on p11mod and p11trustmod was well-worth it.  There is currently a quirk where ncp11 has to mark intermediate CA’s as trusted; only marking the Namecoin root CA as trusted does not make the certs pass validation.  I intend to debug this later, but trusting intermediate CA’s is harmless here.&lt;/p&gt;

&lt;p&gt;For anyone who wants to play around with this, ncp11 Nightly builds are now available on the Beta Downloads page.  You’ll also need a Nightly version of Encaya, as a bunch of bugfixes were needed on the Encaya side.  Installation instructions don’t exist yet, but if you know how to install Encaya, and you know how to install PKCS#11 modules into Firefox (e.g. for smartcards), you should be able to figure it out.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/11/30/ncp11-nightly-builds.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/11/30/ncp11-nightly-builds.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Introducing Namecoin's New Intern, Robert Nganga</title>
        <description>&lt;p&gt;&lt;em&gt;Hey everyone, Jeremy here.  We’re happy to announce that Namecoin has accepted an intern via &lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt; (we are participating under the Tor Project umbrella).  Robert Nganga will be funded to work on a new project that I think both the Namecoin and Tor communities will find exciting.  Huge thanks are due to Tor Project for taking us under their wing for this internship.  I don’t want to steal his thunder any more than I already have, so I’m going to turn over the remainder of this post to Robert to tell you about his project – please join us in welcoming him to the Namecoin community!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Greetings, I am pleased to join the Namecoin team as a &lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt; Intern after two months of contributing to Namecoin. I’ll be working on developing a tool that can identify and prevent proxy leaks. I’ll be using ptrace to intercept network socket system calls in a Tor-using application and block them if they constitute a proxy leak. Given the substantial threats posed by proxy leaks, the technology will improve security and privacy while resolving current problems with the technologies already in use. For instance, torsocks, an LD_PRELOAD-based program that intercepts calls to the network functions of the standard C library, is incompatible with statically linked software, such as the majority of Golang-written applications (Given that Golang is frequently used for security-conscious applications, this is particularly problematic) Transparent proxy tools like Whonix can result in usage of multiple applications being traceable to the same user, since you can’t easily enforce stream isolation (degrading anonymity into much weaker pseudonymity)&lt;/p&gt;

&lt;p&gt;Furthermore, prior Namecoin development such as the Namecoin support in Tor Browser, was for a period slowed down by manual audits for proxy leaks. In the future, the tool will prevent such bottlenecks. This ptrace approach has a &lt;a href=&quot;https://github.com/JeremyRand/heteronculous&quot;&gt;crude proof-of-concept&lt;/a&gt; in Bash, which was developed by the Namecoin team.&lt;/p&gt;

&lt;p&gt;The project will be mentored by Jeremy Rand, who will also provide any support required.&lt;/p&gt;

&lt;p&gt;This work was funded by Outreachy under the Tor Project umbrella.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/11/29/introducing-intern-robert-nganga.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/11/29/introducing-intern-robert-nganga.html</guid>
        <dc:creator>Jeremy Rand and Robert Nganga</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Anonymity Improvements in Electrum-NMC v4.0.6</title>
        <description>&lt;p&gt;Electrum-NMC v4.0.6 (soon to be released) brings some long-awaited anonymity improvements.&lt;/p&gt;

&lt;h2 id=&quot;automatic-coin-control-for-names&quot;&gt;Automatic Coin Control for Names&lt;/h2&gt;

&lt;p&gt;I first described this feature in &lt;a href=&quot;/2018/03/19/34c3-slides-videos.html&quot;&gt;my 34C3 presentation on anonymity&lt;/a&gt;.  There’s not much else to say here; my presentation covers how the feature works and why that design was chosen.  The delay between 34C3 and implementation is due to the preferences expressed by the Tor developers, hopefully it was worth the wait.&lt;/p&gt;

&lt;h2 id=&quot;whonixtails-support&quot;&gt;Whonix/Tails Support&lt;/h2&gt;

&lt;p&gt;Various anonymous OS’s such as &lt;a href=&quot;https://www.whonix.org/&quot;&gt;Whonix&lt;/a&gt; and &lt;a href=&quot;https://tails.boum.org/&quot;&gt;Tails&lt;/a&gt; come with Tor preconfigured.  A major component of how these OS’s handle preconfiguration is via environment variables that tell Tor-friendly applications such as Tor Browser and OnionShare where Tor’s SOCKS port is.  Electrum-NMC now supports these environment variables, so it will automatically use the correct SOCKS port (with stream isolation) on Whonix and Tails instead of relying on transproxying.&lt;/p&gt;

&lt;p&gt;As part of this work, I engaged with the Tor Applications Team on improving the specifications for Tor-friendly applications.  This work has been slower than hoped, but some major improvements have already worked their way through the review process, and I expect to deliver more improvements to these specifications in the coming months.&lt;/p&gt;

&lt;h2 id=&quot;apparmor-sandboxing-support&quot;&gt;AppArmor Sandboxing Support&lt;/h2&gt;

&lt;p&gt;Besides environment variables, another trick that Whonix uses to Torify applications is usage of AppArmor to blacklist traffic that doesn’t go through Tor’s SOCKS port.  This works by having Tor listen on a Unix domain socket, and then blacklisting IP sockets via AppArmor; standard filesystem ACL’s take care of the rest.  Electrum-NMC now supports connecting to a SOCKS proxy via a Unix domain socket, so it should now be possible to enforce Torification via AppArmor.&lt;/p&gt;

&lt;p&gt;So far, no one has written such an AppArmor policy for Electrum-NMC; this will be the subject of future work.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s NGI0 Discovery Fund.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Oct 2022 02:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/10/28/anonymity-improvements-in-electrum-nmc-v4.0.6.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/10/28/anonymity-improvements-in-electrum-nmc-v4.0.6.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Changes to name_show in Electrum-NMC Protocol v1.4.3</title>
        <description>&lt;p&gt;In my 36C3 presentation (seems so long ago…), I mentioned some future changes I wanted to make to the Electrum-NMC protocol.  Some of these changes have recently been implemented:&lt;/p&gt;

&lt;h2 id=&quot;verifying-unconfirmed-transactions&quot;&gt;Verifying Unconfirmed Transactions&lt;/h2&gt;

&lt;p&gt;For security reasons, Electrum-NMC has historically required 12 confirmations before it accepts a name transaction.  Unfortunately, waiting 2 hours (on average) for a name update to take effect is not great UX, and also introduces its own security issues (e.g. it means that TLS revocations are unnecessarily delayed).  When evaluating security of name transactions, there are two different attacks that we need to consider:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hijacking attacks&lt;/li&gt;
  &lt;li&gt;Double-spend attacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hijacking attacks occur when a malicious miner mines a Namecoin block with an invalid scriptSig, which (if accepted) would allow them to hijack an arbitrary name without any participation from the name owner.  In contrast, double-spend attacks occur when a malicious name owner signs two different name updates with the same input, which (if accepted) would allow one of those name updates to be accepted even though only the other update is part of the longest blockchain.&lt;/p&gt;

&lt;p&gt;In practice, while any name could be targeted by a hijacking attack, only names that have recently been transferred to a new owner can be targeted by a double-spend attack.  (Double-spending a name that you still own doesn’t really confer any benefit.)  Since the vast majority of names have not been transferred in the last 12 blocks, if we can prevent hijacking attacks, we can accept the risk of double-spend attacks, since the latter can easily be mitigated by waiting 12 blocks from receiving a name transfer before using that name for critical purposes.&lt;/p&gt;

&lt;p&gt;Can we do this?  Ryan Castellucci proposed many years ago that we could verify the scriptSigs of recent name updates, chaining them back to a previous name update that has sufficient DMMS confirmation (i.e. 12 blocks).  I have now implemented this in Electrum-NMC Protocol v1.4.3; Electrum-NMC will retrieve recent updates to a name (from 1 to 11 confirmations) and verify scriptSigs to chain them back to the most recent update with at least 12 confirmations.  The result is that name updates now take effect in 1 block (~10 minutes) instead of 12 blocks (~2 hours).&lt;/p&gt;

&lt;h2 id=&quot;checkpoint-verification&quot;&gt;Checkpoint Verification&lt;/h2&gt;

&lt;p&gt;One of the inherent problems with the SPV threat model is that it only verifies DMMS signatures (attached to blocks), not scriptSigs (attached to transactions).  This means that an attacker with a majority of hashrate can mine invalid blocks (e.g. that hijack names) that will appear valid to SPV clients.  Full nodes are, of course, immune to this, since they check scriptSigs on all transactions.&lt;/p&gt;

&lt;p&gt;Unfortunately, full nodes have a much longer IBD duration, and also are much more resource-intensive.  Can an SPV client verify scriptSigs on the transactions it cares about?  In Bitcoinland, this is not really feasible, because the fungible nature of bitcoins means that you’d have to verify every transitive input to every transaction you care about, which would probably be exponential with respect to the verification depth.  However, in Namecoinland, we don’t have this problem.  The nonfungible nature of Namecoin names means that the number of transitive inputs grows linearly, not exponentially.&lt;/p&gt;

&lt;p&gt;Thus, we can reuse the scriptSig chaining trick to chain the latest confirmed name update back to a previous update that was committed to in the checkpoint (if such an update exists).  This means that in order to hijack a name that existed at the checkpoint height, an attacker would need to compromise both a majority of hashrate &lt;strong&gt;and&lt;/strong&gt; the full node used to generate the checkpoint.  I’ve implemented this in Electrum-NMC Protocol v1.4.3 as well; Electrum-NMC will retrieve all updates for a name going back to just before the checkpoint height, and verify the chain of scriptSigs.&lt;/p&gt;

&lt;h2 id=&quot;one-round-trip&quot;&gt;One Round Trip&lt;/h2&gt;

&lt;p&gt;Electrum-NMC’s protocol has always been inefficient for &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt;, because it needed to issue 4 commands to the ElectrumX server per name:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get the latest name update txid.&lt;/li&gt;
  &lt;li&gt;Get the transaction preimage.&lt;/li&gt;
  &lt;li&gt;Get the Merkle proof tying the txid to the block header.&lt;/li&gt;
  &lt;li&gt;Get the Merkle proof tying the block header to the checkpoint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The latter 3 of those could be issued in parallel, but that still means a best case of 2 round trips per lookup (and the best case was not always achieved in practice).  Especially over Tor, this extra latency is a major UX problem.  This inefficiency was a result of the upstream Electrum protocol for Bitcoin not being designed for Namecoin’s use cases.  As of Electrum-NMC Protocol v1.4.3, there is a dedicated command for &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt;, which combines the above 4 commands into 1, thus cutting down the lookup time to a single round trip.  The above scriptSig-related features are also integrated into the dedicated command, so retrieving the extra transactions does not incur any extra round trips.&lt;/p&gt;

&lt;h2 id=&quot;future-optimizations&quot;&gt;Future Optimizations&lt;/h2&gt;

&lt;p&gt;Electrum-NMC Protocol v1.4.3 also allows the ElectrumX server to send hint data for names other than the requested one.  For example, if &lt;code class=&quot;highlighter-rouge&quot;&gt;d/wikileaks&lt;/code&gt; imports from &lt;code class=&quot;highlighter-rouge&quot;&gt;dd/wikileaks&lt;/code&gt;, the server might return data for both &lt;code class=&quot;highlighter-rouge&quot;&gt;d/wikileaks&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dd/wikileaks&lt;/code&gt; when the client requests the former, thus saving a round trip if the client would have asked for the latter name next.  At the moment, the hint data is left unpopulated, but we should be able to start populating it in the future without needing another protocol change.&lt;/p&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;Electrum-NMC and upstream ElectrumX have both merged Protocol v1.4.3, so we’re now waiting for server operators to update.  Once we’ve determined that enough server operators have updated, we expect to flip a switch in the Electrum-NMC source code that enables the new protocol features.  This functionality should also work out of the box in other ElectrumX-supported coins that use a name index, which in practice means Xaya.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s NGI0 Discovery Fund.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/10/28/name-show-in-electrum-nmc-protocol-v1.4.3.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/10/28/name-show-in-electrum-nmc-protocol-v1.4.3.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>winsvcwrap: Open source replacement for SRVANY in Golang</title>
        <description>&lt;p&gt;Unlike *nix platforms, system services on Windows must be specifically designed
to run as services, and written against the Win32 Service APIs. This creates a
problem when it is desired to run a program as a Windows system service which
was not designed to function in this role.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SRVANY.EXE&lt;/code&gt; is an executable distributed by Microsoft in the Windows NT 4.0
Resource Kit, which can be used to adapt any program into a system service.
&lt;code class=&quot;highlighter-rouge&quot;&gt;SRVANY.EXE&lt;/code&gt; is configured as the system service, and it spawns and supervises
the target process in turn. Thus, it forms an adapter between the Windows
service manager and arbitrary programs. However, &lt;code class=&quot;highlighter-rouge&quot;&gt;SRVANY&lt;/code&gt; is a proprietary
binary for which source code is not available, and is no longer even
distributed by Microsoft.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hlandau/winsvcwrap&quot;&gt;winsvcwrap&lt;/a&gt; is a simple open source Go
program to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;SRVANY&lt;/code&gt; and provide equivalent functionality, and is now
used by the Namecoin project to power its Windows installer bundle. This
enables the Namecoin project to avoid depending on an unmaintained proprietary
component. It can be used by anyone seeking to run arbitrary Windows programs
as Windows system services. Since it is written in Go, it is memory-safe
(unlike C/C++) and bootstrappable (unlike Rust).&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/10/06/winsvcwrap-open-source-replacement-for-srvany.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/10/06/winsvcwrap-open-source-replacement-for-srvany.html</guid>
        <dc:creator>Hugo Landau</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Hacktoberfest 2022</title>
        <description>&lt;p&gt;Namecoin is participating in &lt;a href=&quot;https://hacktoberfest.com/&quot;&gt;Hacktoberfest 2022&lt;/a&gt;.  If you’re interested in contributing to Namecoin, Hacktoberfest is a great chance to start (and maybe win a t-shirt).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/search?q=org%3Anamecoin+label%3Ahacktoberfest&amp;amp;state=open&amp;amp;type=Issues&quot;&gt;The list of Hacktoberfest issues for Namecoin is here.&lt;/a&gt;  Of course, we welcome other PR’s as well.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/10/05/hacktoberfest-2022.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/10/05/hacktoberfest-2022.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
  </channel>
</rss>
