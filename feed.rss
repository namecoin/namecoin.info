<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>https://www.namecoin.org/</link>
    <atom:link href="https://www.namecoin.org/feed.rss" rel="self" type="application/rss+xml" />
    <language>en</language>
    <pubDate>Thu, 07 Apr 2022 06:52:14 +0000</pubDate>
    <lastBuildDate>Thu, 07 Apr 2022 06:52:14 +0000</lastBuildDate>
    <generator>Jekyll</generator>
    <image>
      <url>https://www.namecoin.org/images/logo.png</url>
      <title>Namecoin</title>
      <link>https://www.namecoin.org/</link>
      <width>134</width>
      <height>25</height>
    </image>
    
      <item>
        <title>Namecoin Receives 30k EUR in Additional Funding from NLnet Foundation’s Internet Hardening Fund and Netherlands Ministry of Economic Affairs and Climate Policy</title>
        <description>&lt;p&gt;We’re happy to announce that Namecoin is receiving 30,000 EUR (roughly 33,306 USD) in additional funding from &lt;a href=&quot;https://nlnet.nl/&quot;&gt;NLnet Foundation&lt;/a&gt;’s Internet Hardening Fund.  If you’re unfamiliar with NLnet, you might want to read &lt;a href=&quot;https://nlnet.nl/foundation/&quot;&gt;about NLnet Foundation&lt;/a&gt;, or just take a look at &lt;a href=&quot;https://nlnet.nl/thema/index.html&quot;&gt;the projects they’ve funded over the years&lt;/a&gt; (you might see some familiar names).  The &lt;a href=&quot;https://nlnet.nl/internethardening/&quot;&gt;Internet Hardening Fund&lt;/a&gt; is managed by NLnet and funded by the &lt;a href=&quot;https://www.rijksoverheid.nl/ministeries/ministerie-van-economische-zaken-en-klimaat&quot;&gt;Netherlands Ministry of Economic Affairs and Climate Policy&lt;/a&gt;.  Unlike our &lt;a href=&quot;/2021/04/30/funding-from-nlnet.html&quot;&gt;already-active funding&lt;/a&gt; from NLnet’s NGI0 Discovery Fund, which is focused on Namecoin Core and Electrum-NMC, this new funding is focused on TLS use cases.&lt;/p&gt;

&lt;p&gt;We will use this funding to work on the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Namecoin interoperability with TLS implementations that use AIA.  In addition to reducing attack surface of Namecoin TLS on Windows, this lays the groundwork for Namecoin TLS support on Android/Linux, macOS, and iOS.&lt;/li&gt;
  &lt;li&gt;Refactoring Namecoin TLS PKCS#11 interoperability to use higher-level API’s that are more straightforward to audit.  In addition to improving security and reliability of Namecoin TLS on Firefox (all OS’s) and GNU/Linux (most browsers), this lays the groundwork for things like decentralized TLS with &lt;code class=&quot;highlighter-rouge&quot;&gt;.onion&lt;/code&gt; domains (in collaboration with the Tor developers), and is likely to benefit 3rd-party developers who wish to create PKCS#11 modules in Go (e.g. for HSM or smart card use cases).&lt;/li&gt;
  &lt;li&gt;Adding imposed name constraint support to NSS’s TLS trust store (used by Firefox), similar to the existing functionality that exists in CryptoAPI (used by Windows) and GnuTLS (used by GNOME Web).  In addition to allowing us to simplify Namecoin’s TLS interoperability code considerably, this is likely to benefit system-wide trust policy projects such as sponsored by Red Hat.&lt;/li&gt;
  &lt;li&gt;Auditing TLS clients for name constraint bugs, using Netflix’s BetterTLS test suite.  This helps ensure that Namecoin’s security guarantees cannot be bypassed by exploiting bugs in 3rd-party applications.&lt;/li&gt;
  &lt;li&gt;Improved integration testing for Namecoin TLS PKCS#11 interoperability.  In addition to helping us review PR’s faster, this helps ensure that future changes in third-party applications/libraries don’t cause problems for Namecoin.&lt;/li&gt;
  &lt;li&gt;Windows installer for Namecoin TLS in Firefox and/or Tor Browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This work will principally be done by developers Aerth and Jeremy Rand (who is the author of this post).&lt;/p&gt;

&lt;p&gt;We’d like to thank the awesome people at NLnet Foundation for the continued vote of confidence, as well as the Netherlands government for recognizing that the economy and the climate require a hardened Internet.&lt;/p&gt;

&lt;p&gt;We’ll be posting updates regularly as development proceeds.  Due to delays in paperwork processing, some work covered by this funding has already taken place; for transparency, we have amended the relevant past news posts to clarify that they were funded by Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/03/07/namecoin-additional-funding-from-nlnet-internet-hardening-fund.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/03/07/namecoin-additional-funding-from-nlnet-internet-hardening-fund.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>The Namecoin Lab Leak (Part 2): How p11trustmod Vaccinates Against the Unmaintainable Code Omicron Variant</title>
        <description>&lt;p&gt;In a &lt;a href=&quot;/2021/07/10/lab-leak-p11mod.html&quot;&gt;previous post&lt;/a&gt;, I covered how splitting off p11mod from ncp11 improved code readability and auditability by using a higher-level API.  Jacob Hoffman-Andrews’s p11 API is certainly more high-level than Miek Gieben’s pkcs11 API, but I wasn’t satisfied.  Consider that most PKCS#11 usage in the wild involves encryption or signature algorithms that operate on public or private keys.  In contrast, PKCS#11 modules like Mozilla CKBI or Namecoin ncp11 are strictly using the PKCS#11 API as a read-only database API, and only for X.509 certificates [1] – public and private keys are nowhere to be found.  Given these limits on what usage Namecoin will need, we can construct a much higher-level (and much simpler) API than even the p11 API.&lt;/p&gt;

&lt;p&gt;For reference, here are the function prototypes of p11:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FindObjects finds any objects in the token matching the template.
func (s Session) FindObjects(template []*pkcs11.Attribute) ([]Object, error)

Attribute gets exactly one attribute from a PKCS#11 object, returning an error if the attribute is not found, or if multiple attributes are returned. On success, it will return the value of that attribute as a slice of bytes. For attributes not present (i.e. CKR_ATTRIBUTE_TYPE_INVALID), Attribute returns a nil slice and nil error.
func (o Object) Attribute(attributeType uint) ([]byte, error)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the p11 API is intentionally very generic; every object is an arbitrary mapping of attribute types (generic integers) to attribute values (generic binary data), and searching for objects requires constructing a template that looks about as generic as the object itself.  This necessarily involves a lot of boilerplate.  Here’s the higher-level API, which I call p11trustmod:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type CertificateData struct {
	Label string
	Certificate *x509.Certificate
	BuiltinPolicy bool
	TrustServerAuth uint
	TrustClientAuth uint
	TrustCodeSigning uint
	TrustEmailProtection uint
}

func (b Backend) QueryCertificate(cert *x509.Certificate) ([]*CertificateData, error)
func (b Backend) QuerySubject(subject *pkix.Name) ([]*CertificateData, error)
func (b Backend) QueryIssuerSerial(issuer *pkix.Name, serial *big.Int) ([]*CertificateData, error)
func (b Backend) QueryAll() ([]*CertificateData, error)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, this API matches the behavior of libraries like NSS, which query for certificates by only a few search keys: the certificate itself, the subject, the issuer and serial, and asking for all the certificates at once.  In ncp11, we extract the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domain from the subject or the issuer.  (If the entire certificate is searched for, the subject and issuer are both within the &lt;code class=&quot;highlighter-rouge&quot;&gt;x509.Certificate&lt;/code&gt; struct.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;QueryAll&lt;/code&gt; search method can’t be used to look up &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; certificates, but it &lt;em&gt;can&lt;/em&gt; be used to find the Namecoin root CA, which is sufficient.)  Here’s some of what p11trustmod is doing behind the scenes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;FindObjects&lt;/code&gt; function checks which attributes are in the search template, and calls &lt;code class=&quot;highlighter-rouge&quot;&gt;QueryCertificate&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySubject&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;QueryIssuerSerial&lt;/code&gt; as appropriate.  Thus, ncp11 won’t need to deal with processing attributes from the search template.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;FindObjects&lt;/code&gt; function always calls &lt;code class=&quot;highlighter-rouge&quot;&gt;QueryAll&lt;/code&gt; and appends those results.  This allows ncp11 to return certain objects such as the Namecoin root CA even if those objects aren’t being referenced by name [2].&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;FindObjects&lt;/code&gt; function filters all the query results to make sure it actually matches the search template.  This allows ncp11 to simply return whatever Namecoin says matches the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domain, without worrying about the search template.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Attribute&lt;/code&gt; function automatically fills in sane values for boilerplate attributes such as &lt;code class=&quot;highlighter-rouge&quot;&gt;CKA_TOKEN&lt;/code&gt; (always true), &lt;code class=&quot;highlighter-rouge&quot;&gt;CKA_PRIVATE&lt;/code&gt; (always false), &lt;code class=&quot;highlighter-rouge&quot;&gt;CKA_MODIFIABLE&lt;/code&gt; (always false), and &lt;code class=&quot;highlighter-rouge&quot;&gt;CKA_CERTIFICATE_TYPE&lt;/code&gt; (always &lt;code class=&quot;highlighter-rouge&quot;&gt;CKC_X_509&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Attribute&lt;/code&gt; function automatically extracts the subject, issuer, serial number, and hash from the certificate, so ncp11 can just return the certificate.&lt;/li&gt;
  &lt;li&gt;The backend (e.g. ncp11) can choose whether to supply trust bits, and if so, p11trustmod synthesizes trust bits objects for the Namecoin root CA from the &lt;code class=&quot;highlighter-rouge&quot;&gt;BuiltinPolicy&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TrustServerAuth&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TrustClientAuth&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TrustCodeSigning&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;TrustEmailProtection&lt;/code&gt; fields.  There are some tradeoffs here:
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;BuiltinPolicy&lt;/code&gt; trust bit causes Certificate Transparency errors in Chromium, but enforces better security (e.g. blacklisting obsolete crypto and enforcing key rotations) in Firefox.&lt;/li&gt;
      &lt;li&gt;Omitting all trust bits from ncp11 and putting the Namecoin root CA in the standard trust store instead allows ncp11 to run with improved sandboxing.  However, depending on which trust store implementation is used, this might preclude the security benefits of the &lt;code class=&quot;highlighter-rouge&quot;&gt;BuiltinPolicy&lt;/code&gt; trust bit.  p11-kit, which is used in Fedora and Arch, supports the &lt;code class=&quot;highlighter-rouge&quot;&gt;BuiltinPolicy&lt;/code&gt; trust bit.  Softoken, which is used in Debian, Windows, and macOS, does not.  Since Tor Browser does not have a mutable trust store (for fingerprinting reasons), this sandboxing is probably not possible in Tor Browser.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, all things considered, p11trustmod eliminates quite a lot of boilerplate code that ncp11 would have otherwise needed to mix in with the Namecoin-specific ncp11 code.  By proactively implementing this additional layer of abstraction between p11mod and ncp11, we reduce the risk of a second “Omicron lab leak” of insufficiently auditable code.  p11trustmod is nearly finished with implementation but still needs testing; once testing is complete, we can move on to the Namecoin-specific code in ncp11, which I expect to be quite simple since the complex things have been split out into p11mod/p11trustmod.&lt;/p&gt;

&lt;p&gt;In other p11mod news, p11mod now supports generating key pairs.  Thanks to OpenDNSSEC for facilitating this.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;

&lt;p&gt;[1] Technically this isn’t quite true.  In addition to X.509 certificates, there are a couple of other object classes that are used for setting the trust policy bits on the Namecoin root CA.  Those classes are only used by optional features, though.&lt;/p&gt;

&lt;p&gt;[2] There are a few ways this might happen.  NSS sometimes retrieves a list of all known CA’s, e.g. to display in the certificate GUI.  NSS also retrieves trust bits objects by searching for an object class or a certificate hash instead of a PKIX name or full certificate.&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/02/26/lab-leak-part-2-p11trustmod.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/02/26/lab-leak-part-2-p11trustmod.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Preventing Expiration Mishaps with Semi-Expiration</title>
        <description>&lt;p&gt;Forgetting to renew a Namecoin name on time is rather catastrophic: it means that anyone else can re-register it and then hold the name hostage.  In practice today, it is likely that such re-registrations will be done by Good Samaritan volunteers who are happy to donate the name back to you.  However, as per the cypherpunk philosophy of “don’t trust, verify”, it’s not desirable to rely on those Good Samaritans, since they constitute a trusted third party.  How can we improve this situation?&lt;/p&gt;

&lt;p&gt;Let’s start by observing two fundamental properties of expired names:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Expired names resolve as &lt;code class=&quot;highlighter-rouge&quot;&gt;NXDOMAIN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Expired names can be registered by anyone.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Astute readers will have noticed that these are, in principle, distinct properties.  Where are they enforced?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Policy layer&lt;/strong&gt;: Expired names resolve as &lt;code class=&quot;highlighter-rouge&quot;&gt;NXDOMAIN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Consensus layer&lt;/strong&gt;: Expired names can be registered by anyone.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And what are their respective impacts?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Temporary DoS&lt;/strong&gt;: Expired names resolve as &lt;code class=&quot;highlighter-rouge&quot;&gt;NXDOMAIN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Permanent hijacking&lt;/strong&gt;: Expired names can be registered by anyone.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So what happens if we make the following change?  We introduce a new state for names: &lt;em&gt;Semi-Expired&lt;/em&gt;.  Semi-expired names obey Property 1 but not Property 2.  Names semi-expire when they come within 4032 blocks (4 weeks) of expiration.  Does the situation improve?&lt;/p&gt;

&lt;p&gt;Let’s imagine that Alice forgets to renew her name before it semi-expires.  As a result, her name becomes unresolvable.  This causes her website to go down.  Some of Alice’s users notice this, and complain to her via email, social media, or some other out-of-band medium.  Alice then renews her name, which reverts the semi-expired state.  And this out-of-band process gives Alice 4 weeks to fix things before she is at risk of having her name stolen.  That certainly seems like an improvement.  And this is solely a policy change, not a consensus change, making it cheap to implement and deploy.&lt;/p&gt;

&lt;p&gt;I’ve now implemented this in Electrum-NMC.  The RPC interface adds fields for the “semi-expired” state, and the Manage Names GUI counts down to semi-expiration rather than expiration.&lt;/p&gt;

&lt;p&gt;Some additional observations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Semi-expiration will only help you as a name owner if you actually actively use your name.  It won’t help you if you hold an unused name for squatting purposes.  While I don’t think any of the Namecoin developers are opposed to additional anti-expiry mechanisms that work for squatters, I think it’s arguably a good thing that semi-expiration incentivizes active use of names.&lt;/li&gt;
  &lt;li&gt;Because semi-expiration decreases the effective duration of resolvability for names (this is a necessary consequence of implementing semi-expiration on the policy layer), it means that name owners will renew somewhat more often with respect to time.  Theoretically, this means that name owners will pay higher fees with respect to time, and that the blockchain will grow faster with respect to time.  In practice, the difference is likely to be negligible, and if it is detectable at all, it will be in the form of increased block reward (which indirectly improves blockchain hashrate) and decreased incentive to squat on names (which indirectly improves usefulness of the system).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Semi-expiration should be released in Electrum-NMC v4.0.0b1.  Namecoin Core will hopefully follow soon after.&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/02/18/preventing-expiration-mishaps-with-semi-expiration.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/02/18/preventing-expiration-mishaps-with-semi-expiration.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Go DNS Seeder Improvements</title>
        <description>&lt;p&gt;Any P2P network has to deal with initial peer discovery.  Bitcoin and Namecoin mostly solve this via &lt;em&gt;DNS seeds&lt;/em&gt;: special domain names that return a large number of IP addresses corresponding to Bitcoin/Namecoin nodes.  If you’ve used Namecoin Core, you’ve probably encountered the dreaded “no peers” symptom.  This is because, unfortunately, the primary DNS seeder implementation used by Bitcoin (by Pieter Wuille) is neither Freedom Software (it’s under an All Rights Reserved license, so Namecoin cannot legally use it) nor memory-safe (it’s in C++).  To help improve Namecoin peer discovery (and maybe Bitcoin too), I’ve submitted the following improvements to Lyndsay Roger’s Go-based DNS seeder (which is both Freedom Software and memory-safe):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Run without root privileges via &lt;code class=&quot;highlighter-rouge&quot;&gt;setcap&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;This is a good alternative to &lt;code class=&quot;highlighter-rouge&quot;&gt;iptables&lt;/code&gt;, which was already supported.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use multiple initial IP’s.
    &lt;ul&gt;
      &lt;li&gt;Helpful if there are no operational DNS seeds when you start a crawl.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Receive multiple peers per crawl.
    &lt;ul&gt;
      &lt;li&gt;Fixes a Bitcoin protocol implementation bug that caused crawls to stall.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Support Bitcoin Core’s &lt;code class=&quot;highlighter-rouge&quot;&gt;seeds.txt&lt;/code&gt; API.
    &lt;ul&gt;
      &lt;li&gt;Allows us to export the seed list into Namecoin Core, so that even if the DNS seed is offline, Namecoin Core can still find peers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Route TCP traffic over SOCKS5 proxy.
    &lt;ul&gt;
      &lt;li&gt;Prerequisite for crawling onion-service peers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lyndsay has merged all of these except for the SOCKS5 patch, which is waiting on some review from the Tor developers.  Huge thanks to Lyndsay for reviewing and merging the patches – I’m hoping that these patches will result in much better peer discovery for Namecoin Core (which has always been a pain point for us).&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/01/29/go-dns-seeder-improvements.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/01/29/go-dns-seeder-improvements.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>p11mod Now Supports Signatures</title>
        <description>&lt;p&gt;In a &lt;a href=&quot;/2021/07/10/lab-leak-p11mod.html&quot;&gt;previous post&lt;/a&gt;, I covered p11mod and how it improves the auditability of Namecoin’s TLS interoperability with NSS and GnuTLS.  Recently, I’ve expanded the subset of the PKCS#11 implementation that p11mod covers; p11mod can now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Import certificates, public keys, and private keys.&lt;/li&gt;
  &lt;li&gt;Delete certificates, public keys, and private keys.&lt;/li&gt;
  &lt;li&gt;Sign messages with private keys.&lt;/li&gt;
  &lt;li&gt;Verify signatures with public keys.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;None of these operations are required by Namecoin, but they do make p11mod useful for a wider variety of use cases, which helps attract more users and developers.  This new functionality was made possible by integration tests from OpenDNSSEC.  Thanks to the OpenDNSSEC developers for that!&lt;/p&gt;

&lt;p&gt;I also fixed a PKCS#11 specification compliance bug in p11mod (stupid off-by-one error in object handle validation), which was surfaced by a GnuTLS upgrade that enforces greater strictness.  Kudos to the GnuTLS developers for being strict and helping me fix a bug!&lt;/p&gt;

&lt;p&gt;All of these improvements are now tested daily on Cirrus via p11proxy.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/01/27/p11mod-signatures.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/01/27/p11mod-signatures.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Unix domain sockets in Electrum</title>
        <description>&lt;p&gt;I recently sent in a patch to Electrum which adds support for Unix domain sockets to the RPC interface. After review by ghost43 and Jeremy Rand, who is also a Namecoin developer, this patch has been merged. As a result, Electrum now has support for Unix domain sockets in the RPC daemon. (Unix domain sockets are not yet supported for other occasionally local network operations, such as for connecting to a SOCKS proxy.)&lt;/p&gt;

&lt;p&gt;Unix domain sockets are a type of sockets that run entirely inside of the system (the “Unix domain”). Instead of binding to a network port, they bind to a file. The access to this file can then be controlled by the ordinary mechanisms, like file system permissions or ACLs. This makes them very well-suited to replace connections to the loopback interface, because unlike such connections, they are not visible to the entire system. Moreover, by completely disabling the ability of an application to make network requests and limiting its connections to a few select Unix domain sockets, a very high degree of control can be maintained.&lt;/p&gt;

&lt;p&gt;It is envisioned that this will be useful for &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdns&lt;/code&gt;, our DNS resolver, because it will allow Electrum-NMC to provide an RPC interface to &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdns&lt;/code&gt; without having to bind to a network port. This reduces attack surface, making the application more secure. The functionality can also be used by other Electrum users for other use-cases, and some are even suggesting to make it the default on Unix platforms.&lt;/p&gt;

&lt;p&gt;I would like to thank Jeremy Rand and ghost43 for reviewing this pull request, pointing out several important details I missed and giving me helpful feedback on future-proofing and codebase standards.&lt;/p&gt;

&lt;p&gt;This change does not in any way impact how Electrum makes connections to other hosts over the network. This change is not expected to break any existing behaviors.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s NGI0 Discovery Fund.&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2022/01/07/unix-domain-sockets-in-electrum.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2022/01/07/unix-domain-sockets-in-electrum.html</guid>
        <dc:creator>yanmaani</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC v4.0.0b0 Released</title>
        <description>&lt;p&gt;We’ve released Electrum-NMC v4.0.0b0.  This release includes numerous bugfixes and improvements, both Namecoin-related and from upstream Electrum.&lt;/p&gt;

&lt;p&gt;The following Namecoin developers contributed to this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jeremy Rand&lt;/li&gt;
  &lt;li&gt;Daniel Kraft&lt;/li&gt;
  &lt;li&gt;Yanmaani&lt;/li&gt;
  &lt;li&gt;Somewhat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#electrum-nmc&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2021/12/17/electrum-nmc-v4.0.0b0-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2021/12/17/electrum-nmc-v4.0.0b0-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>Electrum Releases</category>
        
        
      </item>
    
      <item>
        <title>Namecoin-Qt: Export, Name Count, and Buy Names Feedback</title>
        <description>&lt;p&gt;I implemented a few more Namecoin-Qt features.  The Manage Names tab now includes both an Export button and a name counter:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/namecoin-core/manage-names-2021-09-14.png&quot; alt=&quot;A screenshot of the Manage Names tab in Namecoin-Qt.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Buy Names tab also now gives real-time feedback on which names are available:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/namecoin-core/buy-names-available-2021-09-14.png&quot; alt=&quot;A screenshot of the Buy Names tab in Namecoin-Qt, when the name is available.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/namecoin-core/buy-names-taken-2021-09-14.png&quot; alt=&quot;A screenshot of the Buy Names tab in Namecoin-Qt, when the name is taken.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a good example of a UX benefit that only full-node users get: because name lookups in Namecoin Core don’t generate network traffic, they are fast enough that they can be performed every time a character is typed in the name field, without making the user click anything.&lt;/p&gt;

&lt;p&gt;I’m not leaving RPC users behind either: the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; RPC method now yields more specific error messages when a name doesn’t exist, depending on whether it is expired or never existed.  This should make things more convenient for human RPC users.  The error codes haven’t changed, so this shouldn’t break any software.&lt;/p&gt;

&lt;p&gt;These improvements are expected to be included in Namecoin Core 23.0.&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2021/12/06/namecoin-qt-export-count-feedback.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2021/12/06/namecoin-qt-export-count-feedback.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Upstream btcd Has Merged Last Outstanding Namecoin Patch</title>
        <description>&lt;p&gt;Good news: upstream btcd has merged the last outstanding patch that Namecoin was applying for our usage of btcd’s JSON-RPC client in ncdns.  This means that Namecoin’s fork of btcd will be discontinued, and as of the next btcd release (v0.22.1), ncdns will switch to using an unpatched upstream btcd.  Using unpatched upstream btcd will decrease our maintenance effort and improve code quality.&lt;/p&gt;

&lt;p&gt;Huge thanks to Torkel Rogstad, Anirudha Bose, and John Vernaleo from upstream btcd for code review.&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2021/11/14/upstream-btcd-merges-last-namecoin-patch.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2021/11/14/upstream-btcd-merges-last-namecoin-patch.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncdns v0.2.2 Released</title>
        <description>&lt;p&gt;We’ve released ncdns v0.2.2.  This release contains multiple bugfixes, in particular a patch to &lt;code class=&quot;highlighter-rouge&quot;&gt;generate_nmc_cert&lt;/code&gt; that works around a CryptoAPI connectivity bug.  We strongly recommend that all users upgrade.  &lt;strong&gt;All domain owners who have TLS enabled will need to re-generate their TLS certificates and TLS records after upgrading.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Full changelog of what’s new since v0.2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ncdns
    &lt;ul&gt;
      &lt;li&gt;Remove tlsrestrict_chromium_tool binary.  (certinject should be used instead now.)&lt;/li&gt;
      &lt;li&gt;Code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;generate_nmc_cert
    &lt;ul&gt;
      &lt;li&gt;Disable AIA over HTTPS.  (No major TLS clients support it, and it was tickling a CryptoAPI connectivity bug.  Thanks to mjgill89.)&lt;/li&gt;
      &lt;li&gt;Rebase against Go 1.17.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ncp11
    &lt;ul&gt;
      &lt;li&gt;Temporarily suspend providing macOS binaries of ncp11.  (macOS support for ncp11 will return after the ongoing p11mod refactor has completed.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows installer
    &lt;ul&gt;
      &lt;li&gt;Support chain-installing and configuring Electrum-NMC.&lt;/li&gt;
      &lt;li&gt;Redesign Components dialogs.&lt;/li&gt;
      &lt;li&gt;Fix installation error on certain non-English locales, e.g. Swedish.  (Thanks to Jonas Ostman.)&lt;/li&gt;
      &lt;li&gt;Warn users of Windows 7 and earlier.  (ncdns hasn’t supported these EOL Windows versions for a while; users who are okay with security degradation will be able to bypass the warning and install anyway.)&lt;/li&gt;
      &lt;li&gt;Relicense under GPLv3+.&lt;/li&gt;
      &lt;li&gt;Remove non-freedom build dependency.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build system:
    &lt;ul&gt;
      &lt;li&gt;Downgrade to BIND 9.16 branch for Windows.  (Upstream BIND has dropped Windows support in 9.17 branch.)&lt;/li&gt;
      &lt;li&gt;Relicense ncdns-repro under tor-browser-build license.  (Thanks to Nicolas Vigier and Georg Koppen.)&lt;/li&gt;
      &lt;li&gt;Code quality improvements.&lt;/li&gt;
      &lt;li&gt;Bump dependencies:
        &lt;ul&gt;
          &lt;li&gt;tor-browser-build&lt;/li&gt;
          &lt;li&gt;gobtcd&lt;/li&gt;
          &lt;li&gt;godns&lt;/li&gt;
          &lt;li&gt;goisatty&lt;/li&gt;
          &lt;li&gt;gopretty&lt;/li&gt;
          &lt;li&gt;gotoml&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#ncdns&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2021/09/25/ncdns-v0.2.2-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2021/09/25/ncdns-v0.2.2-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
  </channel>
</rss>
