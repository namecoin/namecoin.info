<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/</link>
    <atom:link href="http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/feed.rss" rel="self" type="application/rss+xml" />
    <language>en</language>
    <pubDate>Thu, 11 Sep 2025 11:18:36 +0000</pubDate>
    <lastBuildDate>Thu, 11 Sep 2025 11:18:36 +0000</lastBuildDate>
    <generator>Jekyll</generator>
    <image>
      <url>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/images/logo.png</url>
      <title>Namecoin</title>
      <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/</link>
      <width>134</width>
      <height>25</height>
    </image>
    
      <item>
        <title>Hashed TLSA Records in Encaya</title>
        <description>&lt;p&gt;As long-time readers will be aware, probably the biggest innovation of Namecoin’s TLS functionality is that it uses a special form of TLS certificates that happens to work well in mainstream web browsers, via the interoperability magic of AIA and PKCS#11. This avoids having to patch web browsers or intercept TLS connections (either of which would introduce nontrivial security liabilities).&lt;/p&gt;

&lt;p&gt;One of the consequences of this benefit has been that Namecoin domains must embed an ECDSA public key on-chain. ECDSA public keys, alas, are somewhat big. We worked around this, sort of, by using compressed public keys on-chain, and decompressing them on-the-fly before passing them to web browsers via AIA. This was still suboptimal for a few reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compressed ECDSA public keys are still kind of big. Much bigger than a SHA-256 hash.&lt;/li&gt;
  &lt;li&gt;Compressed ECDSA public keys aren’t supported by the Go standard library, so we had to maintain a fork of the standard library.&lt;/li&gt;
  &lt;li&gt;Whatever escape hatch we get from using compressed ECDSA public keys won’t help us when TLS eventually moves to PQ signatures. (More on this in a future post.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, why did we need full public keys in the blockchain (as opposed to a public key hash) anyway? The constraints are as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Encaya needs to synthesize a CA certificate when the browser asks for it.&lt;/li&gt;
  &lt;li&gt;This synthesized CA certificate needs to contain the public key that the domain owner picked.&lt;/li&gt;
  &lt;li&gt;The browser will &lt;em&gt;not&lt;/em&gt; provide any public keys that the TLS server presented in the certificate chain.&lt;/li&gt;
  &lt;li&gt;THEREFORE, Encaya needs to get the public key from the blockchain, since there’s no other way to get it given the API constraints. QED. Right…?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Um, about that last assumption. Is there really no other way to get the public key given the API constraints?&lt;/p&gt;

&lt;p&gt;Moreover, how does Encaya even know what domain name to look up in the blockchain? Could we get the public key that way?&lt;/p&gt;

&lt;p&gt;Hmm…&lt;/p&gt;

&lt;p&gt;Encaya gets the domain name from an AIA request (for Chromium-like browsers) or from a PKCS#11 request (for Firefox-like browsers). Why do these requests contain the domain name? Uh. Because we put the domain name there?&lt;/p&gt;

&lt;p&gt;The AIA request contains whatever data is in the AIA Issuer URL field of a certificate sent by the TLS server. The PKCS#11 request contains whatever data is in the Issuer Distinguished Name (DN) field of that certificate. There’s no requirement that either of those fields contain the domain name. The DN does &lt;em&gt;sometimes&lt;/em&gt; contain a domain name in the Common Name field, but that’s normally only a thing for end-entity certificates, not CA certificates. The AIA Issuer URL field definitely doesn’t normally have anything like that under any circumstances. In both fields, we &lt;em&gt;deliberately&lt;/em&gt; put the domain name there so that Encaya would see it.&lt;/p&gt;

&lt;p&gt;You probably see where this is going. Could we stuff a public key into the AIA Issuer URL and the Subject DN? It’d look pretty weird, but if you’re averse to looking weird, you’re probably not a hacker.&lt;/p&gt;

&lt;p&gt;So here’s the new workflow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The AIA Issuer URL field of the CA certificate sent by the TLS server adds a new GET query parameter, containing a base64-encoded public key.&lt;/li&gt;
  &lt;li&gt;The Subject DN field of that CA certificate’s parent CA adds a base64-encoded public key in the Subject Serial Number subfield.&lt;/li&gt;
  &lt;li&gt;The Issuer DN field of the CA certificate matches the Subject DN of its parent, thus also including an Issuer Serial Number with a base64-encoded public  key in it.&lt;/li&gt;
  &lt;li&gt;When Chromium sees this certificate chain, it sends an AIA request to Encaya that includes the public key as part of the AIA Issuer URL.&lt;/li&gt;
  &lt;li&gt;When Firefox sees this certificate chain, it sends a PKCS#11 request to ncp11 that includes the public key as part of the Subject DN or Issuer DN.&lt;/li&gt;
  &lt;li&gt;Encaya can then compare this public key to the hashed TLSA record in the blockchain. It if matches, Encaya uses the public key in its synthesized CA.&lt;/li&gt;
  &lt;li&gt;Chromium and Firefox don’t know that anything funky has happened. Sure, there’s an intermediate CA with a really long AIA Issuer URL and Issuer Serial Number. But Chromium and Firefox don’t care about that.&lt;/li&gt;
  &lt;li&gt;On-chain savings achieved. We win!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ve implemented the above in Encaya, ncp11, and generate_nmc_cert. What do the savings look like?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Before: 90 bytes of JSON per TLSA record&lt;/li&gt;
  &lt;li&gt;After: 54 bytes of JSON per TLSA record&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The TLS handshake, of course, contains a bit more data, but TLS handshake bytes are cheap compared to on-chain bytes.&lt;/p&gt;

&lt;p&gt;Once this feature gets into a release, we will contact Namecoin HTTPS website operators in the wild (where feasible) to nudge them to upgrade their setup. Support for the previous certificate format will probably be dropped soon, because the maintenance burden of a standard Go crypto library fork is not a good use of my time.&lt;/p&gt;

&lt;p&gt;This work was funded by Power Up Privacy.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Sep 2025 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/09/11/hashed-tlsa-records-in-encaya.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/09/11/hashed-tlsa-records-in-encaya.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>What's the maximum length of an AIA Issuer URL in Windows 11 CryptoAPI?</title>
        <description>&lt;p&gt;For those of you who haven’t seen my various conference talks about Namecoin TLS, AIA (&lt;em&gt;Authority Information Access&lt;/em&gt;) is a mechanism for a TLS certificate to provide a URL where you can find the certificate of its issuer. Namecoin does some, uh, &lt;em&gt;creative&lt;/em&gt; things with AIA. For reasons that will be elaborated on in a future post (don’t worry, all will be explained there), I wanted to know the maximum length of the URL that AIA can link to.&lt;/p&gt;

&lt;p&gt;I had no luck finding any such limit in any relevant RFC, nor could I find anyone on the Internet who had documented any such limit, so I had to fall back to experimentation. I ended up writing a patched certificate generator and AIA HTTP server that could test whether arbitrary AIA URL lengths were usable to build a certificate chain. I then wrote a PowerShell script that tried various AIA URL lengths with Windows 11’s &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil -verify&lt;/code&gt;, to see what CryptoAPI’s limits were.&lt;/p&gt;

&lt;p&gt;After running some tests, I have some answers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AIA URL lengths up to &lt;code class=&quot;highlighter-rouge&quot;&gt;65534&lt;/code&gt; bytes work fine.&lt;/li&gt;
  &lt;li&gt;AIA URL lengths &lt;code class=&quot;highlighter-rouge&quot;&gt;65535&lt;/code&gt; bytes and higher do not work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am not certain why the upper bound is &lt;em&gt;2&lt;/em&gt; less than a power of 2. If it were &lt;em&gt;1&lt;/em&gt; less than a power of 2, that would be sensible since that would indicate a length field that’s an unsigned 16-bit integer. My best guess is that Windows is using a strange data structure that uses both a 16-bit length field &lt;em&gt;and&lt;/em&gt; a NULL terminator.&lt;/p&gt;

&lt;p&gt;Checking CryptoAPI’s logs in Event Viewer indicates that none of the AIA-related code paths are running when the limit is exceeded.&lt;/p&gt;

&lt;p&gt;Scope caveats:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I only ran this test in Windows 11 24H2. I suspect that sufficiently old Windows releases are less tolerant.&lt;/li&gt;
  &lt;li&gt;I don’t know what happens if you try to put Unicode in the URL.&lt;/li&gt;
  &lt;li&gt;I would not expect to see the same limit in other TLS clients that implement AIA, e.g. macOS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Should you wish to reproduce these results yourself (&lt;em&gt;Science Rules!&lt;/em&gt;), the code should be included in the next release of Encaya.&lt;/p&gt;

&lt;p&gt;This work was funded by Power Up Privacy.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Sep 2025 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/09/07/whats-maximum-length-aia-issuer-url-windows-11-cryptoapi.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/09/07/whats-maximum-length-aia-issuer-url-windows-11-cryptoapi.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Improving sockstrace: Debugging, Process Control, and Proxy Rules</title>
        <description>&lt;p&gt;sockstrace just got a major update. Here’s a quick overview of the new features:&lt;/p&gt;

&lt;h2 id=&quot;core-dump--stack-trace&quot;&gt;Core Dump &amp;amp; Stack Trace&lt;/h2&gt;
&lt;p&gt;When a proxy leak is detected, sockstrace can:&lt;/p&gt;

&lt;p&gt;Stack Trace: Extract a stack trace of the leaking process to show where in the code the leak occurred. This uses &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb&lt;/code&gt; behind the scenes, so the trace includes detailed symbol infomation (if available).&lt;/p&gt;

&lt;p&gt;Core Dump: Creates a full core dump of the leaking process by sending &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGABRT.&lt;/code&gt; Before triggering it, sockstrace checks that &lt;code class=&quot;highlighter-rouge&quot;&gt;ulimit&lt;/code&gt; allows dumping. The resulting core can be loaded into GDB for full post-mortem analysis, including memory, registers, and detailed traces.&lt;/p&gt;

&lt;h2 id=&quot;kill-all-tracees-including-children&quot;&gt;Kill All Tracees (Including Children)&lt;/h2&gt;
&lt;p&gt;Previously, sockstrace only supported killing the specific PID that triggered the leak. In multi-process applications like browsers, this often left child processes alive, leading to inconsistent behavior or silent failures.&lt;/p&gt;

&lt;p&gt;Now, it can recursively terminate the entire process tree rooted at that PID, ensuring:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A clearer signal to the user that something went wrong (Avoid silent failures)&lt;/li&gt;
  &lt;li&gt;No zombie processes are left behind&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whitelist-for-incoming-tcp-connections&quot;&gt;Whitelist for Incoming TCP Connections&lt;/h2&gt;
&lt;p&gt;You can now define a whitelist of allowed source IPs or subnets for incoming TCP connections.
sockstrace enforces the whitelist by intercepting the &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;listen&lt;/code&gt; syscalls: it parses the bind address from the syscall arguments, and on listen, it calls &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall.Getsockname&lt;/code&gt; to retrieve the actual bound address. This address is then checked against a user-defined whitelist, and if it doesn’t match, the bind is flagged as a leak or blocked based on the configuration.&lt;/p&gt;

&lt;p&gt;This is useful because:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It blocks unexpected incoming connections.&lt;/li&gt;
  &lt;li&gt;It ensures only known gateways (e.g. Tor) are allowed to connect, as in Whonix-like setups.&lt;/li&gt;
  &lt;li&gt;It catches misconfigured or unsafe behavior in network-facing apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;socks5-handshake-enforcement&quot;&gt;SOCKS5 Handshake Enforcement&lt;/h2&gt;
&lt;p&gt;sockstrace now enforces SOCKS5 rules by intercepting the &lt;code class=&quot;highlighter-rouge&quot;&gt;sendto&lt;/code&gt; syscall and parsing the actual handshake data.&lt;/p&gt;

&lt;p&gt;Parse &amp;amp; Validate Structure: Verifies the SOCKS5 version, authentication methods, and field layout directly from the syscall. Rejects malformed or legacy handshakes.&lt;/p&gt;

&lt;p&gt;Require Authentication: Flags connections that use no-auth &lt;code class=&quot;highlighter-rouge&quot;&gt;(0x00)&lt;/code&gt; as leaks. This helps catch unsafe fallback behavior.&lt;/p&gt;

&lt;p&gt;Tor-Compatible Isolation: Supports enforcing Tor-style stream isolation using SOCKS5 username/password fields. While implementing this, we also fixed a few typos and ambiguities in the &lt;a href=&quot;https://spec.torproject.org/socks-extensions.html&quot;&gt;Tor spec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Regex-Based Rules: Users can define custom regex patterns for valid auth fields (e.g. session-*, profile-[0-9]+) to ensure proper identity separation.&lt;/p&gt;

&lt;p&gt;This gives fine-grained control over SOCKS5 behavior and helps detect apps that bypass proxy isolation.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Next Generation Internet Zero Core Fund.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/07/25/sockstrace-improvements.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/07/25/sockstrace-improvements.html</guid>
        <dc:creator>Robert Nganga</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin will be at MoneroKon 5</title>
        <description>&lt;p&gt;We’re happy to announce that Namecoin will be giving a presentation at &lt;a href=&quot;https://monerokon.org/&quot;&gt;MoneroKon 5&lt;/a&gt; in Prague, Czechia (June 20-22). Live streams are expected.&lt;/p&gt;

&lt;p&gt;If you’re also attending and would like to meet up to discuss collaboration, please ping us on #namecoin-dev.&lt;/p&gt;

&lt;p&gt;We’d like to thank Cyphrs for facilitating our participation. See you there!&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jun 2025 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/06/15/monerokon-5.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/06/15/monerokon-5.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Code Quality Improvements in ncp11</title>
        <description>&lt;p&gt;As you may recall, ncp11 is Namecoin’s PKCS#11 module that enables TLS to work for Namecoin domains with standard TLS clients that use NSS or GnuTLS. I’ve recently made several improvements to ncp11:&lt;/p&gt;

&lt;h2 id=&quot;add-additional-tracing&quot;&gt;Add additional tracing&lt;/h2&gt;

&lt;p&gt;Namecoin’s PKCS#11 modules can log traces of their internal state, which can be helpful for debugging. I’ve expanded ncp11’s tracing to cover some additional state.&lt;/p&gt;

&lt;h2 id=&quot;disable-certificate-transparency&quot;&gt;Disable Certificate Transparency&lt;/h2&gt;

&lt;p&gt;Modern versions of Firefox and Chromium mandate Certificate Transparency for all certificates by default. Namecoin, of course, cannot comply with this requirement, since the public CT logs don’t accept Namecoin certificates. (To some Namecoin users, this is a feature, not a bug.) This was causing CT errors to show up for Namecoin certificate chains.&lt;/p&gt;

&lt;p&gt;I’ve changed ncp11’s trust bits to opt out of the CT requirement for all Namecoin certificates. This gets ncp11 working again in modern browsers.&lt;/p&gt;

&lt;h2 id=&quot;work-around-nss-blacklisting-bug&quot;&gt;Work around NSS blacklisting bug&lt;/h2&gt;

&lt;p&gt;NSS allows PKCS#11 modules to mark a CA as explicitly distrusted for root CA purposes, while still trusting them if they are issued by a trusted CA. ncp11 had been using this for all intermediate CA’s that it signed, but testing showed that NSS’s behavior doesn’t match the documentation, and this feature seems to be broken – marking a CA in this way will result in it being distrusted regardless of its issuer.&lt;/p&gt;

&lt;p&gt;I’ve worked around this by making trust objects optional in p11trustmod, and making ncp11 not return trust objects for intermediate CA’s. This makes ncp11’s generated certificate chains substantially more reliable.&lt;/p&gt;

&lt;h2 id=&quot;set-media-type-correctly-on-pem-responses&quot;&gt;Set media type correctly on PEM responses&lt;/h2&gt;

&lt;p&gt;Encaya’s API endpoint for ncp11’s usage was returning PEM certificate bundles with the default &lt;code class=&quot;highlighter-rouge&quot;&gt;text/plain&lt;/code&gt; media type. This is not really spec-compliant. I’ve made it return a proper &lt;code class=&quot;highlighter-rouge&quot;&gt;application/x-pem-file&lt;/code&gt; media type. ncp11 itself didn’t care, but this does mean that using the Encaya web interface to download the Encaya root CA certificate will now produce a download dialog as expected, instead of showing a bunch of text in the web browser.&lt;/p&gt;

&lt;h2 id=&quot;unify-aia-and-pkcs11-implementations&quot;&gt;Unify AIA and PKCS#11 implementations&lt;/h2&gt;

&lt;p&gt;Encaya has two API endpoints: one for AIA usage, and one for PKCS#11 usage. There are a number of differences, mostly related to differences in how AIA clients and PKCS#11 clients query and cache things. These endpoints had substantial code duplication, which was not great for maintainability. I’ve factored out the common code into a &lt;code class=&quot;highlighter-rouge&quot;&gt;lookupCert&lt;/code&gt; function. The result:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Lines of Code (Before)&lt;/th&gt;
      &lt;th&gt;Lines of Code (After)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;AIA&lt;/td&gt;
      &lt;td&gt;157&lt;/td&gt;
      &lt;td&gt;33&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PKCS#11&lt;/td&gt;
      &lt;td&gt;153&lt;/td&gt;
      &lt;td&gt;47&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Server Total&lt;/td&gt;
      &lt;td&gt;902&lt;/td&gt;
      &lt;td&gt;802&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The refactored code is much cleaner, easier to follow, and will facilitate decreased effort for future improvements.&lt;/p&gt;

&lt;p&gt;This work was funded by Power Up Privacy.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 May 2025 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/05/13/code-quality-improvements-in-ncp11.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/05/13/code-quality-improvements-in-ncp11.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Occlumask: A Content-based Anonymity Leak Detector</title>
        <description>&lt;p&gt;A few weeks ago, we &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/03/30/namecoin-tls-anonymity-research-funding-power-up-privacy-nlnet-ngi0-core.html&quot;&gt;announced funding&lt;/a&gt; from Power Up Privacy for a number of different projects. One of those projects being “Occlumask”. We will be giving some details about Occlumask, the motivations behind it, its methods, challenges, as well as the current status on research.&lt;/p&gt;

&lt;h2 id=&quot;what-is-occlumask&quot;&gt;What is Occlumask?&lt;/h2&gt;

&lt;p&gt;Occlumask is an LLM-based tool for detecting content-based anonymity leaks. It is currently built off of the &lt;code class=&quot;highlighter-rouge&quot;&gt;llama.cpp&lt;/code&gt; inference engine, running a local LLM instance. We are intending it to mainly be used in the context of chat messaging, forum posting or any other personal writing situation.&lt;/p&gt;

&lt;h2 id=&quot;occlumask-motivations&quot;&gt;Occlumask Motivations&lt;/h2&gt;

&lt;p&gt;De-anonymization remains a pressing issue for privacy conscious users. To that end, there are many things a prospective anonymous person needs to keep track of to keep their identities hidden. Some of you may be familiar with stylometric analysis, where writing style preferences can be used to identify the writer of a text. Tools for obfuscating stylometry, such as &lt;a href=&quot;https://github.com/psal/anonymouth&quot;&gt;Anonymouth&lt;/a&gt;, have existed for a long time. However, stylometry is only one axis of de-anonymization. Even if your stylometry is perfectly obfuscated, the content of your text can give your identity away.&lt;/p&gt;

&lt;p&gt;A lot of information, even piecemeal, can be used to identify you (See &lt;a href=&quot;https://www.whonix.org/wiki/Tips_on_Remaining_Anonymous#Always_Withhold_your_Identifying_Data&quot;&gt;Always Withhold your Identifying Data&lt;/a&gt; on the Whonix wiki for a non-exhaustive list). Famously, Jeremy Hammond was linked to the &lt;a href=&quot;https://www.justice.gov/archive/usao/nys/pressreleases/March12/hackers/hammondjeremycomplaint.pdf&quot;&gt;2012 Stratfor email leak&lt;/a&gt; through various snippets of personal anecdotes posted in IRC. Keeping in mind human error, it becomes difficult to ensure that one follows all these rules. Occlumask aims to be an aide in this process, catching any lapses in judgment.&lt;/p&gt;

&lt;h2 id=&quot;llm-use-reasoning&quot;&gt;LLM Use Reasoning&lt;/h2&gt;

&lt;p&gt;Classification has been a long-standing use case for machine learning, and so it would follow naturally to use machine learning models to “classify” if a text is de-anonymizing. Neural networks have already been used in stylometric obfuscation in &lt;a href=&quot;https://github.com/EricX003/ALISON&quot;&gt;ALISON&lt;/a&gt;. LLMs present an interesting opportunity with their unique natural language comprehension capabilities. The increased ability for understanding context in particular allows for more accuracy, differentiating between significant and insignificant mentions of potential identifiers. For example, “[City] has terrible weather” vs. “[City] is well known for its cheeses”.&lt;/p&gt;

&lt;h2 id=&quot;challenges-with-occlumask&quot;&gt;Challenges With Occlumask&lt;/h2&gt;

&lt;p&gt;The difficulties involved with using are both in the overall accuracy of the program, as well as the performance. LLMs are, to oversimplify, effectively non-deterministic. There is no guarantee that it will be completely correct in determining the presence of an anonymity leak. A large part of this project will be reducing uncertainty. Keep in mind that Occlumask is an aide, not a replacement for proper privacy practices.&lt;/p&gt;

&lt;p&gt;Running an LLM locally is also computationally expensive. Occlumask is planned to allow for any &lt;code class=&quot;highlighter-rouge&quot;&gt;GGUF&lt;/code&gt;-formatted model. This lets you run less demanding models (i.e. ones with fewer parameters or with more extreme quantization), in exchange for lower quality of output. We also want to minimize the amount of inference any given model does. As such, Occlumask won’t suggest any changes to your writing. &lt;strong&gt;It will only warn you that your text has an identity leak, how you handle it is up to you.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That being said, we still believe that Occlumask is a useful tool (otherwise we wouldn’t be making it!). It will still be reducing the amount of identity leaks that happen, and we will be working on reducing that amount as much as possible.&lt;/p&gt;

&lt;h2 id=&quot;current-progress&quot;&gt;Current Progress&lt;/h2&gt;

&lt;p&gt;We are currently in the prompt engineering phase, getting the LLM to produce the outputs that we want, with an acceptable level of consistency. To this end, we are also collecting example texts to test our program on. So far the results have been promising, with the LLM being able to correctly identify what and why a section of identifying text is as well as surprising us on one occasion, with a potential identifier that none of us could find before Occlumask flagged it for us.&lt;/p&gt;

&lt;p&gt;This work was funded by Power Up Privacy.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 May 2025 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/05/11/occlumask-introduction.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/05/11/occlumask-introduction.html</guid>
        <dc:creator>Alice Margatroid</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Enhancing Proxy Leak Detection with SocksTrace: From ptrace to seccomp notify</title>
        <description>&lt;p&gt;Initially, SocksTrace relied on &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace&lt;/code&gt; to trace connect syscalls. While &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace&lt;/code&gt; works well for simple programs, it wasn’t practical for high-performance applications, especially browsers.&lt;/p&gt;

&lt;h3 id=&quot;why-switch-to-seccomp-notify&quot;&gt;Why switch to seccomp notify?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Performance: ptrace slowed down applications significantly, making it impractical for real-time proxy leak detection.&lt;/li&gt;
  &lt;li&gt;Scalability: Large, multithreaded programs like browsers were difficult to trace effectively using ptrace.&lt;/li&gt;
  &lt;li&gt;More precise control: seccomp notify allows SocksTrace to intercept only the syscalls it cares about, without stepping through every syscall like ptrace does.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-the-transition-works&quot;&gt;How the transition works&lt;/h3&gt;
&lt;p&gt;Instead of using &lt;code class=&quot;highlighter-rouge&quot;&gt;PTRACE_SYSCALL&lt;/code&gt; to catch connect, SocksTrace now sets up a seccomp filter with &lt;code class=&quot;highlighter-rouge&quot;&gt;SECCOMP_RET_USER_NOTIF&lt;/code&gt;. This allows user-space handling of specific syscalls, without the overhead of stepping through every process instruction. When connect is intercepted, SocksTrace can inspect the syscall parameters, decide whether to allow or deny it, and act accordingly.&lt;/p&gt;

&lt;h2 id=&quot;whitelisting-syscalls&quot;&gt;Whitelisting syscalls&lt;/h2&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;seccomp&lt;/code&gt;, SocksTrace can define a strict policy that only allows necessary syscalls, blocking everything else.&lt;/p&gt;

&lt;h3 id=&quot;why-syscall-whitelisting-matters&quot;&gt;Why syscall whitelisting matters&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Reduces the attack surface by preventing unnecessary syscalls.&lt;/li&gt;
  &lt;li&gt;Ensures SocksTrace only intercepts network-related calls without interfering with other system behavior.&lt;/li&gt;
  &lt;li&gt;Can be extended for different security policies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;implementation-details&quot;&gt;Implementation details&lt;/h3&gt;
&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;go-seccomp-bpf&lt;/code&gt;, SocksTrace creates a seccomp filter that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Blocks all syscalls by default (ActionErrno).&lt;/li&gt;
  &lt;li&gt;Explicitly allows safe syscalls like read, write and exit.&lt;/li&gt;
  &lt;li&gt;Uses &lt;code class=&quot;highlighter-rouge&quot;&gt;seccomp.ActionTrace&lt;/code&gt; to intercept connect for analysis.
This prevents unauthorized connections while ensuring minimal disruption to the application’s normal behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;configuring-tcp-blocking&quot;&gt;Configuring TCP blocking&lt;/h2&gt;
&lt;p&gt;A new feature in SocksTrace allows users to decide whether to block incoming TCP connections.&lt;/p&gt;

&lt;h3 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h3&gt;
&lt;p&gt;By intercepting &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;accept&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;accept4&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;listen&lt;/code&gt;, SocksTrace can monitor and control incoming TCP connections.&lt;/p&gt;

&lt;h3 id=&quot;configurable-blocking-options&quot;&gt;Configurable blocking options&lt;/h3&gt;
&lt;p&gt;Currently, SocksTrace offers two options for incoming TCP connections:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allow all incoming connections.&lt;/li&gt;
  &lt;li&gt;Block all incoming connections (to prevent accidental exposure).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are also working on an option to allow only specific addresses, adding more fine-grained control.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Next Generation Internet Zero Core Fund.&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Mar 2025 04:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/03/30/sockstrace-seccomp-notify.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/03/30/sockstrace-seccomp-notify.html</guid>
        <dc:creator>Robert Nganga</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Receives TLS and Anonymity Research Funding from Power Up Privacy and NLnet Foundation’s NGI0 Core Fund</title>
        <description>&lt;p&gt;We’re happy to announce that Namecoin is receiving three new grants:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$25,760 USD from Power Up Privacy for anonymity research and development.
    &lt;ul&gt;
      &lt;li&gt;Alice Margatroid is project lead.&lt;/li&gt;
      &lt;li&gt;Jeremy Rand and Brandon Roberts will assist as needed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;$24,480 USD from Power Up Privacy for TLS research and development.
    &lt;ul&gt;
      &lt;li&gt;Jeremy Rand is project lead.&lt;/li&gt;
      &lt;li&gt;Robert Nganga will assist as needed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;20,000 EUR from NLnet Foundation’s NGI0 Core (Next Generation Internet: Zero Core) Fund for TLS research and development.
    &lt;ul&gt;
      &lt;li&gt;Jeremy Rand is project lead.&lt;/li&gt;
      &lt;li&gt;Robert Nganga will assist as needed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;anonymity-rd-grant&quot;&gt;Anonymity R&amp;amp;D Grant&lt;/h2&gt;

&lt;p&gt;Most anonymity-related tools focus on preventing metadata leaks, e.g. Tor (prevents leaking your IP address metadata) and Mullvad Browser (prevents leaking your browser fingerprint metadata). However, there is another class of deanonymization vectors: the content of the communication itself. For example, mentioning the weather is an easy way to severely narrow your anonymity set. Alice is developing an automated tool that warns users if they are at risk of deanonymizing themselves in this way.&lt;/p&gt;

&lt;p&gt;Namecoin has a solid history of developing privacy/security tools that aren’t strictly tied to the Namecoin blockchain, including SocksTrace, certinject, and pkcs11mod. This isn’t unusual in this space; Tor Project also routinely publishes research that isn’t strictly related to the Tor network. We’re excited to continue this trend.&lt;/p&gt;

&lt;h2 id=&quot;tls-rd-grants&quot;&gt;TLS R&amp;amp;D Grants&lt;/h2&gt;

&lt;p&gt;Namecoin’s TLS support has a solid track record on scalability, including our innovations on layer-2 TLS. These grants will cover additional Namecoin scalability improvements, including fleshing out various functionality that Robert’s 38C3 talk covered. They will also cover collaboration with Tor Project on areas of TLS-related common interest, including fleshing out the onion service functionality that Jeremy’s 38C3 talk covered.&lt;/p&gt;

&lt;p&gt;Our collaboration with Tor Project goes back many years, and we’re happy that this will be continuing.&lt;/p&gt;

&lt;h2 id=&quot;funding-sources&quot;&gt;Funding Sources&lt;/h2&gt;

&lt;p&gt;You’re probably familiar with NLnet Foundation by now, but if not, you might want to read &lt;a href=&quot;https://nlnet.nl/foundation/&quot;&gt;about NLnet Foundation&lt;/a&gt;, or just take a look at &lt;a href=&quot;https://nlnet.nl/thema/index.html&quot;&gt;the projects they’ve funded over the years&lt;/a&gt; (you might see some familiar names).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://powerupprivacy.com/&quot;&gt;Power Up Privacy&lt;/a&gt; is a relatively new funder whom you may not have heard of, but they fund some familar names as well. Diversifying Namecoin’s funding has been a goal for a while now, and we’re pleased to add Power Up Privacy to our growing list of funders.&lt;/p&gt;

&lt;p&gt;We’d like to thank the awesome people at NLnet Foundation for the continued vote of confidence, as well as the European Commision for their support of the Next Generation Internet. And a huge thank-you to Power Up Privacy for their new support!&lt;/p&gt;

&lt;p&gt;Alice and Jeremy will be posting updates regularly as development proceeds.&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Mar 2025 02:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/03/30/namecoin-tls-anonymity-research-funding-power-up-privacy-nlnet-ngi0-core.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/03/30/namecoin-tls-anonymity-research-funding-power-up-privacy-nlnet-ngi0-core.html</guid>
        <dc:creator>Alice Margatroid and Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>38C3 Summary</title>
        <description>&lt;p&gt;As was &lt;a href=&quot;/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2024/12/16/38c3-fosdem-2025.html&quot;&gt;previously announced&lt;/a&gt;, several developers represented Namecoin at &lt;a href=&quot;https://events.ccc.de/congress/2024/wiki/index.php/Main_Page&quot;&gt;38C3&lt;/a&gt; in Hamburg, Germany. You know the drill by now: we had a lot of conversations with other attendees, and we won’t be publicly disclosing the content of those conversations, because I want people to be able to talk to us at conferences without worrying that off-the-cuff comments will be broadcast to the public. That said, a practical result of one of those conversations should be getting its own announcement in the next day or two.&lt;/p&gt;

&lt;p&gt;There were multiple Namecoin-related talks at the Critical Decentralization Cluster (CDC). We’re still waiting for the official recordings to be published, but in the meantime, live-stream archives are provided below where available.&lt;/p&gt;

&lt;h2 id=&quot;lightning-talk-intro-to-namecoin&quot;&gt;Lightning Talk: Intro to Namecoin&lt;/h2&gt;

&lt;p&gt;Speaker: Yanmaani&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pretalx.riat.at/38c3/talk/PQRLPH/&quot;&gt;Pretalx page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Was not live-streamed; recording coming soon.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lightning-talk-intro-to-sibermerdeka&quot;&gt;Lightning Talk: Intro to Sibermerdeka&lt;/h2&gt;

&lt;p&gt;Speaker: Rose Turing&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pretalx.riat.at/38c3/talk/PQRLPH/&quot;&gt;Pretalx page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Was not live-streamed; recording coming soon.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-lost-art-forgotten-primitives-for-a-decentralized-web&quot;&gt;A lost art: forgotten primitives for a decentralized web&lt;/h2&gt;

&lt;p&gt;Speaker: Yanmaani&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There were many projects around the new millennium seeking to create decentralized/anonymous networks. Most failed, but they had some good ideas that died along with them. This talk will cover some “lost gems” from that era.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most development within anonymous overlay networks the past 20 years has centered around low-latency networks (like Tor or I2P); networks that allow you to use conventional web applications and protocols. (like IRC, or whatever web applications you want)&lt;/p&gt;

&lt;p&gt;High-latency networks don’t allow you to do this. They require you to re-build everything from the ground up. That’s why they never took off, but it also required clever people to spend a lot of time building interesting things.&lt;/p&gt;

&lt;p&gt;This short talk will cover the primitives that were used to build things like decentralized web sites, search engines, identity systems, and even bulletin boards. While of little practical use today, the techniques in some ways exceed our current technology and ought to be remembered.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pretalx.riat.at/38c3/talk/D8YKHW/&quot;&gt;Pretalx page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Was not live-streamed; recording coming soon.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;not-your-keys-not-your-name&quot;&gt;Not Your Keys, Not Your Name&lt;/h2&gt;

&lt;p&gt;Speaker: Adam Joseph&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This talk will explain the benefits of decentralized protocols which use public keys &lt;em&gt;directly&lt;/em&gt; as identities, and encourage this approach for newly-designed protocols.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The example familiar to the most CCC attendees is Tor &lt;a href=&quot;http://2gzyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.onion/&quot;&gt;onion names&lt;/a&gt;. At least &lt;a href=&quot;https://codeberg.org/amjoseph/not-your-keys-not-your-name&quot;&gt;20 other protocols use this strategy&lt;/a&gt; as well. This talk will briefly survey those examples and explain the benefits of this approach for &lt;em&gt;autonomy&lt;/em&gt;, &lt;em&gt;decentralization&lt;/em&gt;, and &lt;em&gt;ability to resist surveillance&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The main alternative to public keys is names controlled by some globally trusted party, such as US-ICANN, the DNSSEC root key, or the browser-vendors’ WebPKI appointees. This talk will explain the drawbacks of centralized alternatives.&lt;/p&gt;

&lt;p&gt;If a protocol uses public keys as identities, it should allow users to keep their permanent private key offline. Private keys in &lt;em&gt;online&lt;/em&gt; “secure elements” are not offline. Because an online device requires a network connection its physical location cannot be hidden; this means it can be seized or stolen and the keys extracted using a vulnerability like &lt;a href=&quot;https://eprint.iacr.org/2024/1380&quot;&gt;the one recently discovered in all Yubikeys and Infineon TPMs&lt;/a&gt;. Only a small number of protocols support offline identity keys. This support cannot be added to a protocol “after the fact”; it must be included from the very beginning. This talk will encourage protocol designers to include this feature from the very beginning, and will give concrete advice (“copy SSH or Tor”) on how to do it.&lt;/p&gt;

&lt;p&gt;More details can be found here: &lt;a href=&quot;https://codeberg.org/amjoseph/not-your-keys-not-your-name&quot;&gt;https://codeberg.org/amjoseph/not-your-keys-not-your-name&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pretalx.riat.at/38c3/talk/8FCVKL/&quot;&gt;Pretalx page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/live/JPK7J9FVdvo?feature=shared&amp;amp;t=1730&quot;&gt;Live-stream archive on YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;self-authenticating-tls-certificates-for-tor-onion-services&quot;&gt;Self-Authenticating TLS Certificates for Tor Onion Services&lt;/h2&gt;

&lt;p&gt;Speaker: Jeremy Rand&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLS (the security layer behind HTTPS) and Tor onion services (anonymously hosted TCP services) are both excellent protocols. Wouldn’t it be nice if we could use them together? In this talk, I’ll cover a working implementation of combining TLS with onion services, without compromising on the security properties that each provides.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Topics to be covered include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why would you want to combine TLS with onion services? Why isn’t onion service encryption good enough?&lt;/li&gt;
  &lt;li&gt;Why isn’t unauthenticated TLS (e.g. self-signed certificates) good enough for onion services?&lt;/li&gt;
  &lt;li&gt;How can we authenticate a TLS certificate for a &lt;code class=&quot;highlighter-rouge&quot;&gt;.onion&lt;/code&gt; domain without relying on public CA’s like Let’s Encrypt or any other trusted third parties? (No we’re not using a blockchain.)&lt;/li&gt;
  &lt;li&gt;How can we teach standard (unmodified) web browsers like Firefox to apply different certificate validation logic for &lt;code class=&quot;highlighter-rouge&quot;&gt;.onion&lt;/code&gt; certificates?&lt;/li&gt;
  &lt;li&gt;How can we teach standard (unmodified) web browsers like Firefox to validate certificates using typically-unsupported elliptic curves like Ed25519 (which Tor uses)?&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How is teaching standard (unmodified) web browsers like Firefox to validate &lt;code class=&quot;highlighter-rouge&quot;&gt;.onion&lt;/code&gt; certificates similar to Namecoin &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; certificates? How is it different?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pretalx.riat.at/38c3/talk/QT333R/&quot;&gt;Pretalx page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/live/JPK7J9FVdvo?feature=shared&amp;amp;t=5378&quot;&gt;Live-stream archive on YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scaling-namecoin&quot;&gt;Scaling Namecoin&lt;/h2&gt;

&lt;p&gt;Speaker: Robert Nganga&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The DNS has an inherent scalability advantage over Namecoin. But that doesn’t mean we’re not going to optimize Namecoin as best we can. In this talk, I’ll cover several tactics we’re using to reduce the on-chain data stored by Namecoin — while minimizing the UX impact.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Topics to be covered include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why is the Namecoin value size only 520 bytes?&lt;/li&gt;
  &lt;li&gt;How can security improvements like cold storage support allow storing more data?&lt;/li&gt;
  &lt;li&gt;How did we avoid putting TLS public keys in the blockchain?&lt;/li&gt;
  &lt;li&gt;How are we compressing the data that goes into the blockchain?&lt;/li&gt;
  &lt;li&gt;How are we shrinking the on-chain overhead of registrations of new names?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There may be bit of bonus content covering other Namecoin development.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pretalx.riat.at/38c3/talk/8YWD9D/&quot;&gt;Pretalx page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/live/JPK7J9FVdvo?feature=shared&amp;amp;t=7088&quot;&gt;Live-stream archive on YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;protecting-namecoin-users-from-their-mistakes-namecoin-wallet-ux&quot;&gt;Protecting Namecoin Users from Their Mistakes: Namecoin Wallet UX&lt;/h2&gt;

&lt;p&gt;Speaker: Rose Turing&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If user mistakes cause their website to go down, that’s already bad — but not nearly as bad as if user mistakes make them permanently lose control of their website or get doxed and arrested. This talk is about how we’re helping Namecoin wallet users avoid mistakes before they cause irreversible consequences.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;People are generally way more careless than we give them credit for, and all it takes for a full on security breach is one mistake, anywhere in the worst of cases. Our job in Namecoin is to prevent such incidents from occurring, and this means designing our UX in such a way that mistakes can be avoided by end-users. In this talk we discuss the consequences of mistakes on the user’s end as well as mitigations that have or will be implemented in Namecoin.&lt;/p&gt;

&lt;p&gt;Topics to be covered include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Warning about likely-invalid domain configurations.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Preventing accidental expiration disasters.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pretalx.riat.at/38c3/talk/7TNDME/&quot;&gt;Pretalx page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/live/JPK7J9FVdvo?feature=shared&amp;amp;t=8129&quot;&gt;Live-stream archive on YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thanks&quot;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;Huge thank you to &lt;a href=&quot;https://decentral.community/&quot;&gt;The Critical Decentralization Cluster&lt;/a&gt; for facilitating our participation. We’re looking forward to 39C3 in December 2025!&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund, NLnet Foundation’s Next Generation Internet Zero Core Fund, and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/03/30/38c3-summary.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2025/03/30/38c3-summary.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin will be at 38C3 and FOSDEM 2025</title>
        <description>&lt;p&gt;We’re happy to announce that at least three Namecoin developers will be at &lt;a href=&quot;https://events.ccc.de/congress/2024/wiki/index.php/Main_Page&quot;&gt;38C3 (the 38th Chaos Communication Congress)&lt;/a&gt; in Hamburg, December 27-30. Additionally, at least two Namecoin developers will be at &lt;a href=&quot;https://www.fosdem.org/2025/&quot;&gt;FOSDEM 2025&lt;/a&gt; in Brussels, February 1-2.&lt;/p&gt;

&lt;p&gt;We expect to give some talks, however, the details are still in flux and will probably not be announced until shortly before the beginning of the respective conferences; keep an eye on both the C3 and FOSDEM schedules to find us (or find our absence, if we are unlucky). Recordings and live-streams may happen as well.&lt;/p&gt;

&lt;p&gt;As you may recall, last year’s Congress (37C3) was the first year that Namecoin stepped out from Monero’s shadow to form our own Assembly. This was a huge success for all involved, and the Namecoin Assembly is back this year. Of course, we remain close friends with Monero. Meanwhile this will be our first time attending FOSDEM, so we’re very excited to see what we’ve been missing all these years.&lt;/p&gt;

&lt;p&gt;If you’d like to meet up with us at C3, the usual methods (c3nav, etc) should lead you to us. Meanwhile if you’d like to meet up with us at FOSDEM, you can say hello in the #namecoin-dev Matrix channel, or you can ask at the NLnet table and perhaps they may be able to point you in our direction.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2024/12/16/38c3-fosdem-2025.html</link>
        <guid isPermaLink="true">http://127.0.0.1:43110/1FPSdChfmaAjMMUgoYLxAYHTDS46gnvmUw/2024/12/16/38c3-fosdem-2025.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
  </channel>
</rss>
