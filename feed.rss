<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>https://www.namecoin.org/</link>
    <atom:link href="https://www.namecoin.org/feed.rss" rel="self" type="application/rss+xml" />
    <language>en</language>
    <pubDate>Fri, 09 Oct 2020 10:54:56 +0000</pubDate>
    <lastBuildDate>Fri, 09 Oct 2020 10:54:56 +0000</lastBuildDate>
    <generator>Jekyll</generator>
    <image>
      <url>https://www.namecoin.org/images/logo.png</url>
      <title>Namecoin</title>
      <link>https://www.namecoin.org/</link>
      <width>134</width>
      <height>25</height>
    </image>
    
      <item>
        <title>Porting Namecoin in Tor Browser to Windows</title>
        <description>&lt;p&gt;As you no doubt remember &lt;a href=&quot;/2020/01/11/36c3-summary.html&quot;&gt;from 36C3&lt;/a&gt;, the GNU/Linux version of Tor Browser Nightly comes with Namecoin support included.&lt;br /&gt;
While we’ve received significant test feedback (overwhelmingly positive), it’s been pointed out that supporting Windows would enable additional test feedback, since not everyone has a GNU/Linux machine to test things on.&lt;br /&gt;
So, I’ve been porting the Namecoin support in Tor Browser Nightly to Windows.&lt;/p&gt;

&lt;h2 id=&quot;stemns-and-tor-bootstrap&quot;&gt;StemNS and Tor Bootstrap&lt;/h2&gt;

&lt;p&gt;First off, since this endeavor was going to involve some changes to StemNS, I figured this was a good opportunity to investigate an odd bug that was happening in StemNS sometimes.&lt;br /&gt;
I had noticed last year that in a fresh Tor Browser install, if Namecoin was enabled on the first run, Tor Launcher would indicate that Tor bootstrap had stalled at the “loading authority certificates” stage.&lt;br /&gt;
I found that spamming the Tor Launcher buttons to cancel and retry connecting would usually make the connection succeed after 5-10 tries, which seemed to suggest a race condition.&lt;br /&gt;
After quite a lot of manual inspection of StemNS logs, I found something odd:&lt;br /&gt;
While the Tor control spec states that the &lt;code class=&quot;highlighter-rouge&quot;&gt;__LeaveStreamsUnattached&lt;/code&gt; config option will cause all streams to wait for the controller (StemNS in this case) to attach them, this was empirically not what was happening.&lt;br /&gt;
Rather, streams created as a result of user traffic (e.g. Firefox or Electrum-NMC) were waiting for StemNS to attach them, but streams created by Tor’s bootstrap were still automatically being attached.
The Tor control spec goes on to say the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Attempting to attach streams
via TC when “__LeaveStreamsUnattached” is false may cause a race between
Tor and the controller, as both attempt to attach streams to circuits.}&lt;/p&gt;

  &lt;p&gt;You can try to attachstream to a stream that
has already sent a connect or resolve request but hasn’t succeeded
yet, in which case Tor will detach the stream from its current circuit
before proceeding with the new attach request.}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This certainly explained what had been happening.&lt;br /&gt;
Tor was opening a stream to bootstrap (attaching the stream to a circuit in the process), and (depending on exact timing) StemNS was trying to attach it a 2nd time, which caused the stream to be detached, thus killing the bootstrap.&lt;/p&gt;

&lt;p&gt;At this point, I decided to ask the Tor developers whether this was a bug in the spec or the C implementation.&lt;br /&gt;
Roger Dingledine pointed me to the exact C code that handled this, which indicated exactly how StemNS could detect this case and handle it properly.&lt;br /&gt;
Roger also indicated that the C code was correct, and that the spec was incorrect.&lt;br /&gt;
I concurred that this made sense.&lt;/p&gt;

&lt;p&gt;I was then able to modify StemNS to handle this properly by detecting whether a new stream was created by user traffic or internal bootstrap, and only attaching streams from the former.&lt;br /&gt;
Testing confirmed that the bug was fixed.&lt;br /&gt;
Great, now let’s move on.&lt;/p&gt;

&lt;h2 id=&quot;exiting-namecoin-when-tor-browser-exits&quot;&gt;Exiting Namecoin when Tor Browser Exits&lt;/h2&gt;

&lt;p&gt;The existing Namecoin support in Tor Browser relies on a Bash script that signals Electrum-NMC and StemNS to exit after Firefox exits.&lt;br /&gt;
Alas, Bash is only used as a launcher in GNU/Linux, so I needed to port this to a more cross-platform approach.&lt;/p&gt;

&lt;p&gt;Tor Browser already solves this problem for the Tor daemon: Tor needs to exit when Firefox has done so.&lt;br /&gt;
Tor Browser does this by having Firefox send the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAKEOWNERSHIP&lt;/code&gt; command to Tor, which instructs Tor to exit when Firefox closes the control port connection.&lt;br /&gt;
This inspired me to do something similar in StemNS: I added an event listener to StemNS that triggers when Tor closes the control port connection to StemNS (which will happen when Tor exits).&lt;br /&gt;
I configured the event listener to send an RPC &lt;code class=&quot;highlighter-rouge&quot;&gt;stop&lt;/code&gt; command to Electrum-NMC (which will make Electrum-NMC exit), and then exit StemNS as well.&lt;br /&gt;
(The latter took some DuckDuckGo-fu, as it turns out that &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.exit()&lt;/code&gt; can’t be called from a child thread in Python; the correct way to exit from a child thread is &lt;code class=&quot;highlighter-rouge&quot;&gt;os._exit()&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;Some testing revealed that this worked; I was able to remove the Bash code that terminated Electrum-NMC and StemNS, and they still exited properly.&lt;br /&gt;
Moving on…&lt;/p&gt;

&lt;h2 id=&quot;launching-namecoin-when-tor-browser-starts&quot;&gt;Launching Namecoin when Tor Browser Starts&lt;/h2&gt;

&lt;p&gt;Of course, the other part of the Bash launcher for Namecoin was the code that launches Electrum-NMC and StemNS.&lt;br /&gt;
For this, I ended up copying/pasting the code in Tor Launcher that launches the Tor daemon.&lt;br /&gt;
As XPCOM-based JavaScript code goes, Tor Launcher is pretty readable, so the copy/paste job wasn’t particularly eventful.&lt;br /&gt;
I &lt;em&gt;did&lt;/em&gt; notice that the documentation for debugging Tor Launcher was outdated, but the Tor developers on IRC were able to point me in the right direction there.&lt;/p&gt;

&lt;p&gt;I won’t bore you with too many details on this part; it was mostly grunt work.&lt;br /&gt;
But I got it working.&lt;br /&gt;
Excellent, moving on….&lt;/p&gt;

&lt;h2 id=&quot;windows-and-python&quot;&gt;Windows and Python&lt;/h2&gt;

&lt;p&gt;By this point, all of the GNU/Linux-specific code had been replaced with cross-platform code.&lt;br /&gt;
So we were ready to move onto enabling Windows support.&lt;br /&gt;
Most of this was as simple as tweaking the rbm descriptors to enable Namecoin on Windows, and fixing a few bugs where the Go dependencies for certain rbm projects were wrong on Windows.&lt;br /&gt;
But, there was one issue that needed dealing with: Python.&lt;/p&gt;

&lt;p&gt;Both Electrum-NMC and StemNS are written in Python.&lt;br /&gt;
GNU/Linux systems generally have Python available by default, but this is not the case for Windows.&lt;br /&gt;
In addition, on GNU/Linux, Python scripts are executable programs, but on Windows, they’re data files that need to be explicitly opened with the Python interpreter.&lt;br /&gt;
This means that some Windows-specific things need to be done.&lt;/p&gt;

&lt;p&gt;For Python being available, I took the easy way out: I simply defined it to be out of scope, i.e. the user is responsible for installing Python themselves before enabling Namecoin in Tor Browser.&lt;br /&gt;
I also rigged Tor Launcher to check every directory in the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; for a Python interpreter, and to use the discovered Python binary as the executable, passing the Electrum-NMC or StemNS path as a command-line argument instead.&lt;br /&gt;
Worked pretty well.&lt;/p&gt;

&lt;p&gt;Finally, I re-implemented verbose logging for Namecoin (which was also part of the Bash code that I had removed).&lt;br /&gt;
This was done via a &lt;code class=&quot;highlighter-rouge&quot;&gt;TOR_VERBOSE_NAMECOIN&lt;/code&gt; environment variable.&lt;br /&gt;
It does two things when enabled:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pass the &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; argument to Electrum-NMC, which enables verbose output.&lt;/li&gt;
  &lt;li&gt;On Windows, use &lt;code class=&quot;highlighter-rouge&quot;&gt;python.exe&lt;/code&gt; (which pops up a command prompt window with logs) instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;pythonw.exe&lt;/code&gt; (which doesn’t spawn a command window).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Oh, and I had to tweak the linker flags for &lt;code class=&quot;highlighter-rouge&quot;&gt;ncprop279&lt;/code&gt; to make it avoid launching a command prompt window on Windows as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/tor/tor-browser-windows-2020-08-20.png&quot; alt=&quot;A screenshot of Namecoin in Tor Browser on Windows.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;I sent in the code to the Tor Browser Team, and it’s now awaiting review.&lt;/p&gt;

&lt;p&gt;In the meantime, I noticed that the &lt;code class=&quot;highlighter-rouge&quot;&gt;__LeaveStreamsUnattached&lt;/code&gt; issue has a more correct fix now.&lt;br /&gt;
The master branch of Tor and Stem recently added a new stream status, &lt;code class=&quot;highlighter-rouge&quot;&gt;CONTROLLER_WAIT&lt;/code&gt;, which indicates specifically that a stream is now waiting for the controller to attach it.&lt;br /&gt;
Thus, I’ve updated StemNS to only check for this status, rather than the mildly-convoluted previously-existing method of guessing whether a stream was waiting for this.&lt;br /&gt;
That means StemNS’s master branch is now incompatible with Tor 0.4.5.0, Stem 1.8.0, and earlier.&lt;br /&gt;
I’ve tagged a stable release that doesn’t include this refactor, and if any important bugfixes make their way into StemNS before the new Tor and Stem behavior gets into releases, I’ll probably backport them to a stable branch.&lt;/p&gt;

&lt;p&gt;And now, we wait for code review from the Tor Browser Team.&lt;br /&gt;
Let the bikeshedding begin!&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs and Cyberia Computer Club.&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2020/10/09/porting-namecoin-in-tor-browser-to-windows.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2020/10/09/porting-namecoin-in-tor-browser-to-windows.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Core name_list GUI</title>
        <description>&lt;p&gt;Namecoin Core’s name management GUI has always been a bit neglected.  While we do have a GUI that works reasonably well, it’s been stuck in an old branch that is nontrivial to forward-port.  The main reason that it’s been hard to maintain is that it depends on internal API’s that often get refactored, which breaks the GUI unless someone volunteers to constantly test the GUI whenever upstream refactors get merged (which is not a great use of anyone’s time).  GUI code is also hard to test on Travis CI compared to CLI-accessible code, which compounds the problem.&lt;/p&gt;

&lt;p&gt;Brandon accurately observed that a way to mitigate this issue is to expose all of the functionality that the GUI needs as RPC methods, and then simply make the GUI call RPC functions.  (Bitcoin Core includes a built-in API for internally calling RPC functions.)  This minimizes the amount of logic that the GUI needs to carry, which both enables integration testing and eliminates private API usage in the GUI code.  This was partially done in Brandon’s branch that was used for the name tab binaries that we released, but unfortunately, there was still some logic that needed internal API’s.&lt;/p&gt;

&lt;p&gt;So, I’m picking up where Brandon left off.  For one thing, I’m splitting the code into multiple PR’s, which can be merged independently: the GUI equivalents of &lt;code class=&quot;highlighter-rouge&quot;&gt;name_list&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;name_update&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_autoregister&lt;/code&gt;.  The first of these, &lt;code class=&quot;highlighter-rouge&quot;&gt;name_list&lt;/code&gt;, is used for displaying the current name inventory.  I’ve spent some time forward-porting the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_list&lt;/code&gt; GUI to current Namecoin Core, and here’s a preliminary result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/namecoin-core/manage-names-2020-08-19.png&quot; alt=&quot;A screenshot of the Manage Names tab in Namecoin-Qt.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s still some more code cleanup needed before it can be merged, but I’m optimistic that we can get a merge to happen soon.&lt;/p&gt;

</description>
        <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2020/08/23/namecoin-core-name-list-gui.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2020/08/23/namecoin-core-name-list-gui.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Core name_show name expiration</title>
        <description>&lt;p&gt;Namecoin Core will, starting version 0.21, change the default behavior of the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; RPC API call in the presence of certain errors to better match the documentation, the behavior of Electrum-NMC, and the behavior expected by users.&lt;/p&gt;

&lt;p&gt;When Namecoin Core was first written, it exposed name resolution using an inconsistent API.
When querying for a name that was not active, the behavior varied by the history of the name.
If it had never been registered, Namecoin would return an error.
If it had once been registered in the past, but was now expired, Namecoin would return a response that was deceptively similar to that returned when querying for names that were still active.&lt;/p&gt;

&lt;p&gt;Owing to this inconsistency, some applications using Namecoin Core came to treat expired names as if they were still active.
This was a security problem.
Users continued to use services identified by the names as usual, and as such their operators did not re-register them, but Namecoin does not afford unregistered names any protection.
Therefore, anyone could have registered the names, thereby hijacking the services.
While this may be considered immaterial, it is our opinion that Namecoin should not indirectly encourage such dangerous use-cases.&lt;/p&gt;

&lt;p&gt;Furthermore, those applications’ use of the API for this purpose was incorrect.
Expired names should not be considered alive, and it can hardly be thought that considering them as such would have been the intent in implementing it.
A programmer who relied solely on the documentation (“Looks up the current data for the given name. Fails if the name doesn’t exist.”) would not be left with the impression that the operation would, in fact, only fail for never-registered names.&lt;/p&gt;

&lt;p&gt;For these reasons, a change to the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; API in Namecoin Core has been made.
&lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; will now by default throw an error when attempting to resolve an expired name.
This brings the default behavior in line with Electrum-NMC, which has always thrown an error.
The old behavior can be preserved by setting the allowExpired option or -allow_expired command-line parameter to true.
There are presently no plans to deprecate these flags.&lt;/p&gt;

&lt;p&gt;This change will be included in version 0.21 of Namecoin Core.
Downstream users who use &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; to resolve names for user-facing purposes should not need to make any changes to their usage.
Downstream users who use &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; to resolve names, but who would also like to distinguish between names that have expired and names that have never been registered, are encouraged to explore the allowExpired field in the JSON RPC options argument and the -allowexpired command line parameter.
In such cases, the old behavior still applies, whereby downstream users are expected to consider the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;expired&lt;/code&gt; field to ascertain whether a domain has expired.&lt;/p&gt;

&lt;p&gt;This change does not affect the resolution of active names in any way.
This change does not affect the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_history&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;name_scan&lt;/code&gt; RPC calls.
This change does not affect Electrum-NMC.&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2020/08/22/namecoin-core-name-show-expiration.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2020/08/22/namecoin-core-name-show-expiration.html</guid>
        <dc:creator>yanmaani</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>We oppose the takeover of Open Technology Fund -- closed-source projects are scams and must not receive &quot;Internet Freedom&quot; funding</title>
        <description>&lt;p&gt;We are watching with alarm the currently-ongoing takeover of the Open Technology Fund (OTF) by the Trump Administration’s newly appointed CEO of the US Agency for Global Media (USAGM, formerly known as BBG), Michael Pack.  In the first week of the new USAGM leadership, Michael has fired OTF CEO Libby Liu and OTF President Laura Cunningham, and (according to a document released by Libby) is apparently preparing to redirect OTF funding away from the current diverse set of open-source tools in favor of a small set of tools, narrowly focused on censorship circumvention, including the closed-source scam projects “Freegate” and “Ultrasurf”.&lt;/p&gt;

&lt;p&gt;Developers of Internet Freedom software, including but not limited to Namecoin, are on the known target lists of intelligence agencies of repressive governments.  The open-source nature of our tools is a prerequisite for users to verify that we have not backdoored the software (e.g. to get dissidents killed).  Furthermore, our own safety as developers is dependent on those intelligence agencies being aware that trying to coerce us to add a backdoor would be futile due to our software’s open-source nature.&lt;/p&gt;

&lt;p&gt;For this reason, Namecoin doesn’t just settle for releasing our code under an OSI/FSF-approved license; we lead by example and push forward the front lines of openness.  For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We strive for reproducible builds in all software we release.&lt;/li&gt;
  &lt;li&gt;We use computers with open-source firmware such as the Asus C201 and the Raptor Talos II for as much of our workflow as possible.&lt;/li&gt;
  &lt;li&gt;We contribute patches to upstream software infrastructure for reproducible builds (e.g. the Gitian and rbm tools used by Tor include patches we authored).&lt;/li&gt;
  &lt;li&gt;We contribute code to software projects improving support for platforms with open-source firmware (e.g. we contribute patches to PrawnOS, we reverse-engineered the Talos II NIC firmware, and we are in the process of porting Tor Browser to ARM and POWER).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us be very clear: software projects that claim to enable “Internet Freedom” but which do not share this commitment to open-source principles are scams.  They actively endanger dissidents who are unwise enough to use them.  Under no circumstances should they receive OTF funding, or any other type of taxpayer-derived funding.&lt;/p&gt;

&lt;p&gt;In addition, the needs of dissidents are substantially more diverse than solely censorship circumvention.  Software to defend against surveillance is also critical, as are security audits, bug bounty programs, and countless other areas that OTF currently funds.  If anything, OTF’s remit would benefit from expansion; narrowing their focus to solely censorship circumvention will leave critical projects in the lurch, endangering the safety of dissidents worldwide.  We are particularly concerned about the harm caused by a narrow focus on censorship circumvention functionality due to the following considerations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Users have empirically been demonstrated to not understand the difference between anonymity and anti-censorship functionality, and giving them software that’s not safe for anonymity will result in many users using it in ways that are dangerous.&lt;/li&gt;
  &lt;li&gt;Even in a fantasy world where 100% of the users who actually need anonymity stick with tools that are safe for that use case, an exodus of the rest of the users will leave the anonymity-requiring users with a dangerously small anonymity set.  It is well-known that the reason NRL opened onion routing to the public is that an anonymity network only used by the US Navy doesn’t actually help anonymize the US Navy.  For the same reason, an anonymity network used by Chinese dissidents who require anonymity to stay safe must have a large amount of cover traffic, and users who are circumventing censorship are a major source of that cover traffic.&lt;/li&gt;
  &lt;li&gt;Censorship circumvention software that relies on security by obscurity is more likely to be censored, potentially with catastrophic timing.&lt;/li&gt;
  &lt;li&gt;Closed-source software, even if it is not required to preserve anonymity, is likely to be vulnerable to non-anonymity security bugs due to lack of peer review.  At this point we’re not even talking about repressive governments &lt;em&gt;deanonymizing&lt;/em&gt; users, we’re talking about repressive governments &lt;em&gt;obtaining remote code execution&lt;/em&gt; on dissidents’ machines.  At that point dissidents are screwed.&lt;/li&gt;
  &lt;li&gt;These closed-source censorship circumvention systems consider the centralized operators to be completely trusted 3rd parties.  There is nothing preventing these operators from covertly collecting logs of the activity of dissidents, and selling them to the highest bidder (which will probably be the governments of the countries in which the dissidents reside).  Even in the fictional scenario where these operators don’t intend to do this, an intelligence agency who compromises the operators’ infrastructure can pull off this attack without the operators’ knowledge or consent.  Again, at this point dissidents are screwed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have signed an open letter asking Members of U.S. Congress to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Require USAGM to honor existing FY2019 and FY2020 spending plans to support the Open Technology Fund;&lt;/li&gt;
  &lt;li&gt;Require all US-Government internet freedom funds to be awarded via an open, fair, competitive, and evidence-based decision process;&lt;/li&gt;
  &lt;li&gt;Require all internet freedom technologies supported with US-Government funds to remain fully open-source in perpetuity;&lt;/li&gt;
  &lt;li&gt;Require regular security audits for all internet freedom technologies supported with US-Government funds; and&lt;/li&gt;
  &lt;li&gt;Pass the Open Technology Fund Authorization Act.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While it is regrettable that so much Internet Freedom infrastructure is dependent on OTF (Decentralize All The Things!), and it would be advisable for affected projects to investigate diversifying their funding sources, that cannot be done overnight.  The damage done by a successful hijacking of OTF &lt;em&gt;will&lt;/em&gt; occur overnight, and will cause lasting damage that cannot be mitigated by a long-term strategy of diversification.  As such, it is critical that the decentralization community oppose the OTF takeover.&lt;/p&gt;

&lt;p&gt;Help us save OTF from takeover.  &lt;a href=&quot;https://saveinternetfreedom.tech/information/how-to-help/&quot;&gt;You can find more information on how to help here.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2020/07/08/we-oppose-the-takeover-of-open-technology-fund.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2020/07/08/we-oppose-the-takeover-of-open-technology-fund.html</guid>
        <dc:creator>Jeremy Rand, Daniel Kraft, Andy Colosimo, Ahmed Bodiwala, Somewhat, and Anonymous Namecoin Developer(s)</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC v3.3.10 Released</title>
        <description>&lt;p&gt;We’ve released Electrum-NMC v3.3.10.  This release (which is still based on upstream Electrum v3.3.8) includes a few high-demand bug fixes that we wanted to get released before upstream Electrum tags v4.0.0.&lt;/p&gt;

&lt;p&gt;Here’s what’s new since v3.3.9.1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;From upstream Electrum:
    &lt;ul&gt;
      &lt;li&gt;Build script fixes.  (Backported from Electrum v4.0.0.)&lt;/li&gt;
      &lt;li&gt;Fix connecting to non-DNS IPv6 servers on Windows.  (Backported from Electrum v4.0.0.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Namecoin-specific:
    &lt;ul&gt;
      &lt;li&gt;Features:
        &lt;ul&gt;
          &lt;li&gt;Enable Renew/Configure buttons based on selection.  (Patch by Jeremy Rand.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Bug fixes:
        &lt;ul&gt;
          &lt;li&gt;Fix &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; fault detection.  (Patch by Jeremy Rand; thanks to s7r for reporting issue.)&lt;/li&gt;
          &lt;li&gt;Fix exception when right-clicking on a &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; for which the name identifier is unknown in &lt;code class=&quot;highlighter-rouge&quot;&gt;UNOList&lt;/code&gt;.  (Patch by Jeremy Rand; thanks to ghost for reporting issue.)&lt;/li&gt;
          &lt;li&gt;Fix exception handling in name registration Qt GUI.  (Patch by Jeremy Rand; thanks to s7r for reporting issue.)&lt;/li&gt;
          &lt;li&gt;Fix Mempool-based fee estimation limits.  (Patch by Jeremy Rand; thanks to s7r for reporting issue.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, due to a currently-unresolved upstream bug, we are not able to provide Android/Linux binaries at this time.  Android/Linux users should remain on v3.3.9.1.&lt;/p&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#electrum-nmc&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2020/06/07/electrum-nmc-v3.3.10-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2020/06/07/electrum-nmc-v3.3.10-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>Electrum Releases</category>
        
        
      </item>
    
      <item>
        <title>Deterministic Salts</title>
        <description>&lt;p&gt;When Namecoin was first being designed, an attack had to be dealt with: the &lt;em&gt;frontrunning attack&lt;/em&gt;.  The attack works like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Julian broadcasts a transaction, indicating that he wants to buy &lt;code class=&quot;highlighter-rouge&quot;&gt;wikileaks.bit&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Keith sees Julian’s transaction as soon as it gets broadcasted.&lt;/li&gt;
  &lt;li&gt;Keith infers that Julian places a significant value on &lt;code class=&quot;highlighter-rouge&quot;&gt;wikileaks.bit&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Keith broadcasts his own transaction, trying to buy &lt;code class=&quot;highlighter-rouge&quot;&gt;wikileaks.bit&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Keith bribes a miner to mine his transaction rather than Julian’s.  (This could be done by using a much higher transaction fee than Julian’s transaction, or it could be done via out-of-band channels, perhaps a court order.)&lt;/li&gt;
  &lt;li&gt;Keith now owns &lt;code class=&quot;highlighter-rouge&quot;&gt;wikileaks.bit&lt;/code&gt;, not Julian, even though Julian was the first person to try to buy it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Astute readers will note that the fundamental problem here is that DNS-like systems are supposed to be “first-come-first-served”, but a blockchain isn’t able to meaningfully determine which transaction came first if they were both broadcasted before either was mined.  Similar problems happen in Bitcoin when an attacker tries to spend the same coins to two different destination addresses at the same block height: there’s no reliable way to determine which spend came first, so it’s up to the miners to decide.&lt;/p&gt;

&lt;p&gt;So, how was this fixed?  Via &lt;em&gt;commitments&lt;/em&gt;.  When Julian wants to buy &lt;code class=&quot;highlighter-rouge&quot;&gt;wikileaks.bit&lt;/code&gt;, he first broadcasts a &lt;em&gt;commitment&lt;/em&gt; transaction.  The transaction doesn’t reveal the name he wants to buy; it instead consists of a hash of two things: the name he wants to buy, and a secret randomly generated string (called a &lt;em&gt;salt&lt;/em&gt;).  Without knowing the salt and the name already, Keith can’t determine what name Julian is buying.  And since the salt is randomly generated and is high in entropy, Keith can’t even mount a dictionary attack on the hash; even if Keith suspects that Julian is buying &lt;code class=&quot;highlighter-rouge&quot;&gt;wikileaks.bit&lt;/code&gt;, Keith can’t verify this without knowing the salt.&lt;/p&gt;

&lt;p&gt;After the commitment transaction has received 12 confirmations, Julian broadcasts a 2nd transaction that reveals the name and the salt.  Once this 2nd transaction is mined, Julian officially owns &lt;code class=&quot;highlighter-rouge&quot;&gt;wikileaks.bit&lt;/code&gt;.  The key point here is that once the 2nd transaction is broadcasted, Julian only needs 1 block to be mined in order to obtain the name – but if Keith tries to register it, he’ll need to broadcast his own commitment (now that he knows the name) and wait for 12 blocks before he can register the name.  In other words, the existence of the commitment gives Julian a 12-block head start against Keith, which should ensure that Julian gets the name (unless Keith has successfully bribed the miners of 12 blocks in a row, which seems unlikely).&lt;/p&gt;

&lt;p&gt;This scheme brings important security, but it also poses a problem.  Imagine the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Matthew broadcasts a commitment transaction for &lt;code class=&quot;highlighter-rouge&quot;&gt;theintercept.bit&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Sometime in the next 12 blocks, Matthew’s hard drive dies.&lt;/li&gt;
  &lt;li&gt;Matthew restores his wallet from his seed phrase on another machine.&lt;/li&gt;
  &lt;li&gt;Matthew tries to register &lt;code class=&quot;highlighter-rouge&quot;&gt;theintercept.bit&lt;/code&gt; by spending the commitment transaction in his wallet.&lt;/li&gt;
  &lt;li&gt;Uh oh.  Matthew’s wallet doesn’t know what the salt is!  It was only on the hard drive that died.  Matthew forfeits the name registration fee, and has to start over.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can we improve this situation?  Yes!  The answer is &lt;em&gt;deterministic salts&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On a high level, we want the wallet application to pick a salt that is reliably predictable to the wallet owner, but still unpredictable to anyone else.  We homed in on the following secret knowledge:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The private key of the address that owns the commitment transaction.&lt;/li&gt;
  &lt;li&gt;The name being registered.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We don’t want the name to be the only input to the salt, since at that point the salt is pretty much ineffectual: remember that the purpose of the salt is to stop people who can guess the name from figuring out whether their guess is accurate!  We also don’t want the private key to be the only input, because this would imply predictable salt reuse if address reuse occurs.  (Yes, I know, address reuse is bad.  But address reuse is typically only a privacy harm; there’s no reason to unnecessarily exacerbate the impact of address reuse by turning it into a name theft harm too.)&lt;/p&gt;

&lt;p&gt;So, how do we combine the private key and the name to get a salt?  It turns out that there’s a standard cryptographic function for this: &lt;a href=&quot;https://tools.ietf.org/html/rfc5869&quot;&gt;HKDF (RFC 5869)&lt;/a&gt;.  Conveniently, HKDF is already present in both Bitcoin Core and Electrum, so no additional libraries need to be imported.  Specifically, we can use the following HKDF parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initial key material: private key&lt;/li&gt;
  &lt;li&gt;Salt: name identifier&lt;/li&gt;
  &lt;li&gt;Info: “Namecoin Registration Salt”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The “Info” parameter is designed to prevent cross-protocol attacks, where someone uses the same construction for two completely different purposes in order to induce a user of one protocol to compromise themselves in the other protocol.&lt;/p&gt;

&lt;p&gt;I’ve now implemented HKDF-based deterministic salts in Electrum-NMC.  For example, you can now do the following command as before:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name_new(&quot;d/example&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you’ll get back a transaction and a salt, like before.  But, you’re now free to ignore this salt, because you don’t need it anymore!  You can complete the registration 12 blocks later like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name_firstupdate(&quot;d/example&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that you don’t need to enter a salt or a TXID anymore!  Electrum-NMC checks each &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; UTXO in its wallet to see if the output of HKDF yields the commitment in the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt;, and if it does, Electrum-NMC uses that TXID and salt automatically.  This works even if you’re running &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; after restoring the wallet from a seed on a different machine than the one that produced the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; transaction.&lt;/p&gt;

&lt;p&gt;Pretty cool, huh?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks to s7r for the idea of deterministic salts; thanks to Ryan Castellucci for cryptographic advice; and thanks to Daniel Kraft for discussions about Namecoin Core integration.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2020/05/10/deterministic-salts.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2020/05/10/deterministic-salts.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Video Recordings of ICANN60 Joint Meeting of ICANN Board and Technical Experts Group</title>
        <description>&lt;p&gt;At Namecoin, we generally try to be good citizens in the broader community.  This means that we regularly engage in analysis, peer review, and patch writing for projects that aren’t strictly part of Namecoin.  In that spirit, today we are posting free-software-friendly video recordings of the Joint Meeting of the ICANN Board and the ICANN Technical Experts Group at ICANN60 in Abu Dhabi on November 1, 2017.  We hope that making this session more accessible to free software users will facilitate increased peer review, analysis, and research.&lt;/p&gt;

&lt;p&gt;This session included the following presentations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alain Durand and Fernando Lopez: &lt;em&gt;DOA-like Persistent Identifiers over DNS: a Prototype&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Leonard Tan: &lt;em&gt;Ethereum Name Service&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Michael Palage and Pindar Wong: &lt;em&gt;Distributed Ledger Technology (aka Blockchain): Evolution or Revolution&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Steve Crocker: &lt;em&gt;Tamperproof Root Zone Management System&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;low-quality-free-software-friendly-video-recording-with-slides&quot;&gt;Low-Quality Free-Software-Friendly Video Recording (With Slides)&lt;/h2&gt;

&lt;video controls=&quot;&quot;&gt;
&lt;source src=&quot;https://www.namecoin.org/files/videos/icann-60/ICANN-60-Joint-Meeting-ICANN-Board-and-Technical-Experts-Group-LQ-Video-with-Slides.webm#t=62&quot; type=&quot;video/webm&quot; /&gt;
Video with slides.
&lt;/video&gt;

&lt;h2 id=&quot;high-quality-free-software-friendly-video-recording-without-slides&quot;&gt;High-Quality Free-Software-Friendly Video Recording (Without Slides)&lt;/h2&gt;

&lt;video controls=&quot;&quot;&gt;
&lt;source src=&quot;https://www.namecoin.org/files/videos/icann-60/ICANN-60-Joint-Meeting-ICANN-Board-and-Technical-Experts-Group-HQ-Video-Only.webm#t=624&quot; type=&quot;video/webm&quot; /&gt;
Video without slides.
&lt;/video&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;

&lt;p&gt;The above free-software-friendly recordings are converted from &lt;a href=&quot;https://icann60abudhabi2017.sched.com/event/CbHh/joint-meeting-icann-board-technical-experts-group-teg&quot;&gt;ICANN’s official recordings&lt;/a&gt;.  Copyright ICANN; used with permission.  Additional material, e.g. audio-only recordings, slides, and transcripts, can be found on ICANN’s website.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2020/04/30/icann-60-teg-recordings.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2020/04/30/icann-60-teg-recordings.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Merchandise Now Available at Cypher Market</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.cyphermarket.com/namecoin/&quot;&gt;Namecoin-branded merchandise&lt;/a&gt; (e.g. T-shirts and stickers) are now for sale from our friends at Cypher Market.  Not only is this a good way to spread the word about Namecoin, but Cypher Market also donates a cut of the profits to support Namecoin development.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2020/04/24/merchandise-cypher-market.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2020/04/24/merchandise-cypher-market.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC v3.3.9.1 Released</title>
        <description>&lt;p&gt;We’ve released Electrum-NMC v3.3.9.1.  This release (which is still based on upstream Electrum v3.3.8) includes a few high-demand new features and bug fixes that we wanted to get released before upstream Electrum tags v4.0.0.&lt;/p&gt;

&lt;p&gt;Here’s what’s new since v3.3.8:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;From upstream Electrum:
    &lt;ul&gt;
      &lt;li&gt;Build script fixes backported from Electrum v4.0.0.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Namecoin-specific:
    &lt;ul&gt;
      &lt;li&gt;Features:
        &lt;ul&gt;
          &lt;li&gt;Add DNS builder GUI based on Namecoin Core.  (Patch by Jeremy Rand; based on a Namecoin Core patch by Brandon Roberts.)&lt;/li&gt;
          &lt;li&gt;Add more servers.  (Patches by Jeremy Rand; thanks to deafboy, ccomp, and s7r for running the servers.)&lt;/li&gt;
          &lt;li&gt;Allow pausing network on startup; unpause via an RPC command (mostly relevant for Tor Browser integration).  (Patch by Jeremy Rand; thanks to Georg Koppen and mjgill89 for reporting Tor Browser issue; thanks to SomberNight for brainstorming solutions.)&lt;/li&gt;
          &lt;li&gt;Update checkpoint.  (Patch by Jeremy Rand.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Bug fixes:
        &lt;ul&gt;
          &lt;li&gt;Return correct error code when looking up nonexistent names.  Fixes issue where ncdns was recognizing this error as &lt;code class=&quot;highlighter-rouge&quot;&gt;SERVFAIL&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;NXDOMAIN&lt;/code&gt;.  (Patch by Jeremy Rand; thanks to Georg Koppen for reporting Tor Browser issue.)&lt;/li&gt;
          &lt;li&gt;Fix connectivity issues that could cause slow syncup or syncup getting stuck completely (these bugs were related to the stream isolation and parallel chain download patches).  (Patches by Jeremy Rand; thanks to Georg Koppen, mjgill89, and s7r for reporting issues.)&lt;/li&gt;
          &lt;li&gt;Fix minor error handling bugs in name registration GUI and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; RPC command.  (Patches by Jeremy Rand; thanks to s7r for reporting issues.)&lt;/li&gt;
          &lt;li&gt;Add some additional AuxPoW checks.  (Patches by Jeremy Rand.)&lt;/li&gt;
          &lt;li&gt;Disable stream-isolated server pool if in &lt;code class=&quot;highlighter-rouge&quot;&gt;oneserver&lt;/code&gt; mode (fixes a privacy leak).  (Patch by Jeremy Rand; thanks to s7r for reporting issue.)&lt;/li&gt;
          &lt;li&gt;Fix missing help text for &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; RPC command.  (Patch by Jeremy Rand.)&lt;/li&gt;
          &lt;li&gt;Fix missing locale data in Python binaries.  (Patch by Jeremy Rand.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#electrum-nmc&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2020/04/17/electrum-nmc-v3.3.9.1-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2020/04/17/electrum-nmc-v3.3.9.1-released.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>Releases</category>
        
        <category>Electrum Releases</category>
        
        
      </item>
    
      <item>
        <title>Transproxy Support in ZeroNet</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://zeronet.io/&quot;&gt;ZeroNet&lt;/a&gt; supports Namecoin as a naming layer.  Unfortunately, the UX for this feature isn’t quite optimal.  Specifically, the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domain shows up in the path of the URL rather than the hostname; the hostname is the hostname of the machine running ZeroNet (typically &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;).  Can this be improved?&lt;/p&gt;

&lt;p&gt;In a word, yes.  I’ve added &lt;em&gt;transproxy&lt;/em&gt; support to ZeroNet, which facilitates a much better UX.  This feature uses the HTTP Host header to determine which &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; site is being accessed.  So if the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; site points to &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;, you can type in the domain into your web browser, and your browser will automagically tell ZeroNet which website to display.&lt;/p&gt;

&lt;p&gt;As an example, here’s ZeroTalk displayed in Firefox in transproxy mode:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/zeronet/zeronet-trans-proxy-2018-08-01.png&quot; alt=&quot;A screenshot of ZeroTalk; the URL bar shows &amp;quot;talk.zeronetwork.bit&amp;quot;.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This screenshot was obtained by fiddling with the OS’s &lt;code class=&quot;highlighter-rouge&quot;&gt;hosts&lt;/code&gt; file, but automatic ZeroNet integration could be added to ncdns in the future.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org/2020/04/09/transproxy-support-in-zeronet.html</link>
        <guid isPermaLink="true">https://www.namecoin.org/2020/04/09/transproxy-support-in-zeronet.html</guid>
        <dc:creator>Jeremy Rand</dc:creator>
        
        <category>News</category>
        
        
      </item>
    
  </channel>
</rss>
